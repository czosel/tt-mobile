%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Logo_new.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: d
%%CreationDate: 11/14/2018
%%BoundingBox: 0 0 457 323
%%HiResBoundingBox: 0 0 456.6573 322.8047
%%CropBox: 0 0 456.6573 322.8047
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x198 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">raw1</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2018-11-14T13:28:19+01:00</xap:CreateDate>
         <xap:ModifyDate>2018-11-14T13:28:19+01:00</xap:ModifyDate>
         <xap:MetadataDate>2018-11-14T13:28:19+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>184</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqsn9b0ZPQp63E+ny6cqbVynUeJ4cvDrjo1fK+jKNXvy&#xA;Sjy/Y6nby3M16SDMQeJYMSf5tiRnNeznZ+rwzyT1HOddQbPfs5OpyQkAI9E6zq3EdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdiqX6s+rxiN9PRXCkmVDTcdtjT8Dmk7Zya2AjLSgSr6htv8A&#xA;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&#xA;Yq7FXYq7FX//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:DDAFD9C408E8E811B3D5A9B7B522E20C</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:DEAFD9C408E8E811B3D5A9B7B522E20C</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b843315e-8bc9-4881-95f0-4bb61c541f30</stRef:instanceID>
            <stRef:documentID>uuid:8C7832E8EF5EE61194F6E29C928C0F0B</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <photoshop:ColorMode>3</photoshop:ColorMode>
         <photoshop:TextLayers>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <photoshop:LayerName>Schlosscup</photoshop:LayerName>
                  <photoshop:LayerText>Schlosscup</photoshop:LayerText>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <photoshop:LayerName>TTC Burgdorf</photoshop:LayerName>
                  <photoshop:LayerText>TTC Burgdorf</photoshop:LayerText>
               </rdf:li>
            </rdf:Bag>
         </photoshop:TextLayers>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapRights="http://ns.adobe.com/xap/1.0/rights/">
         <xapRights:Marked>False</xapRights:Marked>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:Type>Document</illustrator:Type>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -322.805 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 322.805 li
456.657 322.805 li
456.657 0 li
cp
clp
[1 0 0 1 0 0 ] concat
319.635 0 mo
319.636 .120117 319.589 .3125 319.645 .348145 cv
320.741 1.06738 320.65 2.52344 321.545 3.37402 cv
322.115 3.91846 322.053 5.99219 321.546 6.72607 cv
321.176 7.26221 320.601 7.72803 320.82 8.52002 cv
320.885 8.75146 320.697 8.84814 320.487 8.92139 cv
319.588 9.23535 319.727 10.8433 318.294 10.5894 cv
317.403 10.4321 316.462 10.5215 315.546 10.5684 cv
313.796 10.6602 312.997 9.21436 311.842 8.34424 cv
312.552 7.47217 311.697 6.08643 312.472 5.48438 cv
313.367 4.78711 313.78 3.61914 314.893 3.19629 cv
315.034 3.14209 315.263 3.04932 315.272 2.95605 cv
315.401 1.72021 316.942 1.70215 317.26 .599121 cv
317.45 -.0639648 318.332 .52832 318.675 0 cv
319.635 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.933333 .847059 .0196078 rgb
f
49.8745 125.04 mo
51.8257 124.811 53.2344 125.836 54.7134 126.921 cv
55.5615 127.543 56.5024 127.98 57.2207 128.833 cv
57.4985 129.162 57.5366 129.402 57.5366 129.707 cv
57.5366 130.217 57.1055 130.072 56.8228 130.072 cv
56.2363 130.07 55.7764 129.862 55.2808 129.462 cv
54.5654 128.887 53.5005 128.87 52.8296 128.103 cv
52.0518 127.212 51.0557 126.663 49.8745 126.48 cv
49.8745 125.04 li
cp
f
237.281 162.5 mo
237.251 161.34 237.606 160.26 238.098 159.246 cv
238.718 157.965 238.305 156.368 239.375 155.241 cv
239.479 155.132 239.536 154.872 239.622 154.869 cv
241.27 154.808 242.02 152.937 243.652 152.884 cv
243.983 152.873 243.977 152.594 244.134 152.449 cv
244.91 151.736 245.567 150.799 246.745 150.739 cv
247.342 150.709 247.465 150.17 247.791 149.887 cv
249.374 148.512 251.357 148.766 252.379 150.56 cv
252.602 150.951 252.901 151.535 253.324 151.373 cv
253.721 151.222 254.043 150.79 254.188 150.161 cv
254.405 149.213 254.532 148.099 255.389 147.411 cv
256.225 146.739 256.186 145.664 256.591 144.811 cv
257.42 143.069 258.114 141.245 258.863 139.453 cv
259.55 137.81 260.106 136.107 260.863 134.498 cv
261.631 132.866 261.77 130.949 263.089 129.569 cv
263.633 129.001 262.713 128.875 262.727 128.4 cv
262.743 127.716 262.466 127.154 261.923 126.577 cv
261.066 125.668 261.021 124.503 261.766 123.367 cv
262.911 121.617 263.543 119.639 264.329 117.717 cv
265.058 115.937 265.328 114.044 266.034 112.257 cv
266.408 111.311 266.889 110.233 266.932 109.025 cv
266.977 107.793 267.713 106.555 268.28 105.383 cv
268.898 104.107 268.951 102.632 269.752 101.439 cv
269.911 101.202 269.906 100.732 270.351 100.811 cv
272.203 101.144 272.32 99.4268 272.744 98.4839 cv
273.234 97.3931 273.455 96.1299 274.043 95.0547 cv
274.681 93.8867 274.785 92.5688 275.333 91.3579 cv
276.38 89.0469 276.985 86.5439 278.096 84.2437 cv
278.348 83.7236 277.724 82.936 278.642 82.5928 cv
278.904 82.4946 279.07 81.7778 279.387 82.1851 cv
279.665 82.5449 280.384 83.0586 279.977 83.5356 cv
279.321 84.3057 279.578 85.208 279.371 86.022 cv
278.946 87.6948 278.6 89.3906 278.195 91.0728 cv
277.91 92.2598 278.07 93.5728 277.635 94.7788 cv
277.284 95.7539 276.989 96.7539 276.577 97.7026 cv
276.337 98.2568 276.496 98.7939 276.425 99.335 cv
276.193 101.11 275.44 102.747 275.112 104.518 cv
274.87 105.83 274.921 107.207 274.49 108.464 cv
273.914 110.148 273.85 111.864 273.74 113.608 cv
273.686 114.483 272.971 113.843 272.555 113.733 cv
272.361 113.683 272.352 113.27 272.026 113.784 cv
271.63 114.408 271.387 114.979 271.396 115.688 cv
271.411 117.235 271.301 118.785 271.628 120.319 cv
271.803 121.135 272.146 121.958 272.474 122.637 cv
273.121 123.979 272.883 125.3 272.732 126.534 cv
272.627 127.389 271.778 128.459 270.979 128.846 cv
269.951 129.343 269.814 130.283 269.252 130.987 cv
268.854 131.484 269.073 132.025 269.523 132.507 cv
270.238 133.274 270.853 134.136 271.524 134.937 cv
272.025 135.534 271.995 135.312 272.228 134.904 cv
272.449 134.516 272.925 134.634 273.255 134.375 cv
274.423 133.459 275.353 132.326 276.38 131.28 cv
277.021 130.628 277.743 130.077 278.306 129.319 cv
279.724 127.403 281.576 125.864 282.812 123.749 cv
283.567 122.453 284.585 121.219 285.584 120.088 cv
286.319 119.256 287.001 118.174 288.167 117.726 cv
288.338 117.66 288.474 117.469 288.596 117.313 cv
290.279 115.161 292.258 113.268 293.865 111.028 cv
294.499 110.145 295.321 109.222 295.971 108.334 cv
296.813 107.184 297.683 106.018 298.545 104.881 cv
299.562 103.542 299.9 101.739 301.445 100.762 cv
301.917 100.463 301.946 99.7578 302.162 99.2739 cv
302.692 98.084 303.503 97.0557 304.225 96.062 cv
305.285 94.5996 306.151 93.0107 307.066 91.4937 cv
307.935 90.0547 308.951 88.623 309.393 86.8687 cv
309.697 85.6538 310.423 84.4839 311.005 83.3237 cv
311.216 82.9038 311.193 82.5156 311.297 82.1318 cv
311.648 80.8359 311.882 79.4868 311.434 78.1787 cv
311.028 76.9961 311.516 75.9497 311.881 74.9517 cv
312.416 73.4946 312.822 72.166 311.86 70.7271 cv
311.383 70.0117 312.308 69.6006 312.538 69.0688 cv
313.182 67.5859 314.474 66.501 315.51 65.2627 cv
315.881 64.8198 316.593 64.8589 317.035 65.2427 cv
318.329 66.3687 318.254 68.6348 316.926 69.75 cv
316.696 69.9429 316.273 69.9648 316.323 70.3779 cv
316.353 70.6196 316.566 70.7827 316.833 70.7891 cv
317.224 70.7969 317.744 70.9287 317.876 70.4429 cv
318.162 69.3838 318.984 69.521 319.673 69.6587 cv
320.157 69.7549 320.537 69.8496 321.024 69.6406 cv
321.64 69.3779 322.158 69.8721 322.418 70.271 cv
322.63 70.5967 322.76 71.2349 322.146 71.6147 cv
321.913 71.7568 321.795 72.0737 321.524 72.2729 cv
320.905 72.7256 320.683 73.188 320.977 74.1431 cv
321.438 75.6396 320.787 77.1538 319.936 78.4478 cv
318.758 80.2358 318.096 82.2598 317.132 84.1396 cv
316.688 85.0049 316.428 86.0229 315.628 86.6777 cv
315.091 87.1187 315.593 87.9077 315.202 88.209 cv
314.423 88.8066 313.954 89.5977 313.776 90.4541 cv
313.408 92.2168 312.08 93.4507 311.313 94.9771 cv
310.653 96.2827 309.651 97.626 308.887 98.9429 cv
307.933 100.589 306.611 102.047 305.983 103.857 cv
305.6 104.964 304.668 105.601 304.047 106.482 cv
303.354 107.467 302.84 108.609 301.914 109.462 cv
301.527 109.82 300.963 110.32 300.865 110.688 cv
300.527 111.952 299.118 112.412 298.83 113.511 cv
298.535 114.635 297.236 114.586 296.939 115.638 cv
296.52 117.129 295.125 118.088 294.825 119.771 cv
294.477 121.73 293.53 123.454 291.91 124.899 cv
289.527 127.025 287.607 129.615 285.605 132.121 cv
284.629 133.342 283.434 134.55 281.974 135.458 cv
280.969 136.082 279.63 137.059 280.257 138.824 cv
280.662 139.963 279.463 140.643 279.209 141.643 cv
279.068 142.195 278.352 141.734 277.979 141.341 cv
277.852 141.205 277.919 140.921 277.642 140.91 cv
277.16 141.391 277.21 142.2 276.59 142.606 cv
276.491 142.671 276.451 142.881 276.446 143.026 cv
276.416 143.964 277.872 145.538 278.813 145.691 cv
279.926 145.872 281.017 146.19 281.992 145.246 cv
282.133 145.109 282.585 145.137 282.939 145.432 cv
284.324 146.583 285.813 146.206 287.343 145.646 cv
288.688 145.154 289.586 144.067 290.625 143.229 cv
291.367 142.631 292.233 141.917 292.692 140.937 cv
292.775 140.759 293.096 140.693 292.868 140.414 cv
292.706 140.215 292.535 140.105 292.26 140.283 cv
292.069 140.406 291.732 140.377 291.616 140.532 cv
290.398 142.174 288.381 142.393 286.718 143.191 cv
286.033 143.519 284.893 143.627 284.096 142.817 cv
283.787 142.504 283.378 142.2 282.964 142.099 cv
282.105 141.891 281.775 141.373 281.71 140.555 cv
281.639 139.65 282.063 138.95 282.781 138.579 cv
283.521 138.196 284.188 137.743 284.775 137.185 cv
285.961 136.058 287.436 135.809 288.969 135.576 cv
290.356 135.366 291.738 135.408 293.124 135.349 cv
294.036 135.31 295.376 134.072 295.009 133.777 cv
294.216 133.141 294.5 132.352 294.44 131.605 cv
294.401 131.117 294.574 130.854 295.05 130.504 cv
296.162 129.684 297.55 129.119 298.418 128.203 cv
299.208 127.368 300.441 127.275 301.022 126.162 cv
301.314 125.603 302.05 126.158 302.05 126.684 cv
302.05 127.518 302.363 128.118 302.839 128.749 cv
303.466 129.579 302.862 130.207 302.225 130.565 cv
300.354 131.614 298.726 133 296.987 134.227 cv
296.387 134.651 297.112 135.553 296.702 136.166 cv
296.896 136.29 297.159 136.563 297.272 136.511 cv
297.753 136.291 298.504 136.44 298.556 135.554 cv
298.579 135.123 298.968 134.816 299.404 134.666 cv
299.551 134.615 299.792 134.639 299.848 134.545 cv
300.863 132.808 302.846 132.213 304.231 130.886 cv
305.016 130.136 305.876 129.285 306.992 128.756 cv
308.137 128.214 308.96 127.03 310.051 126.322 cv
310.75 125.868 311.258 125.046 312.227 125.013 cv
312.405 125.007 312.666 124.899 312.742 124.758 cv
313.443 123.462 315.014 123.509 315.978 122.633 cv
317.528 121.224 319.616 121.041 321.444 120.269 cv
321.985 120.041 322.437 119.476 322.437 119.261 cv
322.439 117.171 324.408 116.809 325.456 115.662 cv
326.566 114.446 328.021 113.632 329.296 112.622 cv
330.478 111.687 331.396 110.334 332.943 109.87 cv
333.092 109.826 333.283 109.769 333.356 109.655 cv
333.681 109.151 334.148 108.652 334.591 109.289 cv
334.969 109.833 335.05 110.809 334.566 111.283 cv
332.684 113.127 330.775 114.93 328.614 116.499 cv
327.404 117.377 326.231 118.211 324.885 118.843 cv
324.557 118.998 324.596 119.263 324.978 119.53 cv
326.029 120.266 327.264 119.963 328.396 120.204 cv
330.29 120.607 332.215 120.742 334.124 120.045 cv
334.56 119.886 335.383 119.699 335.611 120.368 cv
335.859 121.095 335.896 121.93 335.31 122.612 cv
334.632 123.401 333.612 123.672 332.799 124.276 cv
330.816 125.749 328.756 127.117 326.766 128.585 cv
325.428 129.571 324.131 130.807 322.445 131.292 cv
321.443 131.581 320.784 132.471 319.692 132.656 cv
318.494 132.858 317.361 133.446 316.163 133.643 cv
315.188 133.804 314.204 134.075 313.135 133.734 cv
312.417 133.504 311.839 133.051 311.061 132.864 cv
308.818 132.328 308.819 132.165 307.629 134.037 cv
307.362 134.457 306.984 134.698 306.68 135.041 cv
305.523 136.344 305.612 137.116 307.259 137.726 cv
308.823 138.306 309.923 139.609 311.467 140.173 cv
311.846 140.311 311.646 140.652 311.758 140.881 cv
311.969 141.039 312.144 141.297 312.468 141.137 cv
314.277 141.341 315.726 140.236 317.354 139.836 cv
318.498 139.554 319.572 139.252 320.65 138.76 cv
322.405 137.959 324.334 137.579 326.027 136.582 cv
326.581 136.256 327.244 136.007 327.942 136.083 cv
328.301 136.122 328.587 135.98 328.767 135.704 cv
329.468 134.625 330.68 134.441 331.734 133.984 cv
331.875 133.923 332.092 133.973 332.188 133.882 cv
333.747 132.403 336.12 132.507 337.698 130.995 cv
338.249 130.468 339.229 130.51 339.976 130.101 cv
342.571 128.679 345.329 127.524 347.803 125.924 cv
348.925 125.198 350.359 125.435 351.221 124.484 cv
352.144 123.468 353.459 123.331 354.537 122.683 cv
355.524 122.09 356.313 121.144 357.529 120.941 cv
357.599 120.929 357.709 120.877 357.718 120.829 cv
358.058 118.891 359.697 118.146 361.044 117.09 cv
362.797 115.716 364.461 114.284 366.456 113.191 cv
367.642 112.541 368.655 111.27 369.917 110.739 cv
371.634 110.018 372.991 108.602 374.904 108.297 cv
375.437 108.212 375.911 108.277 376.198 108.633 cv
376.563 109.085 375.933 109.343 375.727 109.53 cv
374.63 110.526 373.471 111.454 372.303 112.368 cv
370.433 113.832 368.528 115.255 366.661 116.724 cv
366.335 116.98 365.475 116.88 365.693 117.352 cv
366.024 118.065 366.403 116.907 366.844 117.13 cv
367.943 117.683 368.618 117.052 369.471 116.451 cv
370.2 115.936 371.139 115.69 372.146 115.595 cv
373.276 115.488 374.404 114.905 375.428 114.338 cv
375.788 114.139 376.088 114.054 376.46 113.994 cv
377.884 113.765 379.292 113.49 380.414 112.461 cv
380.733 112.169 383.337 112.296 383.718 112.573 cv
384.85 113.398 385.705 114.426 385.339 115.894 cv
385.163 116.599 384.145 116.549 383.615 117.041 cv
382.495 118.083 380.772 117.764 379.615 118.706 cv
378.115 119.928 375.988 119.747 374.553 120.979 cv
373.526 121.858 372.202 121.522 371.13 122.121 cv
370.852 122.277 370.486 122.327 370.199 122.557 cv
368.954 123.555 367.268 123.468 365.935 124.295 cv
364.512 125.177 362.786 125.295 361.289 125.984 cv
360.348 126.417 359.432 126.825 358.396 126.991 cv
357.856 127.078 357.749 127.633 357.806 128.116 cv
357.876 128.734 357.707 129.191 357.145 129.41 cv
357.184 130.019 358.289 129.641 357.995 130.341 cv
357.783 130.848 357.313 131.235 356.768 131.554 cv
355.905 132.059 355.204 132.4 354.311 131.597 cv
353.891 131.22 353.817 131.077 354.285 130.768 cv
354.834 130.407 354.751 130.114 354.184 129.845 cv
353.556 129.548 353.004 129.117 352.205 129.326 cv
351.771 129.44 351.508 129.432 351.524 130.014 cv
351.546 130.789 350.69 130.884 350.243 131.241 cv
348.9 132.312 347.969 133.736 346.85 134.987 cv
346.193 135.719 347.056 137.318 347.884 138.043 cv
349.957 139.855 352.435 139.852 354.855 139.62 cv
356.87 139.426 358.856 138.799 360.891 138.64 cv
362.085 138.546 363.149 137.873 364.371 137.993 cv
364.631 138.018 365.015 138.056 364.979 137.635 cv
364.832 135.916 366.461 135.603 367.315 134.693 cv
367.664 134.32 368.23 134.204 368.798 134.097 cv
369.55 133.955 370.375 133.866 371.028 133.256 cv
371.249 133.048 371.918 132.611 372.28 133.211 cv
372.569 133.69 372.635 134.319 372.167 134.747 cv
371.396 135.452 370.769 136.297 369.618 136.58 cv
368.445 136.869 367.689 137.965 366.794 138.705 cv
366.089 139.288 367.154 139.828 367.697 140.129 cv
368.938 140.815 370.156 141.558 371.374 142.265 cv
373.236 143.347 373.253 143.563 374.706 142.08 cv
375.109 141.669 375.63 142.031 376.016 141.68 cv
377.532 140.299 379.379 139.399 381.076 138.282 cv
382.086 137.616 383.25 137.244 384.444 137.055 cv
385.409 136.902 386.092 137.573 386.542 138.233 cv
387.571 139.743 386.65 142.704 385.131 143.803 cv
384.175 144.496 383.146 145.065 382.12 145.556 cv
381.2 145.996 380.022 145.615 378.964 145.905 cv
376.319 146.628 373.771 147.499 371.356 148.88 cv
370.07 149.615 368.683 150.241 367.346 150.934 cv
366.271 151.492 364.877 151.473 364.204 152.75 cv
364.146 152.859 363.848 152.858 363.657 152.878 cv
362.286 153.016 361.053 153.482 360.091 154.495 cv
359.556 155.059 358.757 154.927 358.17 155.066 cv
356.829 155.384 355.797 156.285 354.428 156.586 cv
353.073 156.883 351.536 157.106 350.44 158.469 cv
349.928 159.107 348.786 159.37 348.104 160.165 cv
347.895 160.41 346.778 160.898 346.487 159.699 cv
346.332 159.061 345.397 158.98 344.819 159.644 cv
344.485 160.028 344.227 160.31 343.711 160.435 cv
343.431 160.503 343.034 160.888 343.022 161.146 cv
342.928 163.171 340.953 163.628 339.928 164.853 cv
338.366 166.72 336.409 168.252 334.798 170.082 cv
334.161 170.806 333.556 171.58 332.905 172.309 cv
332.676 172.564 332.721 172.752 332.965 173.119 cv
333.953 174.604 335.437 174.904 336.994 174.94 cv
339.568 175.002 342.176 175.177 344.682 174.444 cv
345.639 174.164 346.718 174.147 347.543 173.401 cv
347.928 173.055 348.538 173.227 349.035 173.143 cv
350.659 172.868 352.098 171.97 353.644 171.678 cv
355.807 171.269 357.571 169.937 359.769 169.573 cv
361.251 169.327 362.889 168.896 364.202 167.852 cv
364.581 167.55 365.274 167.479 365.791 167.547 cv
367.653 167.79 369.328 166.955 371.102 166.705 cv
371.859 166.598 372.601 166.637 373.346 166.563 cv
373.698 166.529 373.931 166.678 374.104 167.007 cv
374.392 167.556 374.546 168.201 375.174 168.529 cv
375.362 168.627 375.379 168.916 375.247 169.061 cv
374.769 169.586 374.188 169.931 373.44 169.921 cv
372.806 169.913 372.315 169.581 372.239 169.007 cv
372.105 168 371.486 168.333 371.098 168.597 cv
370.249 169.172 369.435 169.741 368.362 169.795 cv
366.933 169.867 366.005 171.167 364.647 171.375 cv
363.229 171.593 362.111 172.413 360.868 172.998 cv
359.96 173.426 358.844 173.29 357.962 173.918 cv
356.419 175.014 354.355 175.009 352.884 176.188 cv
351.84 177.024 350.493 176.853 349.311 177.6 cv
349.997 177.911 350.205 178.647 350.969 178.831 cv
351.421 178.939 351.392 179.561 351.499 179.926 cv
351.614 180.313 351.053 180.396 350.737 180.461 cv
349.892 180.635 349.063 181.199 348.181 180.389 cv
347.762 180.003 347.488 179.768 347.939 179.291 cv
348.244 178.969 348.497 178.432 348.29 178.206 cv
347.922 177.802 347.6 178.387 347.239 178.517 cv
346.213 178.888 345.127 179.077 344.102 179.491 cv
342.786 180.021 341.433 180.456 340.089 180.913 cv
339.6 181.08 339.079 180.939 338.56 181.072 cv
336.926 181.487 335.278 181.86 333.617 182.142 cv
331.522 182.497 329.734 181.51 328.284 180.261 cv
326.832 179.009 325.431 178.912 324.017 179.793 cv
323.015 180.418 321.893 180.433 320.873 180.907 cv
319.771 181.42 318.627 181.872 317.561 182.456 cv
316.903 182.814 316.241 182.533 315.587 182.72 cv
313.989 183.178 312.363 183.392 310.675 183.406 cv
309.057 183.42 307.342 183.304 305.83 183.707 cv
304.571 184.042 303.308 184.266 302.039 184.475 cv
301.217 184.608 301.128 185.355 300.674 185.783 cv
300.078 186.344 299.111 186.528 298.895 187.489 cv
298.758 188.092 298.445 188.761 299.255 189.094 cv
300.067 189.428 299.765 189.795 299.294 190.043 cv
297.995 190.729 296.676 191.5 295.227 191.676 cv
293.813 191.847 292.567 192.365 291.375 193.001 cv
290.528 193.453 289.7 193.599 288.779 193.749 cv
287.678 193.928 286.553 194.02 285.448 194.548 cv
284.178 195.155 282.872 194.446 281.944 193.353 cv
281.637 192.992 281.354 192.819 280.938 193.123 cv
280.032 193.784 278.94 194.14 278.149 195.005 cv
276.717 196.57 275.08 197.967 273.786 199.633 cv
272.996 200.651 271.855 201.249 271.167 202.456 cv
270.599 203.454 269.271 204.122 268.251 204.887 cv
267.926 205.132 267.625 205.413 267.328 205.682 cv
265.454 207.372 263.231 207.833 260.798 207.598 cv
260.387 207.559 260.061 207.351 259.743 207.11 cv
259.359 206.819 258.95 206.584 258.441 206.641 cv
258.055 206.685 257.522 206.45 257.311 206.792 cv
257.049 207.216 257.754 207.451 257.797 207.675 cv
258.057 209.017 258.171 210.396 257.479 211.674 cv
256.772 212.979 256.411 214.404 255.945 215.797 cv
255.446 217.287 255.402 219.113 253.404 219.625 cv
253.319 219.646 253.201 219.775 253.202 219.854 cv
253.205 220.07 253.367 220.267 253.557 220.268 cv
254.36 220.272 254.987 220.706 255.691 220.991 cv
256.474 221.308 257.098 220.622 257.713 220.19 cv
257.807 220.126 257.849 219.992 257.937 219.915 cv
258.538 219.386 261.831 218.513 262.628 218.972 cv
262.813 219.079 262.859 219.403 263.16 219.352 cv
265.728 218.915 267.627 220.779 269.898 221.39 cv
270.879 221.654 272.123 222.632 272.551 223.51 cv
273.271 224.988 274.716 226.526 273.395 228.542 cv
272.958 229.208 273.11 230.275 272.783 231.144 cv
272.661 231.47 272.864 232.278 273.682 232.335 cv
274.262 232.374 274.933 232.328 275.264 232.005 cv
275.719 231.56 276.159 231.62 276.648 231.602 cv
277.614 231.565 278.515 231.773 279.241 230.631 cv
280.037 229.38 283.166 229.708 284.004 230.952 cv
284.236 231.296 284.171 231.743 284.059 232.113 cv
283.955 232.448 283.581 232.308 283.322 232.313 cv
282.603 232.331 281.882 232.33 281.162 232.317 cv
280.664 232.309 280.293 232.419 280.275 233.018 cv
280.259 233.541 280.303 234.02 280.993 233.993 cv
281.425 233.976 281.628 234.28 281.876 234.526 cv
282.985 235.628 284.396 236.021 285.88 236.146 cv
287.274 236.264 288.469 237.077 289.876 237.154 cv
291.012 237.215 292.01 238.022 293.214 237.851 cv
293.389 237.826 293.65 237.804 293.68 238.083 cv
293.707 238.341 293.729 238.556 293.484 238.819 cv
292.806 239.549 291.883 239.582 291.04 239.734 cv
289.354 240.04 287.764 240.596 286.297 241.438 cv
285.588 241.845 284.832 241.827 284.286 241.578 cv
282.743 240.876 281.272 239.998 279.826 239.102 cv
279.319 238.788 279.409 239.341 279.401 239.363 cv
278.731 241.133 278.678 241.189 276.766 241.192 cv
275.801 241.195 274.99 241.76 273.974 241.732 cv
272.506 241.692 271.284 241.415 270.273 240.281 cv
269.676 239.612 268.507 240.15 267.887 241.127 cv
267.109 242.352 267.354 243.67 267.315 244.971 cv
267.298 245.559 266.697 246.232 267.615 246.691 cv
267.864 246.815 268.07 246.994 268.367 246.96 cv
270.292 246.738 271.688 248.059 273.32 248.683 cv
274.221 249.026 275.166 248.979 276.064 249.059 cv
277.355 249.172 278.332 249.958 279.51 250.259 cv
279.614 250.285 279.721 250.549 279.945 250.557 cv
281.474 250.609 282.797 251.293 284.096 252.109 cv
278.214 250.981 272.428 249.413 266.598 248.05 cv
260.721 246.675 254.883 245.145 249.01 243.679 cv
249.271 243.144 249.728 243.406 250.085 243.368 cv
251.032 243.268 251.285 242.764 250.773 241.962 cv
250.669 241.799 250.523 241.597 250.542 241.43 cv
250.811 239.113 249.557 237.151 249.042 235.021 cv
248.491 232.737 247.684 230.526 246.759 228.354 cv
246.449 227.625 246.524 226.729 246.437 225.908 cv
246.296 224.59 245.781 224.154 244.458 224.317 cv
244.04 224.37 243.915 224.253 243.854 223.847 cv
243.643 222.448 243.371 221.058 243.153 219.661 cv
243.006 218.725 243.142 217.959 244.256 217.64 cv
245.078 217.403 245.851 216.99 246.808 216.588 cv
243.02 212.034 239.273 207.53 235.322 202.779 cv
236.835 202.934 238.019 202.495 239.154 203.067 cv
239.226 203.104 239.346 203.196 239.349 203.19 cv
240.1 202.19 240.809 203.043 241.45 203.306 cv
242.694 203.815 243.926 203.419 245.047 203.145 cv
245.713 202.981 246.42 202.938 247.076 202.723 cv
248.673 202.198 249.971 201.15 251.279 200.168 cv
251.898 199.704 252.451 199.13 253.074 198.638 cv
253.834 198.04 254.603 197.345 255.08 196.524 cv
255.656 195.537 256.751 195.225 257.394 194.3 cv
258.217 193.112 257.816 191.97 257.538 190.908 cv
257.4 190.378 256.978 189.772 257.035 189.222 cv
257.129 188.343 256.38 188.13 256.041 187.61 cv
255.816 187.264 255.499 187.533 255.393 187.774 cv
255.287 188.015 255.353 188.324 255.312 188.598 cv
255.214 189.242 255.658 190.105 255.073 190.497 cv
254.216 191.071 253.37 191.923 252.202 191.742 cv
251.023 191.56 250.104 192.256 249.176 192.661 cv
247.288 193.487 244.937 193.16 243.171 191.934 cv
242.364 191.374 242.019 190.981 242.103 190.067 cv
242.175 189.28 242.033 188.507 242.568 187.761 cv
243.065 187.067 243.119 186.119 243.95 185.558 cv
244.193 185.394 244.3 184.51 243.383 184.556 cv
242.865 184.582 242.343 184.58 241.824 184.556 cv
240.637 184.502 239.674 183.645 239.762 182.451 cv
239.829 181.548 240.542 180.858 241.387 180.496 cv
242.399 180.062 243.507 180.176 244.562 180.278 cv
245.231 180.342 245.721 180.89 245.699 181.635 cv
245.683 182.247 245.909 182.767 246.08 183.449 cv
246.736 182.718 247.473 182.363 248.281 182.046 cv
249.428 181.596 250.56 181.071 251.69 180.59 cv
252.301 180.331 253.262 180.11 254.008 180.846 cv
254.236 181.07 254.754 181.356 255.204 181.134 cv
255.712 180.883 255.536 180.374 255.55 179.954 cv
255.568 179.395 255.551 178.834 255.556 178.273 cv
255.571 175.899 256.045 173.573 256.293 171.223 cv
256.468 169.572 257.023 167.978 257.353 166.346 cv
257.608 165.074 257.548 163.667 258.041 162.561 cv
258.739 160.993 258.387 159.329 258.969 157.77 cv
259.204 157.141 258.91 156.176 259.005 155.333 cv
257.103 155.062 254.767 155.945 253.467 153.463 cv
253.024 154.35 253.158 155.448 252.435 156.228 cv
251.624 157.102 251.051 158.14 250.099 158.952 cv
249.142 159.767 248.408 160.978 248.364 162.367 cv
248.311 164.095 248.336 164.206 246.716 164.12 cv
245.729 164.066 245.833 164.95 245.331 165.267 cv
245.736 165.518 246.02 165.918 246.627 165.864 cv
247.619 165.775 248.625 165.82 249.624 165.853 cv
249.93 165.863 250.341 165.638 250.519 166.164 cv
250.686 166.661 250.913 167.2 250.461 167.578 cv
250.108 167.873 249.928 168.304 249.486 168.552 cv
249.186 168.721 249.009 169.257 248.941 169.657 cv
248.859 170.143 249.407 169.994 249.657 170.155 cv
250.07 170.421 250.432 170.65 250.539 171.229 cv
250.794 172.597 251.137 173.948 251.49 175.294 cv
251.602 175.717 251.75 176.117 252.063 176.509 cv
252.757 177.381 252.423 178.063 251.578 178.937 cv
251.08 179.451 250.474 179.774 249.928 180.091 cv
248.829 180.727 248.604 179.363 248.43 178.896 cv
247.99 177.729 247.42 176.608 247.055 175.41 cv
246.901 174.908 246.546 174.467 246.266 173.967 cv
245.409 175.405 244.141 175.9 242.548 175.55 cv
242.014 175.432 241.443 175.471 240.89 175.445 cv
240.617 175.432 240.423 175.521 240.439 175.844 cv
240.467 176.414 239.913 176.695 239.759 177.118 cv
239.167 178.745 238.102 180.063 237.065 181.377 cv
236.162 182.523 235.259 183.678 234.206 184.735 cv
233.158 185.788 231.942 186.367 230.835 187.2 cv
230.421 187.511 229.971 187.673 229.451 187.684 cv
229.041 187.694 228.574 187.539 228.309 188.062 cv
228.266 188.146 228 188.19 227.871 188.148 cv
226.179 187.596 224.388 187.296 222.971 186.057 cv
222.652 185.776 222.729 185.524 222.672 185.239 cv
222.555 184.65 222.628 184.017 222.096 183.541 cv
221.938 183.399 221.877 182.964 221.974 182.759 cv
222.587 181.455 222.725 180.021 223.567 178.731 cv
224.745 176.931 226.337 175.304 226.689 172.999 cv
226.846 171.972 226.37 171.057 226.455 170.066 cv
226.469 169.91 226.248 169.664 226.044 169.724 cv
225.676 169.834 225.181 169.924 225.109 170.354 cv
224.891 171.653 223.631 172.257 223.166 173.311 cv
222.382 175.088 220.593 176.437 220.956 178.741 cv
221.136 179.884 220.077 180.366 219.168 180.437 cv
217.498 180.567 215.796 180.61 214.137 180.428 cv
212.862 180.287 212.021 179.243 211.144 178.325 cv
210.03 177.161 209.769 175.666 209.244 174.264 cv
209.438 173.627 209.437 172.992 209.233 172.357 cv
208.86 172.205 208.858 171.731 208.869 171.548 cv
208.975 169.883 208.254 168.379 207.991 166.791 cv
207.813 165.718 207.313 164.666 206.793 163.691 cv
206.381 162.922 206.138 162.057 205.973 161.285 cv
205.823 160.577 205.355 160.04 205.062 159.663 cv
204.219 158.58 204.436 157.15 203.587 156.106 cv
203.324 155.783 203.495 155.104 203.476 154.588 cv
203.466 154.308 203.518 154.02 203.467 153.749 cv
203.021 151.378 204.142 149.491 205.33 147.621 cv
205.92 146.692 206.167 145.648 206.358 144.581 cv
206.576 143.36 206.859 142.158 207.192 140.958 cv
207.41 140.173 207.719 139.205 206.752 138.358 cv
206.053 137.746 206.132 136.556 205.68 135.658 cv
204.845 134.002 204.089 132.263 203.632 130.474 cv
203.311 129.214 202.689 128.014 202.581 126.746 cv
202.45 125.222 201.909 123.807 201.746 122.291 cv
201.487 119.889 201.126 117.473 200.711 115.113 cv
200.202 112.221 200.575 109.388 200.368 106.54 cv
200.298 105.569 201.222 104.599 202.237 104.405 cv
203.592 104.145 204.601 104.781 205.202 105.694 cv
205.967 106.857 205.559 107.703 204.934 108.641 cv
204.247 109.672 204.522 110.081 205.679 110.696 cv
206.776 111.279 208.011 111.462 209.079 112.172 cv
209.719 112.597 209.934 113.044 209.935 113.626 cv
209.938 116.131 210.36 118.723 209.613 121.105 cv
209.192 122.447 208.97 123.838 208.752 125.158 cv
208.553 126.357 208.294 127.999 209.692 129.004 cv
209.783 129.07 209.878 129.175 209.907 129.279 cv
210.463 131.32 211.869 132.939 212.685 134.811 cv
213.35 136.335 214.292 137.715 214.906 139.275 cv
215.171 139.948 215.763 140.748 216.286 141.439 cv
216.86 142.199 217.063 143.359 217.584 144.1 cv
218.389 145.245 219.053 146.492 219.768 147.666 cv
220.494 148.858 221.425 150.082 221.081 151.845 cv
220.805 153.259 219.749 153.356 218.936 153.804 cv
217.862 154.397 216.508 154.467 215.559 155.328 cv
214.822 155.997 214.377 156.838 214.497 157.926 cv
214.585 158.717 214.46 159.529 214.526 160.323 cv
214.667 162.04 215.459 163.369 216.858 164.433 cv
218.347 165.566 220.005 165.848 221.783 165.842 cv
223.343 165.836 224.904 165.804 226.462 165.857 cv
227.078 165.879 227.286 165.593 227.466 165.103 cv
228.165 163.199 228.733 161.259 229.165 159.278 cv
229.248 158.898 230.918 158.583 231.401 158.963 cv
232.062 159.481 232.907 159.61 233.54 160.123 cv
233.951 160.456 234.204 160.795 234.354 161.456 cv
234.516 162.168 234.714 163.124 235.322 163.807 cv
235.683 164.211 235.865 164.355 236.146 163.814 cv
236.416 163.296 236.904 163.495 237.318 163.449 cv
237.536 163.124 237.008 162.827 237.281 162.5 cv
f
157.645 165.831 mo
157.549 166.642 158.185 167.131 158.603 167.612 cv
160.266 169.529 161.656 171.659 163.338 173.566 cv
163.824 174.117 164.366 174.645 164.816 175.227 cv
165.988 176.745 166.992 178.4 168.224 179.865 cv
169.01 180.801 169.462 181.892 170.11 182.885 cv
170.521 183.515 170.318 185.817 170.021 186.493 cv
169.103 188.573 167.25 189.864 165.606 191.106 cv
163.93 192.374 162.272 193.802 160.265 194.692 cv
159.438 195.06 158.514 195.454 157.816 196.197 cv
157.266 196.781 156.38 196.667 155.655 196.508 cv
154.503 196.255 153.299 196.281 152.191 196.023 cv
149.605 195.423 146.912 195.941 144.416 195.278 cv
142.203 194.69 140.007 194.009 137.742 193.861 cv
135.458 193.715 133.512 192.5 131.296 192.186 cv
130.687 192.1 130.16 191.473 129.78 190.857 cv
128.699 189.107 128.323 187.063 127.391 185.25 cv
127.181 184.843 126.91 184.651 126.5 184.455 cv
124.361 183.43 122.098 183.156 119.792 183.388 cv
118.353 183.531 117.108 182.582 115.674 182.852 cv
115.384 182.905 115.176 182.613 115.167 182.299 cv
115.16 182.041 115.06 181.709 115.507 181.679 cv
115.994 181.645 115.999 181.118 116.295 180.871 cv
116.939 180.337 117.174 179.839 116.275 179.172 cv
115.899 178.893 115.277 178.532 115.263 177.843 cv
115.26 177.706 115.13 177.464 115.042 177.454 cv
113.561 177.308 112.49 176.362 111.344 175.571 cv
110.905 175.268 110.466 175.51 110.271 175.749 cv
109.966 176.125 109.6 176.34 109.302 176.063 cv
108.991 175.774 109.018 175.183 109.268 174.837 cv
109.777 174.133 109.949 173.751 109.005 173.137 cv
108.021 172.494 107.933 170.546 108.63 169.409 cv
109.768 167.558 111.45 167.189 113.334 167.318 cv
114.109 167.371 114.576 166.826 115.283 166.76 cv
116.604 166.636 117.727 167.382 119.036 167.379 cv
119.788 167.376 120.605 167.426 121.396 167.529 cv
121.372 166.992 121.077 166.93 120.617 166.755 cv
119.084 166.169 117.466 165.691 116.151 164.678 cv
115.346 164.056 114.271 164.307 113.521 163.605 cv
112.658 162.798 111.363 162.642 110.507 161.911 cv
108.814 160.469 106.769 159.481 105.475 157.479 cv
104.55 156.046 103.722 154.382 102.276 153.399 cv
100.527 152.21 99.1914 150.514 97.4575 149.423 cv
95.9224 148.458 94.5322 147.257 92.8901 146.433 cv
92.4321 146.203 92.4951 146.307 92.2725 146.555 cv
91.6362 147.261 91.0493 147.783 90.2305 146.609 cv
89.6025 145.708 88.3354 145.699 87.4214 145.152 cv
87.1914 145.015 86.8584 145.008 86.6802 144.833 cv
86.2935 144.449 85.4844 144.227 85.9404 143.419 cv
86.3311 142.729 86.8555 143.088 87.3564 143.294 cv
87.8984 143.518 88.4272 143.781 89.0415 143.765 cv
89.6245 143.749 90.3535 143.601 90.3271 143.042 cv
90.3081 142.622 89.8105 141.945 89.1973 141.863 cv
88.4346 141.762 87.6475 141.845 86.8701 141.838 cv
85.8794 141.83 85.5215 141.266 86.0186 140.442 cv
86.4863 139.667 86.6724 139.016 85.7534 138.385 cv
85.2622 138.048 84.9561 137.45 84.4844 137.075 cv
83.9814 136.675 84.1294 136.151 84.2744 135.795 cv
84.4365 135.397 85.0752 135.49 85.3555 135.645 cv
87.2783 136.7 89.1572 137.837 91.0596 138.933 cv
92.6025 139.82 93.9844 141.04 95.8125 141.35 cv
96.1362 141.404 96.1895 141.707 96.3691 141.821 cv
96.7744 141.694 96.7354 141.309 96.6455 141.223 cv
96.0693 140.667 96.1563 140.162 96.7715 139.792 cv
97.4375 139.39 98.4224 139.315 98.7651 139.911 cv
99.5381 141.25 100.946 141.719 102.005 142.639 cv
102.987 143.491 102.563 144.437 102.648 145.358 cv
102.688 145.79 102.253 145.606 102.023 145.694 cv
101.792 145.782 101.585 145.935 101.368 146.058 cv
101.552 146.247 101.702 146.502 101.924 146.611 cv
103.181 147.229 104.468 147.786 105.72 148.412 cv
107.201 149.151 108.584 150.193 110.144 150.645 cv
112.058 151.197 113.828 151.995 115.604 152.841 cv
116.394 153.218 117.288 152.712 117.558 151.822 cv
117.908 150.666 119.044 150.18 119.768 149.34 cv
120.126 148.924 120.699 149.663 120.944 149.986 cv
121.359 150.535 121.869 150.592 122.625 150.779 cv
121.979 149.688 121.167 148.967 120.518 148.14 cv
119.583 146.947 118.781 145.728 118.072 144.379 cv
117.661 143.599 117.209 142.699 116.599 142.033 cv
115.552 140.892 115.255 139.286 114.037 138.237 cv
113.731 137.975 113.696 136.954 114.371 136.536 cv
114.967 136.167 115.773 136.037 116.221 136.613 cv
117.342 138.056 119.116 138.61 120.357 139.831 cv
121.669 141.121 123.239 142.027 124.705 143.083 cv
126.231 144.18 127.959 144.898 129.833 145.195 cv
131.029 145.386 131.71 146.267 132.408 147.098 cv
133.052 147.863 133.213 149.06 134.423 149.311 cv
134.869 151.06 136.466 150.552 137.591 151.042 cv
138.507 151.441 139.3 152.22 140.313 152.542 cv
141.837 153.024 143.09 154.012 144.426 154.822 cv
145.534 155.494 146.47 156.446 147.481 157.277 cv
148.719 158.297 149.987 159.28 151.182 160.348 cv
152.177 161.236 153.075 162.231 154.033 163.161 cv
154.499 163.613 154.89 164.007 155.523 163.19 cv
156.124 162.416 157.089 162.805 158.03 163.019 cv
157.639 161.917 156.856 161.163 156.188 160.531 cv
154.242 158.695 152.705 156.504 150.798 154.627 cv
149.502 153.353 148.041 152.108 147.015 150.621 cv
145.582 148.54 143.732 146.877 142.13 144.979 cv
140.502 143.048 138.858 141.128 137.229 139.205 cv
136.357 138.176 135.612 136.956 134.382 136.186 cv
133.536 135.655 133.13 134.624 132.46 133.86 cv
131.348 132.595 130.238 131.293 129.299 129.863 cv
128.939 129.316 129.102 129.223 129.526 129.021 cv
130.511 128.551 131.533 128.936 132.211 129.817 cv
132.945 130.772 133.924 131.6 135.201 131.49 cv
137.262 131.315 139.114 131.862 140.734 133.001 cv
141.722 133.696 142.843 134.335 143.47 135.47 cv
143.564 135.641 143.635 135.877 143.784 135.958 cv
146.005 137.151 146.946 139.44 148.317 141.336 cv
149.497 142.967 150.596 144.681 151.739 146.333 cv
152.454 147.365 153.166 148.537 154.258 149.428 cv
154.841 149.903 155.315 150.955 155.929 151.713 cv
156.679 152.641 158.01 153.097 158.209 154.469 cv
159.796 154.485 160.214 156.566 161.901 156.521 cv
162.52 156.504 163.007 157.174 163.614 157.458 cv
164.68 157.958 165.566 157.542 165.544 156.338 cv
165.504 154.194 165.709 154.598 167.406 154.559 cv
169.136 154.519 170.886 154.402 171.954 156.194 cv
173.471 156.339 174.522 157.41 175.764 158.104 cv
177.075 158.839 177.485 160.011 176.712 161.204 cv
176.568 161.427 176.19 161.536 176.545 161.787 cv
176.836 161.992 177.229 162.103 177.59 162.148 cv
178.378 162.25 178.68 161.271 179.467 161.272 cv
181.041 161.275 182.313 161.964 183.43 162.978 cv
184.583 164.022 185.856 164.959 186.921 166.062 cv
187.667 166.831 188.595 167.489 189.144 168.435 cv
189.655 169.317 190.523 169.837 191.19 170.544 cv
192.118 171.527 193.02 172.528 193.883 173.565 cv
194.492 174.298 195.262 174.178 195.878 173.74 cv
197 172.943 197.756 173.006 198.93 173.448 cv
199.997 173.852 200.922 174.551 202.097 174.757 cv
203.606 175.021 204.845 176 206.197 176.643 cv
208.104 177.548 207.175 178.929 207.252 180.065 cv
207.323 181.133 206.638 182.146 205.75 182.799 cv
204.922 183.406 204.555 184.479 203.477 184.832 cv
202.592 185.122 201.773 185.608 200.906 185.96 cv
200.618 186.077 200.281 186.032 200 185.809 cv
199.298 185.249 198.407 185.028 197.69 184.458 cv
197.127 184.012 196.88 183.561 196.994 182.881 cv
196.826 182.714 196.742 182.509 196.715 182.276 cv
196.688 181.908 196.686 181.527 196.222 181.401 cv
195.928 181.273 195.58 181.183 195.428 180.89 cv
194.446 178.998 192.703 178.951 190.969 179.176 cv
189.938 179.309 188.905 179.635 187.9 180.019 cv
188.722 180.214 189.565 180.265 190.361 180.108 cv
191.862 179.814 193.103 180.096 194.164 181.253 cv
194.715 181.854 195.677 182.019 196.007 182.891 cv
196.012 183.118 196.019 183.346 196.023 183.573 cv
195.854 183.986 195.834 184.399 196.029 184.811 cv
195.442 186.562 193.876 187.035 192.398 187.698 cv
189.955 188.794 188.792 186.772 187.251 185.695 cv
185.834 184.704 185.625 182.996 185.029 181.542 cv
184.719 180.782 184.306 180.777 183.663 180.894 cv
183.227 180.973 182.729 181.16 182.344 180.706 cv
182.274 180.623 182.149 180.491 182.09 180.51 cv
180.521 181.003 179.402 179.723 178.021 179.447 cv
177.166 179.277 176.361 178.722 175.606 178.116 cv
172.887 175.941 170.295 173.61 167.595 171.414 cv
166.127 170.221 164.318 169.44 163.117 167.915 cv
161.421 168.033 160.472 166.482 159.009 166.078 cv
158.556 165.953 158.115 165.756 157.625 165.851 cv
157.557 165.763 li
157.645 165.831 li
cp
f
185.956 76.0264 mo
186.056 77.9292 185.692 79.9395 185.64 81.9663 cv
185.618 82.8184 184.769 83.623 184.006 84.2534 cv
182.317 85.6465 180.318 86.5801 178.628 87.9844 cv
177.168 89.1992 174.561 89.0513 173.001 87.8662 cv
172.129 87.2031 171.237 86.6221 170.119 86.3701 cv
169.253 86.1743 168.747 85.312 167.899 84.9082 cv
166.001 84.0024 164.248 82.7925 162.423 81.728 cv
162.127 81.5552 162.009 81.3691 161.91 81.0322 cv
161.375 79.2051 160.232 77.645 159.576 75.873 cv
159.42 75.4521 158.767 75.4712 158.894 75.0361 cv
159.037 74.5454 158.071 74.0322 158.756 73.7993 cv
159.48 73.5522 160.403 73.3853 161.137 73.9795 cv
161.392 74.1851 161.539 74.519 161.764 74.7681 cv
161.954 74.978 161.943 75.499 162.39 75.3232 cv
162.723 75.1924 163.046 74.9214 163.137 74.542 cv
163.387 73.4863 163.247 72.498 162.862 71.4521 cv
162.593 70.7212 162.16 70.0273 162.008 69.311 cv
161.779 68.2305 161.149 67.3413 160.569 66.5903 cv
159.71 65.478 159.09 64.1045 157.922 63.2852 cv
156.72 62.4414 156.073 61.1343 155.048 60.1362 cv
153.924 59.041 152.798 57.7031 152.176 56.1714 cv
151.961 55.6411 151.431 55.5571 151.287 55.1724 cv
150.482 53.0254 149.166 50.9805 149.945 48.4961 cv
150.519 46.6641 151.822 45.6284 153.757 45.6011 cv
154.357 45.5933 154.958 45.5752 155.556 45.6074 cv
156.214 45.6421 156.709 45.9014 156.948 46.603 cv
157.105 47.0645 157.457 47.3291 157.953 47.6055 cv
158.542 47.9321 158.95 48.7153 159.459 49.2881 cv
161.265 51.3242 162.93 53.4863 164.663 55.5811 cv
165.853 57.02 167.014 58.5254 168.245 59.9341 cv
169.4 61.2554 170.4 62.8872 171.71 63.8452 cv
173.639 65.2554 175.051 67.3872 177.446 68.1714 cv
178.013 68.3564 178.327 69.0063 178.969 69.103 cv
179.592 69.1963 180.269 69.4814 180.767 68.8804 cv
181.292 68.2451 180.382 67.958 180.312 67.4121 cv
180.233 66.7881 179.826 66.2681 180.145 65.5332 cv
180.435 64.8652 180.883 64.7402 181.431 64.8242 cv
181.876 64.8911 182.458 64.8872 182.316 65.7344 cv
182.243 66.1714 182.67 66.7441 182.951 67.0591 cv
184.059 68.3062 184.274 69.9604 185.072 71.2954 cv
185.971 72.7964 185.933 74.3164 185.956 76.0264 cv
.933333 .847059 .00392157 rgb
f
161.499 196.091 mo
162.032 195.286 162.892 195.44 163.495 195.71 cv
164.873 196.327 166.212 197.05 167.719 197.251 cv
168.272 197.326 168.28 197.824 168.678 198.021 cv
169.578 198.466 170.496 198.754 171.467 198.988 cv
172.399 199.215 173.058 200.021 173.946 200.432 cv
175.556 201.175 177.223 201.279 178.892 201.021 cv
180.851 200.718 182.79 200.314 184.47 199.055 cv
185.035 198.632 185.998 198.906 186.787 198.77 cv
188.925 198.4 191.081 198.648 193.219 198.963 cv
193.298 198.975 193.444 198.974 193.447 198.992 cv
193.595 200.244 195.099 200.521 195.378 201.765 cv
195.526 202.427 195.309 203.23 195.978 203.829 cv
196.188 204.018 196.256 204.814 195.86 205.146 cv
195.331 205.591 195.548 205.997 195.825 206.351 cv
195.897 206.443 196.421 206.257 196.684 206.105 cv
196.988 205.932 197.234 205.655 197.602 205.482 cv
196.665 206.874 195.75 208.281 194.78 209.65 cv
194.407 210.178 192.721 210.23 192.063 209.614 cv
191.603 209.183 191.256 209.307 190.822 209.362 cv
190.734 209.688 190.938 209.822 191.134 209.967 cv
191.818 210.472 191.479 210.933 191.007 211.279 cv
190.095 211.948 188.347 211.802 187.547 210.979 cv
186.818 210.23 185.793 210.345 184.925 210.06 cv
184.096 209.786 183.032 209.777 182.204 210.053 cv
180.935 210.474 179.58 210.428 178.344 210.948 cv
178 211.094 178.041 211.369 177.822 211.674 cv
178.767 211.422 179.358 212.239 180.224 212.235 cv
180.533 212.234 180.556 212.995 180.229 213.048 cv
179.351 213.188 178.789 213.955 177.9 214.047 cv
176.876 214.152 176.04 214.724 175.171 215.246 cv
174.265 215.79 173.151 215.86 172.201 216.376 cv
171.64 216.681 171.133 217.047 170.596 217.374 cv
169.701 217.923 168.628 217.928 167.626 218.091 cv
167.269 218.147 167.205 217.584 167.237 217.213 cv
167.285 216.65 167.229 216.032 167.9 215.756 cv
169.494 215.097 170.619 213.881 171.727 212.619 cv
172.02 212.285 171.96 211.868 172.206 211.558 cv
171.77 211.409 171.533 210.859 170.97 210.959 cv
169.776 211.172 169.515 210.537 169.625 209.51 cv
169.68 208.995 169.634 208.472 169.635 207.951 cv
169.636 206.774 170.096 206.23 171.254 206.173 cv
172.127 206.129 172.956 205.916 173.788 205.689 cv
174.531 205.486 174.693 204.93 174.171 204.356 cv
173.632 203.765 172.926 203.407 172.265 202.979 cv
171.101 202.227 170.15 201.083 168.674 200.914 cv
168.192 200.859 168.186 200.455 167.92 200.258 cv
167.013 199.585 165.946 199.292 164.899 198.952 cv
163.682 198.558 162.548 198 161.499 197.271 cv
161.28 196.876 161.28 196.483 161.499 196.091 cv
.933333 .847059 .0196078 rgb
f
95.272 239.52 mo
94.0371 239.496 92.5659 239.652 91.2383 238.844 cv
91.0283 238.716 90.6523 238.84 90.6851 238.398 cv
90.7139 238.021 91.0879 237.932 91.2749 237.921 cv
92.5972 237.84 93.7593 237.168 94.9692 236.786 cv
96.5171 236.296 98.1812 236.167 99.6133 235.556 cv
101.709 234.663 103.915 234.392 106.046 233.761 cv
107.016 233.474 107.976 233.138 108.862 232.604 cv
109.757 232.066 110.83 232.514 111.77 232.21 cv
113.046 231.798 114.331 231.427 115.584 230.919 cv
116.837 230.41 118.221 230.2 119.564 229.94 cv
120.871 229.688 122.133 229.382 123.222 228.557 cv
123.382 228.435 123.689 228.462 123.92 228.486 cv
125.559 228.665 126.962 227.759 128.496 227.45 cv
129.164 227.314 129.731 226.673 130.576 226.78 cv
131.167 226.855 131.829 226.711 132.12 227.395 cv
132.404 228.062 132.048 228.68 131.696 229.189 cv
130.952 230.266 129.671 230.447 128.547 230.591 cv
127.001 230.788 125.663 231.411 124.324 232.08 cv
123.79 232.346 123.247 232.278 122.711 232.371 cv
120.732 232.712 118.99 233.685 117.156 234.415 cv
116.61 234.632 116.006 234.479 115.412 234.664 cv
114.358 234.988 113.338 235.325 112.473 236.024 cv
112.259 236.196 112.028 236.149 111.798 236.158 cv
110.099 236.218 108.629 236.944 107.176 237.729 cv
106.766 237.95 106.317 237.811 105.886 237.839 cv
103.996 237.961 102.197 238.593 100.342 238.914 cv
98.7212 239.194 97.1313 239.519 95.272 239.52 cv
f
397.817 55.459 mo
397.268 55.4072 396.711 55.3301 396.495 54.9561 cv
396.262 54.5542 396.523 54.1792 396.936 53.791 cv
398.432 52.3862 399.722 50.751 401.275 49.4209 cv
403.291 47.6973 405.177 45.8413 407.154 44.082 cv
408.457 42.9233 409.606 41.5342 410.975 40.5532 cv
411.925 39.8711 412.752 38.9951 413.617 38.2793 cv
414.808 37.2939 416.073 36.3433 417.222 35.2783 cv
418.342 34.2393 419.587 33.333 420.786 32.3799 cv
421.912 31.4844 422.981 30.4951 424.198 29.7432 cv
425.623 28.8613 426.764 27.6069 428.246 26.8159 cv
428.748 26.5483 429.213 26.208 429.684 25.8843 cv
429.927 25.7163 430.216 25.5371 430.414 25.8091 cv
430.583 26.041 430.656 26.4189 430.29 26.624 cv
429.064 27.3091 428.611 28.709 427.422 29.54 cv
426.472 30.2051 425.486 31.2661 425.013 32.5039 cv
424.768 33.145 424.082 32.98 423.686 33.4741 cv
422.707 34.6953 421.354 35.623 420.418 36.8691 cv
419.595 37.9629 418.174 38.4912 417.711 39.917 cv
417.62 40.1953 416.853 40.2002 416.646 40.501 cv
415.511 42.1479 413.725 43.0942 412.42 44.5063 cv
411.442 45.564 410.391 46.5474 409.296 47.4102 cv
408.245 48.2393 407.264 49.2319 406.323 50.0991 cv
405.382 50.9653 404.174 51.5049 403.301 52.5332 cv
402.443 53.5391 401.016 54.0513 400.02 55.104 cv
399.613 55.5342 398.493 55.1201 397.817 55.459 cv
f
270.914 64.1797 mo
270.914 64.6597 270.943 65.1416 270.908 65.6187 cv
270.837 66.5786 270.868 67.5034 271.774 68.0986 cv
272.367 68.4873 272.244 69.1323 272.005 69.4473 cv
271.304 70.3672 271.179 71.5464 271.028 72.5054 cv
270.784 74.0654 269.847 75.3115 269.578 76.8516 cv
269.431 77.6943 269.064 78.5864 269.013 79.4854 cv
268.94 80.7207 268.942 81.9663 269.005 83.2026 cv
269.168 86.4307 268.473 89.5884 268.289 92.7866 cv
268.201 94.2905 268.476 95.8345 268.016 97.2915 cv
267.284 99.6123 267.785 102.24 266.188 104.362 cv
265.934 104.699 265.748 105.305 265.694 105.776 cv
265.548 107.102 264.603 106.756 263.833 106.782 cv
263.407 106.796 263.517 106.43 263.471 106.169 cv
263.138 104.253 263.118 102.405 263.774 100.493 cv
264.111 99.5073 264.679 98.5767 264.851 97.5952 cv
265.114 96.0854 266.011 94.7593 265.901 93.1377 cv
265.739 90.7305 265.896 88.2744 266.215 85.9233 cv
266.632 82.8403 266.57 79.7505 266.924 76.6973 cv
267.164 74.6235 267.17 72.4766 267.648 70.4873 cv
268.22 68.1172 267.892 65.8047 268.004 63.4736 cv
268.055 62.4224 268.875 62.0586 269.4 61.4492 cv
269.693 61.1113 269.848 60.2964 270.451 60.5483 cv
271.07 60.8066 270.91 61.5576 270.914 62.1396 cv
270.918 62.8193 270.914 63.4995 270.914 64.1797 cv
f
355.542 202.207 mo
355.053 201.643 354.294 201.814 353.671 201.434 cv
352.342 200.62 353.271 199.5 353.012 198.57 cv
352.765 197.676 353.81 197.79 354.173 197.339 cv
354.485 196.953 354.685 197.722 355.104 197.783 cv
357.506 198.138 359.81 199.172 362.291 198.928 cv
362.918 198.865 363.175 199.322 363.62 199.484 cv
364.86 199.936 365.657 198.887 366.727 198.765 cv
368.131 198.603 368.877 198.738 369.178 199.645 cv
369.569 200.823 368.631 201.594 368.181 202.433 cv
367.941 202.877 367.077 203.718 366.337 203.23 cv
365.289 202.54 364.205 202.995 363.169 202.784 cv
361.996 202.544 361.045 203.5 359.897 203.284 cv
359.463 203.203 359.074 203.261 358.614 202.946 cv
357.856 202.429 357.02 202.856 356.489 203.537 cv
354.69 205.845 352.228 206.346 349.524 206.125 cv
348.991 206.081 348.439 205.78 348.414 204.994 cv
348.391 204.256 348.605 203.905 349.292 203.504 cv
351.077 202.462 353.004 202.685 354.902 202.564 cv
355.152 202.548 355.381 202.528 355.542 202.207 cv
f
234.928 32.5903 mo
235.43 33.7256 234.56 34.8062 233.879 35.8672 cv
233.45 36.5352 232.506 36.4683 231.819 36.4404 cv
230.104 36.3735 229.023 35.1675 228.249 33.8242 cv
227.756 32.9702 227.312 32.0835 226.722 31.2905 cv
226.53 31.0322 226.542 30.7842 226.512 30.5132 cv
226.436 29.8481 226.691 29.1714 226.089 28.5405 cv
225.625 28.0532 226.423 27.6162 226.518 27.1084 cv
226.606 26.6372 226.212 26.0112 226.79 25.7104 cv
227.929 25.1162 228.818 23.8604 230.349 24.2476 cv
231.504 24.5405 232.344 25.2144 233.059 26.2134 cv
233.738 27.1665 233.896 28.3135 234.523 29.2705 cv
235.119 30.1782 234.888 31.2676 234.928 32.5903 cv
f
366.419 73.5869 mo
366.977 73.7759 367.433 73.46 367.596 73.9331 cv
367.723 74.3052 367.438 74.6133 367.202 74.854 cv
365.209 76.8862 363.513 79.1772 361.55 81.2461 cv
360.269 82.5952 358.865 83.834 357.661 85.229 cv
356.442 86.6401 354.97 87.604 353.463 88.5869 cv
352.41 89.2739 351.211 89.125 350.403 88.3589 cv
349.908 87.8882 349.978 87.1841 350.229 86.999 cv
351.814 85.8262 352.444 83.9189 353.794 82.5781 cv
355.245 81.1353 357.009 80.0239 358.4 78.5732 cv
359.625 77.2959 361.172 76.6133 362.546 75.6772 cv
363.762 74.8491 365.129 74.0029 366.419 73.5869 cv
f
181.875 191.075 mo
181.769 193.489 181.353 193.44 179.706 194.073 cv
177.695 194.844 175.625 194.932 173.582 194.581 cv
172.622 194.415 171.388 194.156 170.774 193.514 cv
170.127 192.837 169.597 191.758 169.628 190.613 cv
169.7 187.997 171.078 187.179 173.47 186.966 cv
173.906 186.927 174.349 186.979 174.787 186.957 cv
176.692 186.862 178.412 187.591 180.16 188.177 cv
180.571 188.315 181.177 188.424 180.777 189.127 cv
180.693 189.275 180.794 189.331 180.886 189.401 cv
181.875 190.155 181.875 190.156 181.875 191.075 cv
f
198.675 103.581 mo
198.436 105.034 196.734 107.782 195.111 108.544 cv
193.719 109.197 192.793 108.415 191.84 107.943 cv
191.288 107.669 190.914 106.685 190.793 105.965 cv
190.495 104.197 189.906 102.549 189.157 100.943 cv
188.835 100.251 189.586 98.313 190.313 98.0151 cv
190.533 97.9238 190.619 98.0801 190.784 98.167 cv
191.7 98.6489 192.812 98.605 193.626 98.2749 cv
194.238 98.0269 194.417 98.1099 194.907 98.3608 cv
195.906 98.873 196.918 99.2129 197.065 100.604 cv
197.121 101.134 197.939 101.339 198.198 101.972 cv
198.416 102.505 198.688 102.99 198.675 103.581 cv
f
419.499 123.417 mo
421.811 123.053 424.123 122.771 426.476 122.848 cv
427.472 122.88 427.945 123.302 428.099 124.158 cv
428.29 125.219 427.505 125.157 426.773 125.306 cv
424.857 125.692 422.969 126.217 421.061 126.648 cv
419.743 126.946 418.417 127.227 417.081 127.425 cv
416.235 127.551 415.502 127.991 414.766 128.302 cv
412.86 129.106 410.91 129.109 408.938 129.1 cv
408.457 129.098 407.698 129.472 407.516 128.744 cv
407.3 127.878 407.427 127.02 408.373 126.491 cv
409.718 125.741 410.984 125.019 412.645 124.896 cv
414.125 124.786 415.48 123.798 417.006 123.484 cv
417.849 123.312 418.67 123.464 419.499 123.417 cv
f
100.009 182.693 mo
99.1494 182.574 98.5557 182.853 98.1675 182.222 cv
98.0977 182.107 97.6548 182.085 97.4897 182.189 cv
95.9849 183.127 94.2524 182.825 92.7969 182.53 cv
91.1694 182.2 89.3867 182.199 87.8867 181.274 cv
87.7637 181.198 87.5796 181.203 87.4238 181.204 cv
85.8315 181.207 84.2656 180.758 82.7969 180.355 cv
81.3906 179.97 79.8657 179.655 78.5405 178.893 cv
78.2935 178.749 77.9116 178.769 77.6064 178.812 cv
76.7515 178.933 76.1729 178.343 75.4946 178.028 cv
75.1587 177.873 75.3135 177.455 75.3457 177.156 cv
75.3809 176.814 75.6914 176.869 75.9087 176.889 cv
77.6768 177.038 79.5317 176.929 81.1807 177.456 cv
82.4268 177.855 83.6694 177.788 84.8647 178.105 cv
87.3916 178.774 90.0146 178.427 92.5146 178.899 cv
93.8687 179.155 95.1855 179.547 96.5854 179.523 cv
97.2515 179.513 97.8398 179.434 98.4097 178.962 cv
99.0479 178.436 100.08 178.794 100.16 179.61 cv
100.229 180.324 101.063 180.413 101.029 181.178 cv
100.986 182.151 101.075 183.032 100.009 182.693 cv
f
426.188 108.492 mo
425.21 108.458 424.533 108.589 423.936 108.023 cv
423.469 107.583 423.162 107.165 423.45 106.554 cv
423.779 105.854 424.106 105.274 424.831 104.712 cv
426.454 103.453 428.193 102.867 430.135 102.432 cv
432.312 101.943 434.38 101.005 436.679 100.996 cv
437.188 100.994 437.675 100.481 438.208 100.339 cv
439.329 100.038 440.122 100.974 441.106 101.226 cv
441.341 101.286 441.413 101.75 441.253 101.832 cv
440.521 102.205 439.95 102.973 439.23 103.127 cv
438.339 103.32 437.495 103.454 436.895 104.165 cv
436.129 105.072 434.915 104.898 433.983 105.48 cv
432.183 106.605 430.039 107.051 428.208 108.173 cv
427.531 108.586 426.684 108.537 426.188 108.492 cv
f
139.611 87.8677 mo
139.458 86.4126 140.311 85.1538 141.603 84.3809 cv
143.33 83.3447 145.277 84.3076 145.588 86.3105 cv
145.799 87.6719 146.043 89.0234 146.264 90.3716 cv
146.478 91.6865 146.666 93.0698 146.644 94.4546 cv
146.63 95.2197 146.24 95.5654 145.781 95.8618 cv
145.305 96.1675 144.713 96.3516 144.148 96.4517 cv
143.116 96.6357 142.991 95.6436 142.786 95.0737 cv
142.141 93.2837 141.438 91.5396 140.104 90.1494 cv
139.499 89.5186 139.679 88.7998 139.611 87.8677 cv
f
323.49 58.9707 mo
323.456 58.2295 323.401 57.6548 323.973 57.2046 cv
324.507 56.7827 324.951 56.6865 325.376 57.2856 cv
325.779 57.856 326.393 58.2246 326.906 58.6396 cv
327.41 59.0488 328.237 58.9526 328.77 58.2686 cv
329.625 57.1689 330.571 56.1338 331.36 54.9888 cv
332.156 53.834 333.075 52.7188 333.985 51.7339 cv
335.054 50.5786 335.967 49.2769 337.111 48.1948 cv
337.497 47.8306 338.04 47.9058 338.452 48.1079 cv
338.754 48.2559 338.689 48.8599 338.546 48.9648 cv
337.797 49.5146 337.659 50.4907 337.5 51.1479 cv
337.15 52.5928 335.507 53.1045 335.359 54.5928 cv
335.349 54.7007 335.026 55.1719 334.615 55.2148 cv
334.442 55.2339 334.17 55.377 334.144 55.5039 cv
333.962 56.3926 333.05 56.7817 332.728 57.3525 cv
332.014 58.6187 330.765 59.2148 329.858 60.1719 cv
328.995 61.085 327.697 61.8169 326.466 62.3516 cv
325.283 62.8647 324.187 62.0928 323.758 60.6445 cv
323.586 60.0625 323.223 59.4839 323.49 58.9707 cv
f
270.595 205.682 mo
271.55 205.69 271.672 205.922 271.097 206.898 cv
270.688 207.595 270.977 208.734 271.635 209.152 cv
271.919 209.331 272.109 209.218 272.237 209.016 cv
272.992 207.819 274.168 208.383 275.157 208.379 cv
275.681 208.377 275.539 208.907 275.279 209.259 cv
274.719 210.012 273.808 210.27 273.098 210.812 cv
271.644 211.921 269.924 212.594 268.45 213.687 cv
267.844 214.136 266.978 214.178 266.243 214.5 cv
265.146 214.979 264.077 215.658 262.78 215.631 cv
261.916 215.611 261.162 215.476 260.861 214.558 cv
260.716 214.115 260.891 213.546 261.27 213.418 cv
262.604 212.969 263.724 212.099 265.063 211.64 cv
266.078 211.292 267.066 210.816 268.072 210.407 cv
268.332 210.302 269.015 209.909 268.467 209.256 cv
267.982 208.679 266.816 208.335 267.566 207.237 cv
268.249 206.24 269.185 205.629 270.595 205.682 cv
f
99.668 121.781 mo
101.159 121.36 101.802 122.527 102.783 122.867 cv
104.12 123.332 104.941 124.498 106.065 125.257 cv
106.92 125.836 107.424 126.907 108.136 127.723 cv
108.605 128.26 109.101 128.76 109.583 129.281 cv
110.509 130.284 110.611 131.875 111.953 132.631 cv
112.153 132.744 112.184 133.363 111.875 133.599 cv
111.669 133.757 111.363 133.595 111.054 133.462 cv
108.645 132.423 106.784 130.61 104.707 129.106 cv
103.264 128.062 101.821 127.048 100.703 125.583 cv
100.203 124.927 99.3975 124.505 98.9263 123.699 cv
98.5952 123.132 98.3491 122.713 98.583 122.063 cv
98.8652 121.279 99.4912 121.897 99.668 121.781 cv
f
180.427 59.4253 mo
180.601 60.8032 180.375 61.3325 178.69 61.8535 cv
177.502 62.2217 176.847 61.4072 176.414 60.6914 cv
175.503 59.1875 174.149 58.0273 173.337 56.4614 cv
172.961 55.7363 172.279 55.1704 172.059 54.3672 cv
171.857 53.6304 172.083 53.0996 173.012 53.2822 cv
173.516 53.3813 174.124 53.0034 174.52 53.6353 cv
174.632 53.8145 174.876 53.8076 175.039 53.6572 cv
175.207 53.5024 175.211 53.2354 175.042 53.1416 cv
174.419 52.7925 174.723 52.2236 174.693 51.7554 cv
174.674 51.4575 174.46 50.9404 175.029 50.9097 cv
175.411 50.8877 175.779 50.7744 176.192 51.2002 cv
176.975 52.0103 177.245 53.0977 177.968 53.9443 cv
178.795 54.9126 179.307 56.1313 180.038 57.1982 cv
180.451 57.8003 180.556 58.6763 180.427 59.4253 cv
f
145.875 23.8999 mo
145.871 25.2959 144.794 26.0801 143.422 25.9229 cv
141.497 25.7026 139.825 24.9019 138.084 24.1499 cv
137.33 23.8237 136.48 23.521 135.665 23.2437 cv
135.303 23.1211 134.828 22.8647 134.835 22.2827 cv
134.844 21.5869 135.477 22.0029 135.715 21.7578 cv
136.022 21.4419 136.466 21.6558 136.853 21.29 cv
137.465 20.709 137.799 20.498 136.835 19.9648 cv
136.616 19.8438 135.979 19.8657 136.043 19.2979 cv
136.09 18.877 135.808 18.2808 136.23 18.0801 cv
136.611 17.8979 137.304 17.8799 137.608 18.1147 cv
138.761 19.0059 139.976 19.5811 141.447 19.7437 cv
141.84 19.7881 142.469 20.0537 142.731 20.564 cv
143.093 21.271 143.757 21.5317 144.421 21.8369 cv
145.287 22.2339 145.97 22.8037 145.875 23.8999 cv
f
148.297 57.8286 mo
148.339 58.2534 148.203 58.4985 147.81 58.6826 cv
145.974 59.5464 145.843 59.5112 144.839 57.6714 cv
144.784 57.5674 144.745 57.3916 144.666 57.3706 cv
143.368 57.0283 143.391 55.5732 142.512 54.8296 cv
141.665 54.1113 141.119 53.0493 140.39 52.1807 cv
139.653 51.3047 139.294 50.2217 138.168 49.5083 cv
137.482 49.0742 136.782 47.8984 136.39 47.0273 cv
135.798 45.7114 134.631 44.8262 134.146 43.4795 cv
134.066 43.2612 133.765 43.0464 133.982 42.8384 cv
134.208 42.6245 134.516 42.6875 134.822 42.8994 cv
135.716 43.5156 136.343 44.3955 137.102 45.1416 cv
138.596 46.6094 140.014 48.1533 141.477 49.6533 cv
143.425 51.6504 145.415 53.6006 146.916 55.9966 cv
147.313 56.6284 148.128 56.9995 148.297 57.8286 cv
f
397.477 165.36 mo
398.436 165.36 399.414 165.481 400.349 165.331 cv
401.717 165.112 402.898 165.933 404.218 165.853 cv
404.448 165.839 404.599 165.955 404.585 166.207 cv
404.571 166.427 404.646 166.651 404.336 166.794 cv
403.405 167.223 402.485 167.58 401.465 167.841 cv
399.823 168.26 398.064 168.113 396.506 168.89 cv
396.309 168.988 396.039 168.957 395.803 168.957 cv
393.886 168.962 391.968 168.975 390.051 168.955 cv
388.906 168.943 388.041 168.067 388.303 167.077 cv
388.528 166.227 389.39 165.941 390.139 165.87 cv
392.579 165.637 394.996 165 397.477 165.36 cv
f
98.6523 33.5161 mo
99.7305 33.896 100.843 33.8701 101.861 34.4512 cv
102.636 34.894 103.627 34.5317 104.543 34.7217 cv
106.049 35.0342 107.407 35.7197 108.869 36.125 cv
109.523 36.3062 110.198 36.3198 110.838 36.4067 cv
112.641 36.6538 114.119 37.5908 115.711 38.2959 cv
115.85 38.3579 116.015 38.395 116.167 38.394 cv
116.991 38.3867 117.718 38.478 117.552 39.6001 cv
117.454 40.2559 116.292 41.23 115.693 41.0068 cv
113.898 40.3398 111.909 40.1909 110.3 39.0171 cv
110.152 38.9092 109.938 38.8599 109.75 38.8447 cv
107.964 38.7061 106.418 37.835 104.896 37.0537 cv
103.533 36.355 101.857 36.6577 100.674 35.5327 cv
100.08 34.9678 99.3604 34.7261 98.5103 34.7148 cv
98.2554 34.7119 97.5483 34.7378 97.6382 34.0229 cv
97.7363 33.2432 98.3613 33.8179 98.6523 33.5161 cv
f
241.629 90.3657 mo
241.476 91.0444 241.964 91.9414 241.193 92.6768 cv
240.928 92.9307 241.076 93.6157 240.471 93.5786 cv
239.901 93.5444 239.428 93.1074 239.29 92.6484 cv
239.085 91.9668 238.956 91.9629 238.382 92.3208 cv
237.882 92.6328 237.202 92.3208 236.887 91.9546 cv
236.271 91.2397 235.542 90.5596 235.622 89.3975 cv
235.65 88.9746 235.438 88.3828 235.138 87.9009 cv
234.59 87.0234 234.981 85.8418 235.851 85.3438 cv
236.118 85.1904 236.182 85.2769 236.387 85.4907 cv
237.013 86.1455 236.955 86.0488 237.366 85.2607 cv
237.682 84.6577 238.236 83.9326 239.026 84.0488 cv
239.653 84.1396 240.2 84.4116 240.52 85.3115 cv
241.096 86.9316 241.7 88.4937 241.629 90.3657 cv
f
379.634 121.776 mo
379.646 121.021 380.891 119.594 381.63 119.532 cv
382.253 119.479 382.861 119.455 383.3 118.924 cv
383.325 118.893 383.376 118.839 383.38 118.842 cv
384.454 119.661 384.632 118.2 385.332 118.077 cv
386.252 117.915 387.306 117.984 388.063 117.544 cv
389.142 116.916 390.441 117.131 391.436 116.394 cv
391.698 116.199 392.006 116.176 392.329 116.147 cv
392.747 116.109 393.29 116.432 393.564 115.738 cv
393.604 115.64 394.46 115.411 394.77 115.997 cv
395.015 116.461 395.18 116.727 394.535 117.209 cv
393.947 117.648 393.438 117.75 392.792 117.876 cv
392.076 118.016 391.585 118.691 390.946 119.072 cv
390.349 119.429 389.884 119.983 389.108 120.018 cv
388.887 120.028 388.657 120.146 388.455 120.259 cv
387.189 120.967 386.102 122.061 384.479 121.983 cv
384.144 121.967 384.226 122.478 383.91 122.67 cv
382.814 123.339 380.844 123.348 379.837 122.617 cv
379.5 122.372 379.703 122.037 379.634 121.776 cv
f
329.325 93.8403 mo
329.893 93.8403 330.291 93.8374 330.691 93.8413 cv
331.273 93.8452 331.932 93.7563 332.102 94.5332 cv
332.279 95.3423 331.773 95.9351 331.152 96.1963 cv
329.49 96.8984 328.091 97.9282 326.803 99.166 cv
325.725 100.201 323.687 100.373 322.347 99.6411 cv
322.144 99.5303 321.903 99.4834 321.678 99.4194 cv
321.303 99.312 320.747 99.478 320.825 98.748 cv
320.891 98.145 320.931 97.6904 321.463 97.1494 cv
322.981 95.6094 325.064 95.1904 326.808 94.123 cv
327.609 93.6323 328.588 93.8721 329.325 93.8403 cv
f
172.051 244.029 mo
172.051 242.274 li
173.025 243.082 173.933 243.966 174.506 245.036 cv
175.109 246.161 175.956 247.108 176.443 248.356 cv
177.005 249.797 176.565 250.561 175.788 251.654 cv
175.208 252.47 175.121 253.669 174.66 254.642 cv
174.067 255.891 173.457 257.131 172.85 258.387 cv
172.822 257.774 172.794 257.167 172.765 256.561 cv
172.329 255.88 172.04 255.184 172.525 254.4 cv
172.744 252.23 172.214 250.087 172.282 247.923 cv
171.939 246.642 172.365 245.313 172.051 244.029 cv
.933333 .847059 .0235294 rgb
f
449.564 222.96 mo
451.201 222.96 452.839 222.955 454.476 222.963 cv
455.002 222.965 455.496 222.901 455.966 223.378 cv
456.206 223.624 456.748 223.632 456.645 224.148 cv
456.559 224.569 456.351 224.873 455.781 224.913 cv
454.771 224.985 453.662 224.986 452.8 225.422 cv
451.805 225.926 450.743 226.065 449.897 225.763 cv
448.926 225.414 447.98 226.075 447.007 225.463 cv
446.636 225.23 445.706 225.864 444.932 225.878 cv
443.993 225.895 443.303 225.286 442.439 225.169 cv
441.936 225.102 441.894 224.569 442.103 224.353 cv
442.709 223.727 443.134 222.863 444.296 222.934 cv
446.047 223.038 447.808 222.96 449.564 222.96 cv
.933333 .847059 .0196078 rgb
f
291.861 222.96 mo
292.938 222.96 294.025 222.871 295.089 222.986 cv
296.05 223.092 296.992 223.401 297.931 223.659 cv
298.368 223.779 298.772 224.063 298.726 224.566 cv
298.678 225.082 298.053 225.048 297.792 225.065 cv
296.049 225.179 294.511 225.869 292.942 226.532 cv
291.008 227.349 288.365 226.725 287.127 225.483 cv
286.557 224.911 286.629 224.202 286.854 223.922 cv
287.167 223.528 287.447 222.859 288.273 222.934 cv
289.46 223.039 290.664 222.96 291.861 222.96 cv
f
293.104 29.7534 mo
292.73 31.3677 292.124 32.9727 292.059 34.5996 cv
292.01 35.8467 291.3 36.8237 291.244 38.0586 cv
291.188 39.2837 290.701 40.5469 289.847 41.5498 cv
289.435 42.0337 288.112 41.7285 287.811 41.2417 cv
286.743 39.5137 287.853 38.0498 288.531 36.7158 cv
289.178 35.4404 289.382 33.9927 290.198 32.8267 cv
291.044 31.6177 290.958 29.9766 292.074 28.9106 cv
292.281 28.7139 292.252 28.2314 292.71 28.3408 cv
293.182 28.4526 292.938 28.8564 292.988 29.1338 cv
293.021 29.3276 292.994 29.5317 292.994 29.7314 cv
293.031 29.7388 293.068 29.7466 293.104 29.7534 cv
f
316.996 62.9766 mo
316.977 62.3198 317.321 61.8877 317.881 61.7188 cv
318.927 61.4048 318.783 60.7578 318.345 60.1089 cv
317.521 58.8906 317.513 56.7959 318.348 55.5825 cv
318.63 55.1719 318.975 54.6616 318.95 54.2158 cv
318.92 53.6548 319.455 53.4038 319.562 53.375 cv
320.496 53.1128 320.977 52.3467 321.581 51.7246 cv
321.817 51.4819 321.968 51.2905 322.37 51.5176 cv
322.794 51.7578 322.6 52.022 322.648 52.3486 cv
322.903 54.0498 321.85 55.2275 321.08 56.4858 cv
320.544 57.3638 320.587 58.502 320.802 59.0898 cv
321.343 60.5708 320.556 61.2075 319.729 62.0195 cv
319.229 62.5127 318.765 63.0586 318.369 63.6387 cv
318.101 64.0356 317.762 64.2285 317.406 64.0098 cv
317.088 63.8125 316.939 63.3857 316.996 62.9766 cv
f
112.658 182.774 mo
111.099 182.128 109.393 182.188 107.884 181.353 cv
107.007 180.866 105.926 180.763 104.947 180.546 cv
103.96 180.326 103.213 179.815 102.373 179.387 cv
101.945 179.168 101.962 178.886 101.953 178.525 cv
101.941 178.021 102.377 177.928 102.666 177.881 cv
103.368 177.765 104.135 177.71 104.752 178.107 cv
105.643 178.684 106.627 178.725 107.612 178.791 cv
108.398 178.843 109.228 178.995 109.214 177.68 cv
109.208 177.112 109.957 177.085 110.467 177.132 cv
110.826 177.165 111.366 176.867 111.503 177.392 cv
111.624 177.855 111.74 178.435 111.158 178.782 cv
110.707 179.053 110.485 179.482 110.632 179.97 cv
110.76 180.396 111.326 180.466 111.609 180.432 cv
112.467 180.329 112.815 181.217 113.578 181.307 cv
113.824 181.335 114.091 181.941 113.925 182.343 cv
113.669 182.958 113.062 182.417 112.658 182.774 cv
f
133.939 104.847 mo
133.352 104.959 133.059 104.744 132.68 104.358 cv
131.857 103.516 131.33 102.513 130.795 101.506 cv
130.69 101.307 130.802 101.051 130.981 100.781 cv
131.969 99.2817 133.705 99.1367 135.119 98.4468 cv
135.637 98.1938 136.529 98.1948 136.952 98.8638 cv
137.486 99.71 138.243 100.508 137.234 101.66 cv
136.474 102.528 135.926 103.592 135.076 104.414 cv
134.727 104.751 134.398 105.065 133.939 104.847 cv
f
440.451 187.681 mo
441.076 187.681 441.557 187.664 442.034 187.687 cv
442.318 187.699 442.724 187.545 442.748 188.066 cv
442.766 188.467 442.814 188.86 442.275 189.005 cv
440.765 189.408 439.221 189.759 437.743 190.187 cv
435.879 190.727 433.93 190.481 432.102 191.198 cv
431.409 191.471 430.317 191.675 429.593 190.816 cv
429.053 190.178 429.209 189.486 430.003 189.269 cv
430.642 189.093 431.306 188.902 431.958 188.901 cv
433.983 188.901 435.861 188.011 437.931 188.047 cv
438.717 188.06 439.688 187.728 440.451 187.681 cv
f
452.807 63.7061 mo
452.999 63.8091 453.76 63.1982 453.99 63.9209 cv
454.285 64.8472 453.535 65.4561 452.919 65.9438 cv
451.401 67.146 449.807 68.248 448.26 69.4131 cv
447.646 69.874 445.396 70.02 444.747 69.6279 cv
444.299 69.356 444.311 69.186 444.718 68.8569 cv
446.617 67.3213 448.21 65.4292 450.375 64.1899 cv
451.085 63.7842 451.714 63.4722 452.807 63.7061 cv
f
355.056 237.828 mo
353.729 237.938 352.496 237.76 351.249 237.176 cv
350.358 236.759 350.519 236.288 350.902 235.839 cv
351.647 234.968 352.65 234.489 353.828 234.482 cv
355.143 234.474 356.48 234.334 357.758 234.547 cv
358.333 234.642 358.396 233.736 359.014 234.241 cv
359.969 235.02 359.676 236.31 358.562 237.142 cv
357.438 237.98 356.255 237.796 355.056 237.828 cv
f
367.702 84.481 mo
367.083 84.4746 366.418 84.5688 366.232 83.9146 cv
366.033 83.2119 366.638 82.9517 367.088 82.4858 cv
368.046 81.4946 369.262 80.7759 370.073 79.6357 cv
370.216 79.4346 370.529 79.3579 370.754 79.2109 cv
371.303 78.8506 372.105 78.7676 372.297 78.0068 cv
372.505 77.1748 373.137 77.106 373.793 77.0459 cv
374.21 77.0078 374.693 77.1558 374.781 77.5186 cv
374.945 78.1987 374.869 78.9097 374.3 79.4517 cv
372.991 80.6978 372.009 82.3076 370.138 82.9307 cv
369.729 83.0669 369.386 83.6489 369.055 84.0767 cv
368.747 84.4746 368.169 84.5649 367.702 84.481 cv
f
353.488 113.044 mo
354.208 112.643 354.943 112.899 355.636 113.074 cv
356.781 113.359 356.619 114.341 356.586 115.195 cv
356.554 116.001 356.064 116.391 355.285 116.396 cv
353.374 116.408 351.463 116.375 349.553 116.411 cv
348.619 116.428 348.318 115.83 348.222 115.11 cv
348.123 114.376 348.471 114.051 349.297 113.954 cv
350.369 113.827 351.321 113.023 352.496 113.289 cv
352.93 113.626 353.247 113.493 353.488 113.044 cv
f
278.113 32.8384 mo
278.114 33.6782 278.079 34.5195 278.123 35.3564 cv
278.193 36.6807 277.799 37.8516 277.25 39.0435 cv
276.93 39.7363 277.055 40.5625 276.507 41.2915 cv
276.06 41.8877 275.687 42.0625 275.121 41.7886 cv
274.374 41.4272 274.965 41.0952 275.123 40.6343 cv
275.408 39.7983 275.271 38.8252 275.496 37.9585 cv
276.044 35.8384 276.146 33.6572 276.527 31.5254 cv
276.687 30.6323 277.15 29.7466 277.154 28.7783 cv
277.156 28.3975 277.354 28.3174 277.687 28.3213 cv
278.096 28.3267 278.113 28.5854 278.112 28.8804 cv
278.112 30.2002 278.112 31.5195 278.113 32.8384 cv
f
383.708 197.04 mo
384.747 197.04 385.787 197.049 386.826 197.036 cv
387.268 197.03 387.673 197.153 388.096 197.25 cv
388.666 197.379 388.484 197.759 388.505 198.08 cv
388.53 198.507 388.203 198.448 387.928 198.482 cv
385.903 198.734 383.904 199.111 381.938 199.666 cv
381.297 199.848 380.758 200.3 379.994 200.188 cv
379.306 200.086 378.479 200.257 378.242 199.415 cv
377.989 198.528 378.675 197.916 379.245 197.37 cv
379.547 197.081 380.009 197.016 380.471 197.029 cv
381.549 197.063 382.629 197.04 383.708 197.04 cv
f
315.826 239.76 mo
314.264 240.141 312.635 239.282 310.945 238.769 cv
310.389 238.6 310.528 238.07 310.517 237.643 cv
310.503 237.16 310.718 236.901 311.22 236.879 cv
312.282 236.832 313.347 237.034 314.381 236.439 cv
314.948 236.112 315.384 236.95 315.946 237.081 cv
316.998 237.325 317.743 238.109 318.667 238.572 cv
319.081 238.78 318.886 239.124 318.896 239.404 cv
318.91 239.838 318.542 239.751 318.283 239.755 cv
317.564 239.768 316.846 239.76 315.826 239.76 cv
f
340.812 208.32 mo
341.13 208.32 341.449 208.318 341.767 208.32 cv
342.348 208.325 343.049 208.186 343.347 208.811 cv
343.678 209.504 343.067 210.23 342.688 210.483 cv
341.452 211.309 340.332 212.44 338.557 212.208 cv
337.615 212.085 337.31 211.563 337.182 210.897 cv
336.922 209.544 337.985 208.362 339.379 208.322 cv
339.855 208.31 340.334 208.32 340.812 208.32 cv
f
281.953 73.1514 mo
281.823 74.0894 282.151 75.2383 281.74 76.3701 cv
281.427 77.2363 280.837 77.9014 280.264 78.5532 cv
279.82 79.0562 278.944 78.5684 278.827 77.874 cv
278.596 76.5029 279.267 75.2852 279.685 74.1152 cv
280.067 73.0439 280.075 71.915 280.495 70.8652 cv
280.64 70.5054 280.864 70.2031 280.998 69.8521 cv
281.142 69.478 281.453 69.5972 281.703 69.6362 cv
282.04 69.689 281.946 69.9951 281.948 70.21 cv
281.96 71.126 281.953 72.041 281.953 73.1514 cv
f
129.55 225.179 mo
129.778 225.875 129.031 226.124 128.72 226.399 cv
128.197 226.864 127.398 227.198 126.695 227.238 cv
125.347 227.314 123.985 227.549 122.628 227.281 cv
122.35 227.226 121.894 227.424 121.905 226.929 cv
121.913 226.561 121.628 226.126 122.219 225.813 cv
122.86 225.476 123.483 225.183 124.199 225.029 cv
125.565 224.732 126.804 223.806 128.299 224.171 cv
128.839 224.303 129.668 224.141 129.55 225.179 cv
f
215.475 131.448 mo
215.475 129.957 216.5 128.957 218.242 128.901 cv
219.047 128.876 220.005 128.511 220.552 129.597 cv
220.828 130.146 220.932 130.693 220.529 131.1 cv
219.55 132.088 218.541 133.058 217.022 133.206 cv
215.819 133.323 215.475 132.971 215.475 131.448 cv
f
301.126 189.844 mo
300.837 189.739 300.334 190.073 300.234 189.561 cv
300.131 189.024 300.346 188.551 300.778 188.153 cv
301.88 187.144 303.161 186.729 304.612 186.359 cv
305.659 186.092 306.658 186.161 307.664 185.989 cv
308.213 185.896 308.402 186.341 308.712 186.58 cv
308.931 186.749 308.88 187.31 308.729 187.306 cv
307.888 187.284 307.466 188.225 306.649 188.156 cv
305.021 188.021 303.771 189.165 302.265 189.484 cv
301.951 189.55 301.558 189.817 301.126 189.844 cv
f
116.844 115.439 mo
116.483 115.438 116.245 115.407 115.999 115.202 cv
114.026 113.564 112.569 111.445 110.78 109.635 cv
110.418 109.269 110.435 108.557 110.742 108.364 cv
111.168 108.097 111.82 108.371 112.233 108.669 cv
113.203 109.369 114.139 110.136 115.035 110.912 cv
115.827 111.597 116.257 112.703 116.833 113.631 cv
116.995 113.891 117.039 114.3 117.261 114.43 cv
117.658 114.663 117.59 114.973 117.501 115.242 cv
117.384 115.594 117.005 115.344 116.844 115.439 cv
f
354.593 161.76 mo
354.019 161.674 353.256 162.033 352.75 161.283 cv
352.49 160.898 352.246 160.499 352.905 160.329 cv
354.208 159.99 355.09 158.936 356.308 158.416 cv
357.294 157.995 358.22 158.251 359.165 158.207 cv
359.546 158.189 359.626 159.735 359.263 160.059 cv
358.333 160.882 355.969 161.76 354.593 161.76 cv
f
197.016 182.161 mo
197.009 182.4 197.002 182.641 196.994 182.881 cv
196.665 182.884 196.336 182.887 196.007 182.891 cv
195.156 182.299 194.231 181.788 193.475 181.092 cv
192.687 180.368 191.931 180.225 190.878 180.371 cv
189.581 180.551 188.19 180.79 186.611 179.945 cv
189.003 179.329 191.034 178.455 193.216 178.851 cv
193.978 178.988 195.036 179.2 195.319 180.142 cv
195.527 180.833 196.068 180.914 196.513 181.21 cv
196.729 181.502 196.684 181.931 197.016 182.161 cv
.996078 .996078 .996078 rgb
f
79.3872 135.907 mo
79.6572 134.951 79.9395 133.976 80.0156 132.952 cv
80.0332 132.708 80.2363 132.541 80.5732 132.461 cv
81.7144 132.194 81.7954 133.353 82.3906 133.792 cv
82.6646 133.996 82.6636 134.587 82.1626 134.999 cv
81.8643 135.242 81.2705 135.903 82.3682 136.157 cv
82.6924 136.231 82.9785 136.649 83.1934 136.97 cv
83.4824 137.401 83.6953 137.968 83.3442 138.399 cv
82.9414 138.895 82.1992 138.799 81.8662 138.436 cv
81.3262 137.845 80.4243 138.101 79.9395 137.329 cv
79.6465 136.861 79.2373 136.542 79.3872 135.907 cv
.933333 .847059 .0196078 rgb
f
310.038 241.92 mo
308.635 241.958 307.285 241.798 306 241.136 cv
305.438 240.847 304.869 240.611 305.024 239.913 cv
305.174 239.239 306.016 239.256 306.364 239.345 cv
307.677 239.68 308.98 239.451 310.282 239.507 cv
311.029 239.539 311.575 239.903 312.129 240.319 cv
312.572 240.652 312.487 241.12 312.381 241.523 cv
312.272 241.94 311.85 241.93 311.479 241.923 cv
310.998 241.913 310.519 241.92 310.038 241.92 cv
f
376.711 77.0767 mo
376.173 76.8613 375.556 76.8643 375.382 76.2153 cv
375.226 75.6387 375.453 75.2803 375.922 74.8486 cv
377.223 73.6504 378.737 72.7637 380.138 71.7134 cv
380.608 71.3594 381.221 71.1016 381.685 71.6255 cv
382.174 72.1772 381.498 72.5313 381.227 72.8765 cv
380.132 74.2705 378.863 75.4985 377.463 76.5854 cv
377.224 76.7715 376.956 76.9185 376.711 77.0767 cv
f
349.139 81.5986 mo
348.659 81.7437 348.368 81.4395 348.243 80.9785 cv
348.079 80.3687 348.281 79.7612 348.768 79.4453 cv
350.106 78.5723 351.565 77.9082 353.048 77.3115 cv
353.2 77.2495 353.506 77.2866 353.594 77.3965 cv
353.833 77.6943 353.77 78.1035 353.683 78.4282 cv
353.44 79.3394 350.162 81.6226 349.139 81.5986 cv
f
79.7949 105.15 mo
79.7593 105.14 79.9561 105.135 80.0522 105.231 cv
81.5254 106.708 83.0181 108.168 84.4292 109.703 cv
84.959 110.28 84.2251 110.462 83.8779 110.612 cv
83.4502 110.796 82.8423 110.532 82.6792 110.31 cv
81.6489 108.906 80.0103 108.186 78.9302 106.839 cv
78.6094 106.438 78.5859 106.019 78.7529 105.803 cv
78.9492 105.55 79.1152 105.082 79.7949 105.15 cv
f
402.583 224.4 mo
402.299 224.4 402.18 224.404 402.061 224.399 cv
401.304 224.367 400.352 224.751 400.485 223.286 cv
400.612 221.899 401.016 221.294 402.232 221.28 cv
403.35 221.268 404.819 222.277 405.05 223.282 cv
405.141 223.681 405.158 224.026 404.521 224.234 cv
403.797 224.472 403.106 224.259 402.583 224.4 cv
f
323.976 69.1274 mo
324.447 67.4404 325.583 66.1353 326.504 64.7056 cv
326.816 64.2192 327.229 64.0273 327.786 64.0981 cv
327.551 64.5586 328.101 64.8262 327.946 65.4814 cv
327.489 67.4214 326.056 68.4941 324.887 69.8042 cv
324.662 70.0571 324.546 70.6636 323.967 70.5562 cv
323.768 70.0791 323.754 69.6025 323.976 69.1274 cv
f
389.883 52.064 mo
390.095 52.1777 390.469 52.2568 390.615 52.4839 cv
390.844 52.8379 390.309 52.96 390.232 53.1738 cv
389.671 54.7246 388.055 55.2656 387.165 56.4858 cv
387.058 56.6328 387.031 56.8428 386.775 56.8779 cv
386.255 56.9487 385.613 57.4697 385.253 56.939 cv
384.893 56.4067 385.174 55.8369 385.778 55.377 cv
386.975 54.4668 388.051 53.4038 389.024 52.25 cv
389.249 51.9829 389.537 52.126 389.883 52.064 cv
f
396.123 41.043 mo
396.358 41.1299 396.792 40.8389 396.883 41.312 cv
396.983 41.8301 396.469 42.1289 396.222 42.4199 cv
395.334 43.46 394.223 44.3086 393.348 45.3579 cv
392.76 46.062 392.108 46.0317 391.62 45.6196 cv
391.075 45.1587 391.634 44.751 392.008 44.313 cv
392.833 43.3496 393.607 42.3809 394.662 41.6177 cv
395.139 41.2729 395.526 41.0278 396.123 41.043 cv
f
294.952 215.17 mo
294.905 215.521 294.905 215.886 294.802 216.219 cv
294.62 216.801 294.435 217.438 293.674 216.643 cv
293.379 216.333 292.824 216.336 292.588 216.617 cv
292.085 217.215 291.815 217.024 291.413 216.536 cv
291.159 216.229 290.396 216.338 290.666 215.603 cv
290.92 214.913 291.286 214.293 292.045 214.096 cv
292.508 213.976 293.022 214.052 293.483 213.927 cv
294.62 213.616 295.076 214.013 294.952 215.17 cv
f
285.883 205.206 mo
285.172 205.522 284.881 204.773 284.467 204.377 cv
284.145 204.067 284.836 203.013 285.437 202.807 cv
286.724 202.365 288.012 202.797 289.291 202.854 cv
289.849 202.88 289.698 203.397 289.361 203.775 cv
288.458 204.789 287.316 205.2 285.883 205.206 cv
f
349.377 61.3315 mo
349.482 62.1284 349.383 62.7188 348.375 62.6826 cv
348.095 62.6729 347.729 62.8345 347.534 63.0415 cv
347.064 63.5415 346.496 63.5156 346.094 63.1777 cv
345.549 62.7217 345.003 62.1128 345.341 61.2817 cv
345.571 60.7104 346.02 60.4106 346.698 60.4658 cv
347.161 60.5034 347.62 60.4707 348.102 60.3145 cv
348.94 60.0435 349.641 60.1768 349.377 61.3315 cv
f
304.274 220.374 mo
304.261 221.692 303.752 221.923 302.49 221.402 cv
301.942 221.175 301.245 221.296 300.615 221.284 cv
300.169 221.276 299.679 221.224 299.522 220.795 cv
299.316 220.229 300.015 220.33 300.229 220.064 cv
301.017 219.086 302.288 219.438 303.287 218.97 cv
303.948 218.659 304.34 219.596 304.274 220.374 cv
f
229.573 156.35 mo
229.708 155.504 229.729 154.904 229.912 154.36 cv
230.086 153.842 230.628 153.784 231.098 153.854 cv
231.77 153.955 232.137 154.466 232.258 155.073 cv
232.463 156.097 231.8 156.834 231.241 157.566 cv
231.081 157.775 230.625 157.789 230.483 157.582 cv
230.16 157.113 229.214 156.967 229.573 156.35 cv
f
132.425 194.627 mo
132.568 195.308 132.08 195.596 131.626 195.319 cv
130.556 194.669 129.189 194.757 128.241 193.873 cv
128 193.647 127.478 193.447 127.739 193.073 cv
128.028 192.661 128.632 192.115 129.089 192.539 cv
129.917 193.305 131.11 193.109 131.945 193.854 cv
132.224 194.104 132.472 194.21 132.425 194.627 cv
f
273.788 202.802 mo
274.454 202.797 275.241 202.655 275.423 203.55 cv
275.569 204.279 274.353 205.256 273.404 205.186 cv
272.632 205.13 271.847 204.898 271.663 204.019 cv
271.527 203.368 272.587 202.799 273.788 202.802 cv
f
348.295 215.234 mo
348.298 216.078 347.311 217.098 346.42 216.884 cv
345.958 216.772 345.15 216.486 345.091 215.721 cv
345.041 215.064 346.415 214.126 347.316 214.071 cv
348.212 214.017 348.499 214.399 348.295 215.234 cv
f
83.0483 145.668 mo
81.5024 145.679 80.6758 144.945 80.8213 143.775 cv
80.8774 143.334 81.0693 143.255 81.4336 143.286 cv
82.6445 143.39 83.5845 144.217 84.7246 144.513 cv
84.8906 144.556 84.9624 144.76 84.8867 144.903 cv
84.7124 145.231 84.4805 145.564 84.1147 145.651 cv
83.7764 145.731 83.4053 145.668 83.0483 145.668 cv
f
201.794 192.939 mo
201.813 193.926 201.342 194.358 200.451 194.086 cv
200.186 194.005 199.935 193.904 199.662 193.924 cv
199.054 193.968 198.582 193.953 198.655 193.091 cv
198.719 192.347 198.899 191.836 199.74 191.757 cv
201.135 191.626 201.776 191.981 201.794 192.939 cv
f
75.9429 182.64 mo
75.2329 182.722 74.5752 182.387 74.3931 181.648 cv
74.2119 180.911 75.147 180.133 76.063 180.302 cv
76.7412 180.427 77.6758 180.467 77.7109 181.543 cv
77.731 182.188 77.0278 182.642 75.9429 182.64 cv
f
132.053 232.426 mo
131.401 232.207 130.78 232.624 130.743 231.765 cv
130.705 230.872 131.263 230.402 131.938 230.2 cv
132.521 230.023 133.2 230.16 133.836 230.165 cv
134.073 230.166 134.347 230.162 134.34 230.503 cv
134.335 230.771 134.369 231.194 134.224 231.283 cv
133.472 231.739 132.667 232.111 132.053 232.426 cv
f
322.241 239.551 mo
321.657 239.381 320.737 239.955 320.816 238.691 cv
320.866 237.903 321.025 237.266 321.897 237.142 cv
322.467 237.061 323.689 238.202 323.716 238.736 cv
323.786 240.13 322.695 239.248 322.241 239.551 cv
f
386.64 132.962 mo
386.905 132.958 387.376 132.856 387.321 133.572 cv
387.273 134.202 385.878 135.333 385.126 135.371 cv
384.424 135.407 384.241 134.984 384.207 134.443 cv
384.157 133.681 385.302 132.951 386.64 132.962 cv
f
69.2402 177.082 mo
68.8975 177.02 67.9663 177.291 67.8945 176.222 cv
67.8184 175.097 68.9863 175.276 69.5557 175.051 cv
70.0103 174.87 70.7095 175.469 70.7563 176.258 cv
70.8105 177.182 70.1943 177.152 69.2402 177.082 cv
f
348.73 238.083 mo
349.443 238.084 350.158 238.08 350.871 238.087 cv
351.065 238.088 351.283 238.102 351.289 238.373 cv
351.292 238.48 351.219 238.686 351.207 238.684 cv
350.399 238.548 349.914 239.465 348.902 239.19 cv
348.223 239.005 347.433 238.52 346.596 238.785 cv
346.343 238.865 346.011 238.813 346.057 238.384 cv
346.092 238.043 346.368 238.087 346.591 238.085 cv
347.304 238.077 348.018 238.082 348.73 238.083 cv
f
376.996 63.6543 mo
376.988 62.9243 378.47 61.731 379.092 61.9443 cv
379.501 62.084 379.67 62.4189 379.526 62.8511 cv
379.238 63.7192 378.554 64.126 377.723 64.3101 cv
377.174 64.4321 376.892 64.1899 376.996 63.6543 cv
f
123.315 124.103 mo
122.638 124.057 122.11 123.655 121.706 123.202 cv
121.579 123.059 120.847 122.885 121.327 122.461 cv
121.667 122.161 121.818 121.475 122.493 121.692 cv
122.842 121.803 123.266 121.823 123.323 122.355 cv
123.36 122.696 123.501 123.025 123.595 123.36 cv
123.752 123.702 123.823 124.011 123.315 124.103 cv
f
240.43 52.9331 mo
240.391 53.2578 240.618 53.7578 239.872 53.7759 cv
239.187 53.791 239.218 53.3999 239.233 52.9458 cv
239.254 52.4131 239.167 51.6689 239.856 51.665 cv
240.416 51.6611 240.446 52.3579 240.43 52.9331 cv
f
172.525 254.4 mo
172.536 255.128 173.004 255.806 172.766 256.561 cv
171.933 256.647 171.521 256.356 171.534 255.436 cv
171.542 254.696 171.707 254.28 172.525 254.4 cv
.996078 .996078 .996078 rgb
f
123.315 124.103 mo
123.639 123.942 123.509 123.61 123.595 123.36 cv
124.113 123.31 124.576 123.401 124.668 124.004 cv
124.717 124.325 124.564 124.657 124.215 124.747 cv
123.698 124.879 123.377 124.651 123.315 124.103 cv
f
172.051 244.029 mo
172.507 245.305 172.105 246.631 172.282 247.923 cv
171.753 246.652 172.155 245.325 172.051 244.029 cv
f
280.029 81.3438 mo
280.031 81.5845 280.024 81.8174 279.69 81.8276 cv
279.368 81.8384 279.317 81.6313 279.32 81.3774 cv
279.32 81.1377 279.327 80.9058 279.657 80.8926 cv
279.982 80.8794 280.035 81.0864 280.029 81.3438 cv
.933333 .847059 .0196078 rgb
f
209.233 172.357 mo
209.486 172.991 209.735 173.625 209.245 174.264 cv
209.241 173.628 209.237 172.992 209.233 172.357 cv
.988235 .988235 .988235 rgb
f
353.488 113.044 mo
353.332 113.252 353.612 113.648 353.238 113.735 cv
352.891 113.815 352.671 113.56 352.496 113.289 cv
352.827 113.207 353.157 113.125 353.488 113.044 cv
f
323.976 69.1274 mo
323.973 69.6035 323.97 70.0806 323.967 70.5562 cv
323.586 70.0771 323.573 69.6016 323.976 69.1274 cv
f
312.469 141.137 mo
311.947 141.837 311.888 141.265 311.759 140.881 cv
311.995 140.966 312.231 141.052 312.469 141.137 cv
.996078 .996078 .996078 rgb
f
237.281 162.5 mo
236.999 162.828 237.938 163.107 237.318 163.449 cv
237.203 163.136 236.883 162.832 237.281 162.5 cv
.8 .886275 .941176 rgb
f
196.03 184.811 mo
195.708 184.399 195.716 183.988 196.023 183.574 cv
196.025 183.985 196.028 184.398 196.03 184.811 cv
.996078 .996078 .996078 rgb
f
161.499 196.091 mo
161.499 196.483 161.499 196.876 161.499 197.271 cv
161.11 196.876 161.111 196.483 161.499 196.091 cv
f
122.676 167.727 mo
123.233 167.955 123.891 168.213 124.538 168.495 cv
124.823 168.618 124.819 169.021 124.671 169.062 cv
124.426 169.129 124.469 169.547 123.982 169.392 cv
123.279 169.169 122.868 168.438 122.078 168.438 cv
121.902 168.438 121.869 168.225 121.893 168.062 cv
121.956 167.629 122.31 167.813 122.676 167.727 cv
f
197.016 182.161 mo
196.421 182.069 196.296 181.73 196.513 181.21 cv
197.417 181.138 196.982 181.772 197.016 182.161 cv
f
157.645 165.831 mo
157.108 165.901 157.132 165.508 157.015 165.144 cv
157.523 165.196 157.651 165.464 157.625 165.851 cv
157.645 165.831 li
cp
f
81.0532 285.048 mo
80.3091 285.677 80.3091 285.677 80.0933 288.393 cv
80.9512 287.551 80.7959 286.357 81.0532 285.048 cv
290.821 155.014 mo
289.962 155.097 288.977 154.948 288.278 155.328 cv
287.585 155.705 286.903 156.548 286.725 157.307 cv
286.513 158.195 289.11 160.605 289.899 160.53 cv
291.396 160.388 292.921 159.153 292.856 158.137 cv
292.717 155.952 292.041 154.914 290.821 155.014 cv
96.0552 190.263 mo
96.0381 187.502 93.7441 185.239 90.9819 185.26 cv
88.2212 185.28 85.9653 187.571 85.9829 190.336 cv
86 193.097 88.29 195.355 91.0552 195.338 cv
93.8149 195.32 96.0723 193.029 96.0552 190.263 cv
103.029 271.305 mo
99.686 272.685 96.5781 273.948 93.4863 275.251 cv
91.793 275.965 90.1792 276.899 88.4409 277.461 cv
84.9971 278.575 83.6279 281.515 81.7563 284.477 cv
83.6392 283.912 84.4409 284.882 85.1201 286.104 cv
85.3311 286.483 85.5913 286.861 85.9121 287.146 cv
86.2051 287.405 86.604 287.682 86.9692 287.702 cv
89.0361 287.813 91.1079 287.833 93.1782 287.913 cv
95.4443 288 97.709 288.155 99.9761 288.212 cv
102.02 288.263 104.067 288.223 106.231 288.223 cv
103.76 284.66 101.309 281.126 98.6392 277.276 cv
103.979 277.276 li
103.648 275.196 103.353 273.345 103.029 271.305 cv
54.4712 288.125 mo
55.2764 285.9 55.7212 283.727 56.7852 281.918 cv
59.1411 277.914 61.2412 273.894 62.1792 269.26 cv
62.667 266.851 63.918 264.592 64.8701 262.285 cv
65.5542 260.626 66.1514 258.9 67.0732 257.378 cv
69.1113 254.015 72.2622 251.676 75.1489 249.109 cv
76.7603 247.677 78.5381 246.411 79.396 244.303 cv
79.5674 243.885 79.8911 243.401 80.2729 243.223 cv
81.3232 242.732 82.1743 242.194 82.2031 240.868 cv
82.208 240.648 82.6001 240.41 82.8472 240.225 cv
85.2021 238.463 87.5449 236.683 89.9302 234.961 cv
92.501 233.106 94.8833 230.973 97.8452 229.692 cv
99.813 228.84 101.735 227.879 103.472 227.063 cv
101.822 225.415 100.168 223.762 98.5142 222.11 cv
96.6641 223.447 94.7529 224.966 92.7041 226.267 cv
90.624 227.587 88.4092 228.696 86.248 229.887 cv
85.9072 230.075 85.5522 230.275 85.1792 230.359 cv
82.3979 230.986 79.6191 231.623 76.8252 232.183 cv
74.0254 232.745 71.2183 233.294 68.395 233.719 cv
64.7061 234.274 60.9951 234.683 57.3003 235.202 cv
56.5171 235.313 55.7622 235.626 54.9941 235.846 cv
54.9331 235.996 54.8711 236.146 54.8091 236.296 cv
55.5103 236.961 56.1621 237.693 56.9292 238.271 cv
57.5112 238.71 57.6909 239.042 57.5313 239.829 cv
57.1421 241.732 56.1802 242.989 54.313 243.593 cv
53.6479 243.808 52.9912 244.142 52.4292 244.555 cv
52.0103 244.863 51.5542 245.343 51.4482 245.82 cv
50.7661 248.907 49.9043 251.867 47.4902 254.143 cv
46.5703 255.011 46.2642 256.156 46.3413 257.482 cv
46.4131 258.729 46.3833 260.056 46.0264 261.234 cv
45.2344 263.845 44.1953 266.379 43.2822 268.954 cv
42.0503 272.427 40.1533 275.518 37.8452 278.361 cv
37.208 279.146 37.5483 279.514 38.249 279.765 cv
39.5161 280.217 40.814 280.581 42.0879 281.013 cv
42.71 281.224 43.3081 281.506 43.917 281.756 cv
43.9263 281.896 43.9341 282.037 43.9434 282.177 cv
42.9653 282.859 41.9873 283.542 40.9863 284.24 cv
41.3452 284.818 41.7109 285.261 41.915 285.768 cv
42.3799 286.922 43.2681 287.365 44.4219 287.434 cv
45.1782 287.479 45.937 287.485 46.6924 287.54 cv
49.3311 287.731 51.9692 287.937 54.4712 288.125 cv
174.38 239.752 mo
168.282 231.577 162.244 223.483 156.098 215.242 cv
153.99 218.829 152.01 222.203 150.026 225.574 cv
147.213 230.354 144.407 235.137 141.552 239.89 cv
141.398 240.147 140.738 240.34 140.44 240.229 cv
139.122 239.731 137.96 239.037 137.817 237.39 cv
137.783 236.988 137.602 236.418 137.305 236.25 cv
135.285 235.105 133.223 234.032 131.159 232.967 cv
130.129 232.435 129.348 232.968 128.622 233.66 cv
127.307 234.915 125.982 236.16 124.578 237.487 cv
123.275 236.024 122.255 237.078 121.161 237.986 cv
119.633 239.253 118.063 240.47 116.498 241.692 cv
116.23 241.902 115.897 242.029 115.438 242.28 cv
115.09 240.924 114.777 239.699 114.578 238.922 cv
113.242 240.053 111.788 241.282 110.34 242.519 cv
110.19 242.647 110.108 242.863 109.948 242.967 cv
108.698 243.788 108.652 244.799 109.447 245.955 cv
109.858 246.554 109.484 246.888 109.041 247.216 cv
107.352 248.466 105.642 249.69 104 250.999 cv
103.649 251.279 103.371 251.875 103.371 252.325 cv
103.371 253.226 103.496 254.152 103.734 255.023 cv
104.122 256.438 103.537 257.567 102.904 258.727 cv
101.404 261.477 99.9521 264.253 98.4233 266.986 cv
97.8701 267.975 97.7632 268.905 98.2969 269.964 cv
100.022 269.099 101.75 268.24 103.471 267.366 cv
104.22 266.986 104.606 267.04 104.697 268.029 cv
104.944 270.696 105.321 273.351 105.558 276.018 cv
105.631 276.837 106.491 277.946 105.332 278.454 cv
104.575 278.785 103.556 278.516 102.477 278.516 cv
103.365 279.816 104.24 281.135 105.154 282.425 cv
106.615 284.487 108.113 286.522 109.564 288.591 cv
109.741 288.844 109.836 289.268 109.752 289.547 cv
109.703 289.707 109.22 289.793 108.927 289.813 cv
104.89 290.066 100.852 290.3 96.8149 290.546 cv
94.3232 290.698 91.7642 290.563 89.3579 291.102 cv
86.688 291.702 85.499 290.662 84.687 288.385 cv
84.373 287.505 83.7344 286.74 83.2422 285.922 cv
82.897 286.025 li
82.7793 287.334 82.5801 288.643 82.5684 289.954 cv
82.5591 290.908 82.3403 291.359 81.292 291.272 cv
77.394 290.947 73.4922 290.664 69.5903 290.372 cv
68.3262 290.277 67.061 290.192 65.7959 290.119 cv
62.9063 289.952 60.0142 289.828 57.126 289.628 cv
52.623 289.317 48.127 288.796 43.6201 288.674 cv
40.6514 288.594 39.6743 286.36 38.229 284.55 cv
38.1162 284.408 38.3369 283.797 38.5684 283.618 cv
39.2729 283.072 40.0581 282.63 41.0039 282.025 cv
38.9033 281.734 37.0181 281.466 35.1299 281.224 cv
34.9609 281.202 34.7354 281.304 34.5962 281.42 cv
32.7031 282.989 30.6392 282.617 28.564 281.945 cv
27.252 281.521 26.708 280.285 26.3159 279.201 cv
25.0752 275.757 25.1201 272.19 25.8223 268.63 cv
26.0254 267.604 26.3691 266.605 26.6152 265.586 cv
26.665 265.38 26.6191 265.114 26.5283 264.917 cv
25.8652 263.488 25.1792 262.07 24.4243 260.488 cv
23.1079 262.856 21.8511 265.109 20.6021 267.367 cv
18.042 271.996 15.4893 276.631 12.918 281.254 cv
12.748 281.56 12.4702 281.816 12.208 282.058 cv
10.167 283.952 8.13916 285.86 6.06201 287.713 cv
5.271 288.418 4.90234 289.245 4.77393 290.267 cv
4.41113 293.158 3.99219 296.042 3.62109 298.932 cv
3.27002 301.669 2.9751 304.415 2.61426 307.151 cv
2.25928 309.843 1.8501 312.528 1.47021 315.217 cv
1.36523 315.959 1.31299 316.71 1.16309 317.442 cv
1.1123 317.692 .835938 317.896 .663086 318.121 cv
.488281 317.86 .150391 317.588 .166992 317.34 cv
.235352 316.324 .412109 315.315 .550293 314.304 cv
.444336 314.315 .337891 314.327 .23291 314.338 cv
.150391 313.847 -.019043 313.354 .00195313 312.867 cv
.0439453 311.883 .208984 310.906 .288086 309.924 cv
.540039 306.772 .76709 303.618 1.021 300.467 cv
1.33203 296.609 1.70215 292.756 1.96289 288.896 cv
2.07227 287.266 3.12695 286.243 4.09814 285.203 cv
9.62891 279.281 13.9033 272.487 17.9541 265.526 cv
19.5371 262.806 21.2144 260.141 22.853 257.454 cv
23.457 256.462 23.9282 256.479 24.5391 257.503 cv
25.6201 259.315 26.7002 261.126 27.647 262.714 cv
29.0513 260.342 30.3872 257.836 31.9683 255.495 cv
33.0869 253.838 34.5532 252.417 35.8252 250.86 cv
36.0742 250.556 36.2642 250.111 36.2783 249.724 cv
36.3291 248.205 36.3013 246.684 36.2969 245.164 cv
36.2959 244.926 36.3652 244.594 36.2393 244.464 cv
35.0151 243.205 35.5254 241.619 35.6772 240.264 cv
35.7832 239.309 36.7754 238.443 37.4033 237.559 cv
38.8569 235.515 40.27 233.439 41.8232 231.473 cv
42.4263 230.709 43.3511 230.194 44.146 229.589 cv
45.1772 228.805 46.291 228.116 47.2539 227.258 cv
49.1792 225.541 51.7383 225.563 53.9619 224.679 cv
56.5703 223.644 59.2354 222.756 61.8604 221.763 cv
64.3442 220.823 66.8091 219.832 69.2793 218.856 cv
69.603 218.729 69.9521 218.609 70.2173 218.396 cv
72.7959 216.327 75.373 214.254 77.9141 212.138 cv
78.3662 211.762 78.6699 211.195 78.9971 210.688 cv
79.1621 210.43 79.145 210.029 79.3462 209.828 cv
80.9609 208.214 80.311 206.479 79.647 204.753 cv
79.229 203.663 78.2612 202.528 78.4014 201.535 cv
78.6909 199.487 77.8433 198.095 76.6831 196.694 cv
74.4761 194.028 73.2754 190.81 71.7603 187.763 cv
71.1841 186.604 70.3911 185.536 69.936 184.336 cv
68.8862 181.569 68.0151 178.735 67.0112 175.949 cv
65.9521 173.012 65.085 169.958 63.6113 167.237 cv
62.8882 165.902 63.1743 164.623 62.73 163.377 cv
62.4072 162.471 62.5151 161.407 62.167 160.516 cv
61.6152 159.101 61.6182 157.785 62.2041 156.408 cv
62.8862 154.807 63.2539 153.002 64.2241 151.61 cv
65.8423 149.289 67.7822 147.182 69.6821 145.072 cv
70.6841 143.959 71.4629 142.886 70.8481 141.332 cv
70.7603 141.111 70.5801 140.901 70.3911 140.752 cv
67.939 138.808 65.7891 136.588 64.082 133.954 cv
63.9771 133.791 63.835 133.623 63.8052 133.442 cv
63.3872 130.866 61.3101 130.253 59.2739 129.582 cv
58.5332 129.338 57.792 129.087 57.0674 128.8 cv
56.7842 128.687 56.4102 128.522 56.3071 128.283 cv
55.5723 126.576 54.3311 125.09 54.4941 123.005 cv
54.6313 121.237 54.5171 119.418 54.25 117.662 cv
54.061 116.413 53.5039 115.2 52.9893 114.023 cv
51.7021 111.078 50.9282 108.076 50.8569 104.807 cv
50.8159 102.905 50.6191 101.006 51.2251 99.2158 cv
51.6382 97.9941 52.5142 96.9282 53.1841 95.7939 cv
54.5942 93.4063 56.8452 91.8369 59.127 90.5562 cv
60.9351 89.54 63.1821 89.2471 65.272 88.8169 cv
66.3472 88.5962 67.5103 88.854 68.623 88.7651 cv
73.4951 88.374 77.457 90.519 81.1743 93.2749 cv
81.7261 93.6841 82.0571 94.481 82.3311 95.1621 cv
84.1621 99.729 86.0933 104.265 87.7041 108.91 cv
88.8491 112.209 89.4731 115.637 89.4312 119.221 cv
89.4082 121.18 90.1772 123.209 90.9121 125.08 cv
91.144 125.671 92.418 126.157 93.2231 126.169 cv
99.3423 126.258 105.463 126.258 111.582 126.175 cv
112.503 126.162 113.399 125.507 114.336 125.265 cv
116.069 124.818 117.808 124.36 119.573 124.087 cv
121.094 123.852 122.653 123.869 124.257 123.771 cv
124.499 123.149 124.833 122.522 124.988 121.854 cv
125.421 119.986 127.148 119.264 128.382 118.197 cv
128.943 117.712 130.292 118.127 131.283 118.153 cv
136.305 118.286 140.646 120.817 145.305 122.218 cv
146.567 122.598 147.754 122.516 148.861 122.285 cv
150.101 122.026 150.99 122.318 151.942 122.945 cv
152.354 123.217 152.847 123.556 153.298 123.548 cv
157.442 123.481 161.392 124.507 165.34 125.569 cv
165.905 125.721 166.495 125.978 167.051 125.928 cv
169.133 125.74 170.572 126.953 172.145 127.998 cv
174.033 129.253 175.928 130.576 177.995 131.458 cv
180.555 132.55 183.102 133.729 186.066 133.723 cv
188.706 133.717 191.254 134.406 193.805 135.394 cv
198.044 137.036 201.587 139.93 205.781 141.564 cv
209.119 142.865 212.518 144.015 215.914 145.158 cv
217.39 145.655 218.908 146.134 220.442 146.316 cv
221.798 146.477 223.205 146.227 224.588 146.135 cv
226.323 146.02 228.056 145.8 229.792 145.77 cv
232.935 145.716 236.095 144.969 239.213 145.924 cv
239.541 146.024 239.854 146.354 240.054 146.656 cv
241.635 149.038 243.261 151.396 244.702 153.862 cv
245.119 154.575 245.038 155.611 245.075 156.504 cv
245.102 157.123 244.953 157.753 244.848 158.373 cv
244.812 158.589 244.713 158.824 244.571 158.99 cv
243.552 160.182 242.498 161.345 241.487 162.545 cv
240.798 163.362 240.093 163.996 238.888 163.926 cv
237.912 163.869 236.92 164.042 235.939 164.143 cv
235.203 164.219 234.712 163.949 234.461 163.248 cv
234.436 163.176 234.38 163.109 234.324 163.053 cv
233.514 162.222 233.635 160.444 231.917 160.555 cv
230.674 160.636 229.444 160.944 228.201 161.022 cv
226.962 161.099 225.714 161.034 224.471 160.992 cv
223.965 160.975 223.464 160.844 222.959 160.779 cv
221.778 160.627 220.633 160.39 219.834 159.391 cv
218.782 158.076 217.236 157.917 215.788 157.94 cv
212.825 157.988 210.09 157.411 207.578 155.815 cv
206.833 155.343 206.061 155.325 205.134 155.408 cv
203.988 155.51 202.781 155.031 201.612 154.753 cv
200.442 154.475 199.274 153.83 198.128 153.88 cv
194.492 154.038 191.28 152.689 188.04 151.402 cv
184.372 149.945 180.635 148.61 177.127 146.83 cv
175.3 145.904 173.686 145.447 171.632 145.593 cv
168.161 145.838 164.73 146.255 161.471 147.404 cv
159.853 147.974 158.488 149.238 156.975 150.132 cv
155.765 150.846 154.535 151.542 153.257 152.12 cv
152.261 152.57 151.443 152.853 151.929 154.298 cv
152.283 155.353 152.296 156.283 153.75 156.616 cv
154.413 156.768 154.879 158.027 155.324 158.845 cv
158.578 164.831 161.922 170.774 164.997 176.851 cv
166.88 180.574 168.309 184.525 170.017 188.34 cv
170.301 188.973 170.873 189.6 171.475 189.947 cv
173.621 191.187 174.55 193.098 175.104 195.416 cv
175.381 196.578 176.247 197.596 176.815 198.695 cv
177.596 200.206 178.32 201.747 179.129 203.243 cv
179.34 203.632 179.783 203.892 180.101 204.229 cv
180.871 205.045 181.618 205.882 182.396 206.69 cv
182.85 207.161 183.278 207.713 183.833 208.021 cv
185.912 209.17 188.038 210.235 190.232 211.376 cv
192.486 207.786 194.996 204.001 197.266 200.076 cv
198.238 198.396 199.828 197.725 201.28 196.836 cv
209.06 192.071 216.888 187.387 224.865 182.576 cv
230.973 190.158 237.097 197.759 243.498 205.704 cv
243.843 204.516 244.064 203.576 244.395 202.675 cv
244.641 202.001 244.908 201.273 245.37 200.751 cv
246.846 199.082 248.417 197.498 249.952 195.882 cv
250.063 195.766 250.269 195.658 250.273 195.539 cv
250.354 193.825 251.829 193.069 252.69 191.884 cv
253.316 191.023 253.733 189.955 254.029 188.918 cv
254.688 186.607 255.848 184.73 258.156 183.681 cv
258.1 183.539 258.043 183.397 257.987 183.255 cv
257.518 183.336 256.966 183.286 256.594 183.521 cv
255.436 184.25 254.369 185.126 253.21 185.856 cv
252.891 186.057 252.377 185.947 251.952 185.98 cv
252.074 185.613 252.105 185.171 252.335 184.894 cv
253.12 183.95 253.975 183.064 254.803 182.155 cv
254.91 182.038 255.075 181.938 255.115 181.801 cv
255.384 180.886 255.627 179.963 255.864 179.095 cv
255.486 179.012 254.975 178.95 254.502 178.777 cv
254.218 178.673 253.996 178.396 253.746 178.197 cv
253.973 177.958 254.158 177.596 254.436 177.499 cv
256.44 176.8 257.815 175.438 258.769 173.584 cv
258.91 173.31 259.085 172.968 259.335 172.85 cv
260.894 172.118 260.688 170.751 260.712 169.403 cv
260.777 165.874 262.309 162.909 264.483 160.251 cv
266.822 157.392 269.915 155.5 273.011 153.562 cv
274.582 152.578 275.926 151.135 276.136 148.965 cv
276.192 148.382 277.135 147.875 277.689 147.352 cv
278.189 146.879 278.898 146.525 279.192 145.953 cv
279.967 144.444 281.389 144.68 282.646 144.473 cv
283.27 144.371 283.921 144.458 284.555 144.401 cv
285.973 144.273 287.28 144.044 288.284 142.765 cv
288.88 142.005 291.605 142.582 292.313 143.555 cv
292.68 142.63 293.016 141.803 293.337 140.971 cv
293.633 140.206 293.802 139.366 294.229 138.685 cv
294.795 137.78 295.485 136.922 296.254 136.179 cv
297.417 135.055 298.649 133.991 299.932 133.006 cv
301.874 131.514 304.207 130.907 306.563 130.571 cv
309.214 130.194 311.943 130.282 314.559 129.761 cv
317.739 129.127 320.587 130.218 323.395 131.158 cv
325.152 131.747 326.872 132.961 327.791 134.861 cv
328.75 136.842 329.69 138.839 330.775 140.752 cv
332.066 143.026 332.13 145.637 332.967 148.018 cv
334.119 151.294 333.28 154.197 331.799 157.103 cv
331.563 157.566 331.768 158.309 331.901 158.892 cv
332.188 160.138 332.344 161.335 331.721 162.547 cv
331.275 163.414 330.955 164.346 330.57 165.245 cv
330.177 166.161 330.095 167.071 330.441 168.035 cv
330.904 169.323 329.819 170.242 329.567 171.364 cv
329.441 171.93 329.167 172.473 329.115 173.041 cv
329.016 174.149 328.428 174.981 327.828 175.854 cv
326.965 177.108 326.07 178.368 325.419 179.736 cv
324.223 182.247 322.18 182.788 319.742 182.121 cv
318.537 181.791 317.342 181.424 316.146 181.064 cv
315.276 180.803 314.748 180.935 314.932 182.021 cv
315.187 183.527 315.506 185.029 315.634 186.547 cv
315.728 187.65 315.609 188.78 315.484 189.887 cv
315.365 190.946 315.274 191.693 316.543 192.364 cv
319.896 194.137 323.383 195.439 327.065 196.259 cv
327.549 196.367 327.96 196.334 328.475 195.929 cv
329.416 195.189 330.551 194.652 331.679 194.224 cv
332.01 194.099 332.682 194.538 333.033 194.885 cv
333.559 195.4 334.02 196.021 334.362 196.672 cv
334.96 197.808 335.985 198.143 337.104 198.475 cv
338.024 198.748 338.889 199.213 339.77 199.613 cv
341.896 200.582 344.037 201.525 346.129 202.564 cv
346.686 202.841 347.093 203.423 347.559 203.877 cv
348.628 204.922 349.689 205.978 350.764 207.018 cv
350.835 207.087 351.008 207.121 351.104 207.086 cv
353.358 206.278 354.94 207.768 356.598 208.785 cv
358.934 210.219 361.391 211.469 363.307 213.547 cv
365.905 216.368 367.997 219.528 368.995 223.187 cv
370.193 227.579 369.042 231.628 366.179 235.202 cv
364.893 236.808 363.666 238.393 361.592 239.092 cv
359.55 239.781 357.521 240.217 355.364 239.797 cv
353.638 239.46 351.789 239.452 350.194 238.805 cv
347.637 237.769 345.243 236.327 342.781 235.054 cv
340.604 233.928 339.702 231.664 338.248 229.901 cv
337.385 228.855 336.798 227.587 336.034 226.454 cv
334.768 224.574 334.82 222.348 334.439 220.253 cv
334.326 219.633 334.842 218.848 335.192 218.205 cv
335.717 217.241 335.648 216.392 335.18 215.407 cv
334.036 213.003 333.004 210.545 331.94 208.138 cv
329.587 208.03 327.286 207.902 324.984 207.824 cv
322 207.722 319.016 207.634 316.03 207.586 cv
313.641 207.548 313.6 207.665 313.484 210.113 cv
313.4 211.884 313.246 213.657 312.993 215.41 cv
312.881 216.188 312.595 217.023 312.139 217.651 cv
309.284 221.588 306.312 225.441 303.49 229.402 cv
302.82 230.342 302.533 231.572 302.158 232.699 cv
301.973 233.257 301.953 233.881 301.916 234.479 cv
301.725 237.563 300.949 240.454 299.195 243.043 cv
298.905 243.471 298.689 243.952 298.479 244.427 cv
297.929 245.669 297.145 246.764 297.742 248.354 cv
298.182 249.525 297.992 250.932 298.091 252.356 cv
298.544 252.175 298.853 252.052 299.323 251.864 cv
299.67 252.792 300.012 253.666 300.324 254.551 cv
300.538 255.155 300.778 255.531 301.535 255.172 cv
302.042 254.932 302.641 254.885 303.199 254.752 cv
303.208 255.437 303.215 256.119 303.228 256.803 cv
303.229 256.88 303.259 256.956 303.317 257.216 cv
305.269 256.358 306.122 257.954 307.187 259.042 cv
308.543 260.429 307.232 262.078 307.666 263.74 cv
308.438 263.941 309.382 264.188 310.475 264.472 cv
310.245 263.457 310.045 262.544 309.831 261.634 cv
309.566 260.508 309.793 260.288 310.913 260.432 cv
312.6 260.648 314.295 260.799 316.213 261.002 cv
315.901 260.044 315.73 259.277 315.404 258.583 cv
315.004 257.731 315.216 257.101 315.779 256.42 cv
318.096 253.616 320.381 250.786 322.667 247.958 cv
322.887 247.687 323.038 247.358 323.242 247.022 cv
322.298 246.604 321.372 246.193 320.164 245.657 cv
322.25 243.974 323.576 241.846 326.176 241.352 cv
327.896 241.024 329.582 240.529 331.301 240.202 cv
331.72 240.123 332.339 240.272 332.641 240.556 cv
333.656 241.511 334.651 242.511 335.499 243.613 cv
336.393 244.773 337.494 245.545 338.85 245.99 cv
339.857 246.322 340.439 246.96 340.576 248.027 cv
340.625 248.411 340.789 248.781 340.957 249.347 cv
341.606 248.142 342.169 247.096 342.731 246.049 cv
343.324 244.942 343.603 244.934 344.411 245.892 cv
346.054 247.837 347.757 249.733 349.368 251.704 cv
349.923 252.383 350.475 252.574 351.182 252.133 cv
352.762 251.147 353.812 252.021 354.862 253.079 cv
355.413 253.633 355.372 253.993 354.689 254.357 cv
353.888 254.785 353.11 255.255 352.302 255.718 cv
352.385 255.914 352.398 256.066 352.475 256.11 cv
354.97 257.547 355.887 260.062 356.579 262.573 cv
357.321 265.263 358.83 267.105 361.263 268.37 cv
362.41 268.966 362.338 269.341 361.19 269.93 cv
360.271 270.401 359.346 270.861 358.398 271.339 cv
358.454 271.488 358.471 271.607 358.535 271.691 cv
359.789 273.335 359.783 273.309 361.863 272.67 cv
362.251 272.551 362.981 272.563 363.123 272.785 cv
364.721 275.308 367.559 276.049 369.852 277.555 cv
371.85 278.868 373.896 280.109 375.959 281.314 cv
376.659 281.722 376.727 282.137 376.368 282.766 cv
376.032 283.355 375.781 284.007 375.371 284.536 cv
373.865 286.477 373.493 288.646 373.754 291.04 cv
374.011 293.409 374.136 295.794 374.268 298.174 cv
374.52 302.784 374.756 307.396 374.943 312.008 cv
374.975 312.779 375.046 313.525 374.518 314.354 cv
374.135 314.952 374.604 316.098 374.704 316.998 cv
374.734 317.267 374.896 317.554 374.837 317.793 cv
374.764 318.084 374.522 318.333 374.354 318.601 cv
374.174 318.382 373.876 318.184 373.836 317.942 cv
373.56 316.273 373.322 314.596 373.1 312.918 cv
372.697 309.873 372.303 306.826 371.925 303.777 cv
371.581 300.997 371.281 298.213 370.93 295.434 cv
370.649 293.21 370.293 290.995 370.037 288.769 cv
369.979 288.249 370.083 287.648 370.302 287.171 cv
371.042 285.56 371.867 283.987 372.701 282.317 cv
370.422 281.183 368.255 280.041 366.03 279.022 cv
364.629 278.381 363.607 277.453 362.967 276.059 cv
362.755 275.598 362.429 275.19 362.171 274.783 cv
362.047 274.763 361.947 274.712 361.897 274.743 cv
360.342 275.709 359.098 275.384 357.822 274.083 cv
356.927 273.171 355.697 272.592 354.645 271.827 cv
354.354 271.614 354.16 271.266 353.921 270.98 cv
354.229 270.756 354.509 270.474 354.848 270.322 cv
355.446 270.054 356.078 269.866 356.97 269.545 cv
354.624 267.318 354.57 264.414 353.762 261.786 cv
353.638 261.383 353.297 261.006 352.969 260.715 cv
351.935 259.795 350.844 258.935 349.801 258.021 cv
349.366 257.64 348.83 257.271 349.227 256.513 cv
349.307 256.357 349.154 255.972 348.991 255.813 cv
347.608 254.452 346.198 253.119 344.734 251.719 cv
343.668 252.856 342.538 254.021 341.457 255.23 cv
340.746 256.026 340.292 255.764 340.043 254.918 cv
339.577 253.34 339.168 251.745 338.773 250.147 cv
338.577 249.355 337.067 248.273 335.855 248.332 cv
334.911 248.378 334.402 248.004 333.954 247.251 cv
333.128 245.859 332.2 244.527 331.384 243.13 cv
331.07 242.592 330.802 242.514 330.251 242.752 cv
328.78 243.387 327.283 243.965 325.531 244.672 cv
326.735 244.927 327.662 245.13 328.591 245.318 cv
329.331 245.468 329.452 245.797 328.943 246.37 cv
326.439 249.188 323.937 252.008 321.442 254.835 cv
320.394 256.023 319.346 257.215 318.344 258.443 cv
318.169 258.657 318.145 259.064 318.182 259.366 cv
318.323 260.497 318.528 261.62 318.692 262.749 cv
318.804 263.525 318.555 263.896 317.664 263.927 cv
316.187 263.98 314.714 264.2 312.975 264.377 cv
313.857 265.727 314.606 266.819 315.29 267.95 cv
315.508 268.313 315.555 268.777 315.682 269.195 cv
315.283 269.196 314.863 269.281 314.49 269.185 cv
311.45 268.396 308.414 267.587 305.386 266.75 cv
304.745 266.572 304.179 266.268 304.613 265.386 cv
305.606 263.368 305.044 261.447 304.19 259.55 cv
303.949 259.014 303.667 258.639 303.022 259.028 cv
302.958 259.067 302.872 259.075 302.794 259.087 cv
300.979 259.372 300.702 259.068 301.301 257.342 cv
300.586 256.998 299.414 258.06 299.038 256.694 cv
298.81 255.863 298.604 255.026 298.371 254.125 cv
298.068 254.243 297.822 254.345 297.572 254.435 cv
296.842 254.697 296.561 254.413 296.526 253.663 cv
296.479 252.649 296.353 251.639 296.251 250.53 cv
295.552 250.963 294.954 251.325 294.365 251.7 cv
293.523 252.237 293.118 251.771 292.912 251.026 cv
292.756 250.461 292.788 249.838 292.593 249.293 cv
292.458 248.918 292.052 248.65 291.814 248.301 cv
291.579 247.956 291.343 247.591 291.213 247.199 cv
290.822 246.024 290.482 244.832 290.023 243.319 cv
288.578 245.651 287.313 247.685 286.057 249.723 cv
285.582 250.491 285.209 251.344 284.624 252.012 cv
284.309 252.372 283.579 252.684 283.144 252.578 cv
275.307 250.676 267.49 248.701 259.665 246.754 cv
255.98 245.837 252.302 244.883 248.592 244.081 cv
247.49 243.842 246.973 243.369 246.811 242.324 cv
246.092 237.667 245.378 233.009 244.628 228.357 cv
244.191 225.646 243.692 222.946 243.214 220.243 cv
243.018 219.13 243.307 218.332 244.488 217.97 cv
245.233 217.741 245.944 217.401 246.828 217.049 cv
245.764 215.751 244.729 214.487 243.692 213.222 cv
241.455 210.491 239.229 207.752 236.979 205.032 cv
235.237 202.927 233.472 200.84 231.708 198.753 cv
229.432 196.062 227.157 193.367 224.844 190.706 cv
224.652 190.486 224.084 190.33 223.847 190.45 cv
219.689 192.56 215.552 194.711 211.419 196.868 cv
209.247 198.001 207.092 199.165 204.928 200.313 cv
203.321 201.164 201.597 201.854 200.144 202.916 cv
199.145 203.646 198.457 204.847 197.738 205.909 cv
194.209 211.118 190.738 216.366 187.205 221.572 cv
184.121 226.119 180.981 230.628 177.768 235.295 cv
178.472 235.718 179.106 236.161 179.794 236.494 cv
180.48 236.827 180.777 237.257 180.774 238.059 cv
180.746 245.819 180.749 253.579 180.77 261.339 cv
180.772 262.062 180.57 262.506 179.895 262.84 cv
178.17 263.691 176.487 264.626 174.776 265.506 cv
173.587 266.117 173.17 265.829 173.12 264.451 cv
173.057 262.739 172.956 261.03 172.888 259.319 cv
172.703 254.707 172.526 250.095 172.346 245.483 cv
172.338 245.284 172.366 245.074 172.313 244.887 cv
171.839 243.233 172.195 241.852 173.576 240.755 cv
173.878 240.514 174.074 240.141 174.38 239.752 cv
/1 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
347.816 158.058 mo
347.797 160.987 345.284 163.451 342.35 163.417 cv
339.474 163.384 337.031 160.918 337.022 158.04 cv
337.012 155.107 339.498 152.614 342.428 152.619 cv
345.36 152.624 347.835 155.122 347.816 158.058 cv
f
0 0 0 rgb
%ADOBeginSubsetFont: OpenSans-Extrabold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OpenSans-Extrabold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 84 /T put
def
/FontBBox {-728 -293 1407 1124} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B7F51B0F1899CF3B96F63A1DB37C533B29D084B305A7
9A150F29934D9F> |-
/C <1C60D8A8C9B67CE7CE99DBCA87E0EA5229C591579162C1D0E147A87371CE
CF6E1DCA9E5E34B33FE67A51C22CB9682285B3B9650FA25E56452AA8C24CD7B4
B36AA1BA49C175A1CC2578DF40667E3496575F257CEF66696F59C1FEA3A26FF3
373AE083F5A3D964D52EFBC60C1517B67CF3C076AA760EB5AC9457> |-
/T <1C60D8A8C9B7CC0BB64489DA38F187C14D6E98EF778CA432B1CC1F58AB4D
FDAAEF28F56E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ILPGGL+OpenSans-Extrabold /OpenSans-Extrabold findfont def
/ILPGGL+OpenSans-Extrabold*1 
[
67{/.notdef}repeat /C 16{/.notdef}repeat /T 171{/.notdef}repeat
] ILPGGL+OpenSans-Extrabold nfnt
ILPGGL+OpenSans-Extrabold*1  [31 0 0 -31 0 0 ]mfnt sfnt
125.705 313.723 mov
1.5498 0 (TT) ash
165.436 313.723 mov
(C) sh
%ADOBeginSubsetFont: OpenSans Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OpenSans def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
dup 68 /D put
dup 70 /F put
dup 71 /G put
dup 79 /O put
dup 82 /R put
dup 85 /U put
def
/FontBBox {-550 -271 1204 1048} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B7C3C9FC576B1290B2359FA25C1CF1F5B8B26FAFF44E
70D097A769660D> |-
/B <1C60D8A8C9B67DB5928947BBDB783250EE56AA29A62315E76CBADADDE6E6
A922B0A7F86041495F4BF6BB430692D7972F463ECAE4AA242A81AB5C50F492EE
FC5EBA62BDAB52CDB273A59A1EA8793EDBE837F2B8D0C504A9D0006B798579DC
D81840E58196EBAC0AAB7E68AED80A6F9D85EBA7030D452CB9AA84B232FCA2FC
E41347108D1FD87099197008A3260124FDD654D0F6> |-
/D <1C60D8A8C9B60C97DED06A020549668EA16D02D76D4B90FAF5889B824ED8
3A5C6530934884754D3F5C970449EC264A8EF530EE45E2DF1BBC1E3FE8B2E416
4E138D77D7BB5EE6BBEEC148D3F0C20F87CB70AF3CE1C9151B778957D100D055
B7B627> |-
/F <1C60D8A8C9B7B71A4CB90B30AA7EA5D933B17A92B11F83341E0D7C6AC38F
7BCDE6C2570BED2B31> |-
/G <1C60D8A8C9B60D6597E707EC692163F141B0F7F67D498A143B070E588792
733E397B100812BCBB5096DF3AA4D444744F4255681C56AB0659D3D6E0148566
62C0BC45542B6A8A44612BF6712B83D9373EB59F4290DC39B579D022BBD6A2BA
7AEF29EC0F18773B661F0FD1C4262F62044168BCB4912BD5246BD10D50A9B223
CA1E4E62> |-
/O <1C60D8A8C9B6FEB0BF707A5F50DCF15198CACAE179C90C98EDDAF7577343
ACB1B991F5F7BEFD702E0BF5589C2EEFA0985465EAF61145A098BC80794A4866
8918E3A01F939F09CE27B39518D529F6F43C72E3AA4AEC48CE22A6CDB65A435F
D0A884E383E3418BE1608BDF33D2BFB2A6EABD80DC7C10F2135978999BB2A9EF
9D30DDE195477160E17D> |-
/R <1C60D8A8C9B7D10329DC7BBDCBB175FA5BA84C2BE80197C5FD729E54A165
78512E761C1C3AF1D8A60C062FACCBAE7A8B4D4B4A173E8C91D8A3676596A1DE
E4E86349D9B722E2E29AC3B48A34556B38BF2CB66F41F42FDB7CC84B71F56533
DF50FE> |-
/U <1C60D8A8C9B60D659769AFFA2C98CDC8D66E53F63DC893CFC17592D03496
07BE7299F5A9F7BA8F0D675A668211DAACE5D8F2E2CA705DF8CDA8BE5103CA48
81035C5F917F6F6C8F8868CB76D82D34DA0F89647AC826> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDGGGL+OpenSans /OpenSans findfont def
/IDGGGL+OpenSans*1 
[
66{/.notdef}repeat /B /.notdef /D /.notdef /F /G 7{/.notdef}repeat 
/O 2{/.notdef}repeat /R 2{/.notdef}repeat /U 170{/.notdef}repeat
] IDGGGL+OpenSans nfnt
IDGGGL+OpenSans*1  [31 0 0 -31 0 0 ]mfnt sfnt
187.102 313.723 mov
0.000488281 0 79 (BURGDORF) wsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 /1 ]]
] del_res
/ILPGGL+OpenSans-Extrabold*1 ufnt
/IDGGGL+OpenSans*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.0
%%For: (d) ()
%%Title: (Logo_new.eps)
%%CreationDate: 11/14/2018 1:28 PM
%AI9_DataStream
%Gb"-6f6.8,N[T4FHS,8Mj="63E[fYHPo\p63Cedd/R-=(h7NF!q3q0ikNT_*O'R:$99g4R:7k\<^"R>08:UgD&-*#WCF_?2p04*e
%B5[4B<.GRk!6ka:Q4C-8Ep\piXlI]d1q(tlZ&HI``L&&!"K5&6OpRG,-A`QmZ4+/l%%>Y:e=U!*##/eoc4@L=d5Vl^s'>'ucKh+l
%V&jlG]%t20JR#\@r%YW/%Jga:HT@>eeTu_(T>K;hdGhnfUO$FsD&JgBVo)rP,IRG.c(=FnV+t)A%7\&-,`mgZUl]3FF43mnFYW8@
%UerU,-PN;GI4%Cl*CJ^m)#1^@IaW.XV_.-?7No07HLQ>V^527=O/b%)!9p.T2"p(/SBF^KP<k7[8-LF4Ds7"s4s!ADPL5H@J)+*i
%f;.9->G"H>mQAJ.p]-kX@L8Xh/Usc0?pO9.d:*Mr0G0*rN#332L(/qFQlS)Q%.Hh<7^Jhf[*`MYqQhFFPmSL(op.F48<b,hWh"XW
%OD0Rb!j'2U=9TZDIP^@`UYC61U'rZ$P*Dqf5%mMn[>_mLFmDR"H*jsX;lNWpO$9BHE8$sHSTG)7<$4K+hd@c\otR>c!=;M7D/`!k
%)l3^%+Rf^((XOBl$a^I90F8j26,Ou+=&DCX'=;Mp&.V$(i?Lq&Y$f[18"It$5K1F"UC9Wnh)IlleFKQe1<_0`UOhHV3i66r9.XNH
%0<+rKMu`&rR7MaK8AKBDEuc`!`QkO:QX[^p+7sMq#V5'`kS6WfGOVSZec-cL!5ruhp;cdY+)E_33uq"j0gP(tJYWkW*7b(R!]6*s
%(T4#oJ7^5tNCJ=I`S3(hS\A@_C<0s/U7L8Q"6edIqWFb5;Z6pYj3>jT=Jsu?rY6MIUWM+q3j/3]nS5Bo)YE'^+@ZKW=)(OjQUN#.
%0>kd2J4G%n6@V]dPbb>UL]",+L!iOtlF6'=YIN(,s-nOl8oYF)Q@pFa^r@.cEoV]bD[e%!:d?$t=3:5IX!<U3`8a+149Tp5DW0U"
%l"D@8Rt&<t6G,#kJ-7dq_#Ld'Lo^4/c,&mf"m2c6Q?o*NV[q$@-4]\:2!`us?kWM9Hh\o[j!0qK0apck`I%8)Fpl@uP8#*^VdjC#
%*QKOW%E;<h>%]OH:VK;]V#=;3:+&rP2[01lj.rd,K_["B5f%QRh)[e>o^s!HTjE0&S9@Jb&deL240=R:%K?3(n$ZdI9&UVO)ACF0
%IK32I).V5ORou/n=`*e6*'cVjN9?HY`/CF:]LWqCPbOjs;/:A"f/f$kS/CO]BQ]2rYP88e#[f:H#+'@_91+>)\PJPq]ABnVkmY1R
%a"PJ=jG@)`5dtdo>=7FTXjs3EZ1^$l!On`Am/sDKj)l5Z>oc_sd(1j)Y%p;fKH,+`hGhT?aiu+L\th7h:m0D4,M25%[5nL+*Nb>)
%jQObm#BKKgg8BLq_*Fuo[;0palsPB<N2bTS.V"p9qD6[Ur%3Di&7YR>(9d[6/'83^5CK_p@<"gA/qB(Kon"T\@_XogM]`aZ='&J@
%UAGq^9&nW<=ngO>ed)u:>q1duD)@MmIh/@ZOQoKMm4*&<LgD(1C$`<ME_"u[B32kN'-c!D6h2i!Iat"+a7<mt*M2oXK=*p1g")f>
%!=7U1!-QuiQC=#n5UbA(eu*#WDtl1nSTZ>XXPOi_H9f*B:VOVV!eiVRp7s6t9"rdPReFS'MEZS4T)?2ZBMH*8UXJs:MOH$i_ucs5
%J(^19NMba>5]&4=C+.E+W8`Q&r`JGh0]mmC"8-@iE7M,#rc-#p)KA6"d/L48PHVk*%Dk=,l87l^Sa##X>E!<N[eBZ+)ZBS<RXY*!
%%r4='SK6kX;#5C6hR,derq;CB=HM7p+U$lP)Qr*:<oh%MYmQt$*WV6ME!LVW=Fqli4#5l]G,Gk*GCX?.%26V!k2992PCHB(!'2\#
%'cWB."95BrqKEIW?"_sABkAcUJ+j*Pbh%uQdtIXUgl#?-lGG[3r:-].](LN#'HeL)5%3R:8O%0G<_r[,deP]GX*9E/`;7pC+f\Mh
%;=LNjNG:Hloi0S%Zq8EtcmtR_h*k*mIb#V=eL,hM;D>?<l3'e<qPa(u)i.kNHVtsfQ)Ykoj<UiC'tD1(PeekqW+3pYquDL)O^L0@
%*-`rih?19*%*L/M',>c5@TDg!^[\L+q!B$CrX*Uqo>'rJ'kj_c2h4DK_cdnlWl&3Gl*W_WEF<PZKa\6C?l4n_?*7Qf->8G_nuIM;
%%U7an1?aLC,IOV%mo:&#bN\uPYg#*]'emGJP;,.&\^#ec5Z@5D=_JArs&.#@R'kEMK@4Pc"Y\@Q^]ds2EO>dl"ompGd4;A\r`0@I
%c79^hA'9@U2Hi^qi4/%TD::c6?TmmL>#H&aoRRBoOU\eVm48*;mnVCOaZpgKchr1mp5eb^>_,c.^)K4L;K'AW<m_;$iElEg`d,8F
%`OO+d+4HF'7S!IXVFOgnebfKdAqW3-@a!/RWj'3u3XtRO`_,@"d`+&@'Wd4c;c.0+$g)bqYus,Jc$].A[+uh=2bBr%m82QiFlpGH
%>1B7u9b7&aqU=UeJO@KXlqub=,!J#0ESfmh^i4&a+Bfjlj*rPle3V_ZD1)Q(H9k$[3QO[FloNMne:AMCo:O>JoB;0`^-)4hR"Yt/
%p0[j-X6I.KC&[j19$)mhKB]<`Oe'49nDGi\s4b/`l7QZG7]L\4@?U,h_qO?<.V09ZrC7@`?hVBP$moB+<2B4UhHoe.GCb!V0_hOT
%Dg!+DU]$?p\&`oT/AoC='IWl)B2Tb'h#RK?ZmK/:j5YA--L`5RNuXcIL4@e6%4g4`QaM1JbLYs5@>L:!MZfmIBD*Sg31%WlJX\^g
%3HY7+8&,0(Ck=]Jcf^k@UaqG#5^(lL^9E2CT(YBU%5X>6U$7(Caru-'!G1:u)?m95(srd0bX\+rPW?]B;P:-l*KdKms-/t9_'m[/
%GO,4iN/k9P)'\k'T2K(dV_f<$fP.Fr:llq)p!KQiW/k,5-D&sg.Sr1IA7/L]!jlsF2so0*_k3V^Va(DN.ND;sdFPN8ZZ^OT*)*I/
%lJ9b<>1Ta8IoKFIXl@6EX/4-Sp&q7#1=0XWM_r[rB*\UZkeY"8\62&CGa_<WN8l:4E`F3tm,41TFkVAf,,^?:O:5dMh_n#=GuBdi
%2<eJ35dAk-e/OrrB;3rmGb4";koZRl4"\3I5=^k`!1oGp]&MWcN_)4^AIO"VXD7*SBB@.7o"o^:;8#18f&\\)T;,-h\4rG[b!]Q9
%C]b]>`qi()O:q'qh/!&__'L*q-NK]R1sFH,EX1)=-RgArK0H>r-[9B:Cukp9#N^No7X,JU@%9#=TnB=ZZ.G*,A5BhdQ#oK*m&Jol
%FdcYn<UG-P<@D9'J:1-CC!\jrg8\'>Ino=%;W):De-O)m-=qH_SIC(V*pPM?9q$]395<-.O?i_Q0JS&9@A0(h#^HSfSK1E+omTOL
%YSf8E71S?,?<%*h&Y@eAbKXSJDJ`uT-9%D5)sO+.A6pM4@)hl9/)KOjFN9R^r/Zif]9?iN`9toNSXZfDUGAf]rUreYSYGKI6bk8(
%+54T6::3BU$k65K*>?-EK)mm]V1J4=+6Q7%j7LmYBt1\"[AWu#cN,j-I9<^$50;,%8q*Df_cYR-B6A^1`E6c2MU@"l!qUN=4qPpo
%?1`Nn`QU>JoXrXAcR1=:I'ZJl2nS]eZV/WiY37UPZt4Cu*sh"s?#%+,V<=@SC>RX?k*oXk^=f@FRpBd3fqi:n=.m5<QtMcZJ\X7W
%?6(ds<X>e$ItPELW&DEiWfR.mlbsi[bi";(C$EpQg&#"H9/tdL%E%4M^/PlL0F!tl<$cFQFhD:bg[H16j+";WI"Q!(K6<Mg`rBEa
%qnXb],bF%mrK!;:DnNGk]^@mVq]@J.5@2R+nJj+AJ$@FMK;D7op!aP%#>:HhlXGH'#?.an[ldlZI9JAn:\m9V4IQpK45?`.DE"a)
%%"'NbjeX[+X"PPc3:$3@0&1u;!k'RLj%6.E]VVYp\"bMmTgD6fK*MhQ"#pnoo`13*l%=K9m?.RaJVM\=iH[q4rhNCU!$B#r4b9fp
%M:O&,;7$>KE@4TONWXe^=r@/KY:bPW')s.goE&"m%LC'PTP+HK$,CcPCI!V1*ra4[K82'@I3XojTI#pJqB#EhItKsJ*9!mi?8(da
%[/P8#OGa.Q@B?"qlud^Z4U9k)d//n(e,7'i#RpVAHM.(Us)3,0!H1p$-$3hun%Y[\&#g[qA_M&n5P72H!DHrF$Fft/'7ea*Jq;Fr
%;.jPNhYD&fcB08DkHhG[(Zu&%<bHm*2^F)fo_4&R1W5CZeZb6GFtiUmi:HW8*.dD=nHn&I)BH>5`d;86hLB=(!LIX3r_s+GGdTD^
%8\>5K[b:>\DMW2?%i2hN^D@rl\a`ol`MW6feC)Jp:mZq"KDqP>2&c*4>;aC1dKgf(%+@sUcf2>SXK=RW2SO":1#r\DZ_PWLK@(4t
%\1Q2a7lK]LC3jCBs-g-&D(p'7qp]6#G!O:`!k$omplGHMmOl"b%jP'K/oNMtmP3?OeAL&eaup^+1,nd5;rYT\hLSX]SpCWW4nW?o
%3>sa>'05O1a'u/==@oO]fXbP(2,oeR3[QZMk#t:E0KdIS`dTJP(nH0\0^5r+\o/<nCe[-ZE4&Q@G?uBig`&2*h'q0rj87K+AhjIZ
%ETF]oe2#,q_g<h09R*_/G'n\;CYt&.XLGL(?g6Dp1>h\F$Fpu^S(cK$fBCgJ>n>d>PBf6U#^HH3C$WZ>bCG-"9+=R;G4Eb7A%$7f
%KV"1SV(os*L&%0iDHCRVX=(K.JJoL<,sTteg&iEB^/XhkIFKPo=97U$2ntg2]LUcsZg;qd2Cs'TJd1Nqk1'1)8shD9+*m>mXVd]Z
%]7-c[\j<GK3Z(S4ltC`'GM0eiCunb8.t9W\DJ\L/MbRrWF^8GC9JN$]Z4PNNfC$9u6n3HqK"ck51P+"@,B-5ERrQ6:FjsqOE<#>1
%UX+6RML?!R"1b0%OFe@)6!!$VNp73hX8.sC"CI6efZ@4_n8eCd]RPF8PHI,<:>,$XB^TP5mX:oqqn^`Z0G<*]GNuI'VJple'K/iZ
%\)kgoGF5DCm$o/WVG4<pABkim1rjH0e@>!Rpl&%=8*RM8hU-d_3'J7Q0l]I"Pcb-ZC9>rVmdp4bEjX.aeU6O&dk&FH4.e==.]l3+
%-l,EZ.IjB".=Anm\>O!cgDa,3fot^^/"@20VPO@'H(Y!%mb@o56CU#QfL"=,PATjXqY;FAbK'%@Yo;r)?B=f09!:aaENBs/7(/th
%:q>*\1k]23%q)2"qt4:>FcX*EWHR]FP5c/eBG3fu[L5g@np@`n\8s;*JkhBuDkCqMphfo;E7-cRk+[_$c"o8Kd?crb:iB&/:%C@[
%DAJ`>FX[:/]r1V2>O6MmG7jWV+6@]a96k6_Qao36pe!K7ocO+6'/$^D?SZAbMV#gEBCd@uGrom)\m'qOd8B[MR]TPuIrPJ#8*SJU
%(=3?O]@Wfo^U_f$+.T7h@diEO,Du#2S'?t^-Zo,27;F$8L"#Q4:eof.`-[ebV)nEs*@@1<56s\&;Q_NVp#Ihi<jn%Z-i4kW`CQ04
%PdJ<LZ`oQ(o7OOAra"hM`ABJZ$/A4($\jlXp,6knSqVOM\rWZ0jF29+W5>3OXU7M3DO_O&p&48U0`3ao1]i,N,>^oG5XRE[:H7o8
%3)eO4IbVUjT#pZsOlD-)NHo&0J:erBE$eMB0SREj!sR'M_1&ugIITd=;sQ0R]?Kdp)Q8o_e[k7MGC^5EggD^j,@u6V=*Q+R/kG"i
%:3[DcS(V!(4'ZI>c[LfFqT`\JB\Zq_*uEcig"KMKP.fRcSnDgIM_'r)?QV5";<t4Vn8UG<W$F1&M-JkdFD-MKCilaRg>ejQXqk5p
%U]@m<)pW8qn)[\=aFL/_:5A:Ygr!jjBJfRsj\k:9LLc\`HtO_?%.6R$\O#f28knp(NMKWI,u6.F!]902_),+@FQjcfb,=/fRHhkD
%1.#JiPcda3ZaJ9(FI&A]feedsSc+=@&BegedsbetXHcc6S"s!jD%Cj^?c(&dYsIdG'r95*6:k5`Brra<75T$ab1ZMfRdf*]oV7'`
%HPS-%I#E,9$coZCW;cM9ZBoL?o2<;NR\8lN7]VblocAr:[@)ejXt(LIlbJ3GjkqS3>h_6BF99fS5GZIhq.E>%>hAkOCfm^.\f]/i
%f35?a^I9L2iHc`:%&^WD$Vf%sj$>ca)0Z4X3ht#&bjNKmYs,=tPhPPV9],1\PF[I>:7k9]XIh/=docCV<S8luhHR[0p#ECjmr7S]
%)*iQ3=NK(=#G4M1[?Gp9R(.SF1o^(#@t9.%^oL,Q9r[d!)uNU&;]euD=mpNif%c<K*gX.l>B$+/1/h&R=)>gI2mZSJ_e6N<W29S)
%dF?/CdI-gZA>AaXXjsj)L=M*W)Um\@s6<aVRpNULpMd2d0RMQ.G*\C%$\A!d=[8r_r$n4sp-*)X7p^oHfU5iTf1&*cFSDJ4hC>.<
%<9`M#`NKAGbW_r$D"G1HP2?%h.[Q436\gE"31<h?At>0N6:kUp(lbo56LK4_Ua`B.0c<%?M)VW?,k1B@+oKEJn-9;'.18AYV#$SY
%i<FdF+7`Q6S]4-pp]pncnBZL%e;4$*3n"#ORG\]7E\m:H9)VW0.qf3]Jl^i"lc5\:g9nI=)=pp]^ShV58-bua0m?9o76hn./:B>I
%>_\Ql##a"*Snf%caCku,/SP=/BQ,gQ+76*\&$fe4#X!U9G(PZV-VPs:UCf.95T2u;UJfK=h_68n?'!2LU!1'$9+44P$$>6P<h6+p
%U+r75MZssdgG`!ml3q6"E4L2fFa.I?RUse;d4E6<8Sun]IaHa;U!D?s(E/aJL*j*H6C'G39iWLFhD^j,1h\Y@c'0_aRb6f]_#.h2
%mF]7KEA[M+BGIU(WbVXAg_qM1Dh_O;P6%VW.6:J2C+NbdX'M-InZfF\%l0tNn^If<CH$/dZEUd])jf^0l=_g+HKi8Y3Z=QNQeDk3
%%l]6jkY.jpX*>fB4bmD)WP$#A.OUQQUWM(][Q<5J2m5jVE$*(CiMfoFTuhEqru,\[e7nG3Y?3]0Kk<O+"%tlQ")E:>2g@3%'"j[>
%S?N*MiU4+i!ihed_oB+7=RR$,;r6H%!?-UFA[K_mSd^OVk&t1*_Skt00/Nb(_:-,48CYZ,h+fA"BQYi/V#p\8bb>]u:R+hD5Dn>6
%N^Nc)m+GmVDu*Xe&OtBmeYE)A\6_-(Dt#)d'-(5`kDU`(pnNKrJ4:DtY45YVp50U6E"/+-)#U&\Dt`I,pSH4:#?ZbT!K__Jh+B&4
%*'`lKTMC]QfuYpk*Bq-:s/P4&U:q93)*q80d:#gVjsS-Gf%)5?Z%#l;/J^2'pHS@EL#kH!jAJ7<O&*$Sl/S*s]jJKD6i*][UqmA>
%$;#uH#MYL<[35QR"CY(^a/fc1&QD3?Q1g+h0m.AqqD!37cEC<)TLA>D<B;Y;YK,1<kNZ2VDa8d4J[<SsZb*F+b>GtQAehbah>/9L
%&D89^Gp_KYqP+a>T>e+cIdN!Fh0dsY/PICg$D5`%6^^TMg##*hm/CE,`$kOF6TK*rd->`HA^o#H5"@&+O>Ju4;.bKCo_ou5b<b\h
%3m3.GcjH+'hD<8?Y4@Ab`nGMLh4r<ZddC*o9dEl&18I[5BZL6VG@Si\9O,E&V9nrf[M$hDlL_!'b^?5\Y-7tmCA#.PW)!2R-nuoT
%%e<U5O4%[%lekEa"Z7&d@9DVH>:m=uJ^Y+u[T2JR2OK^4-*eD<4pXk##opSE[erEicGW)J,GBM5lu?2Ln2,9TrlB6ZGBp3Zbb&QG
%%VGRIQ+\1"NcWu48(!IRYpR5h0i4UjDqS[t/?4,sWD7Hq6PO<_&p8N5Sd'ee_WaPT9=.'G%_E2DQ(_72&fKC9k[C'32Y(3._,NBm
%IXa9WO.GB]cGQ.1bZ1,gcbiuTLH,Y*+10)s;ilU_(Pnq=jlh(>pq-\92KrH"2SZQ:k0NKSR??S)-s8%5[>R,Cm.C\Kqsq/]?VucD
%h,\Xj_eBUnY=:9rIe/^ki2du?,YWikVibo'Zs$IpA.pel@XK0GQ:+l78P%AtP*=_MT^=*P@I2*0Lk.2Acap-22LrG$mbSg-/tVCi
%^Rk$>n\Y+B/DS@40#lkoj6N:7-1_Lfa8'B;kkD;1))V!21n/.e5@a?U>m-RhL1,\S69>tDAWe+)NlKSjF*V+sZ\ka2H6Xc;du863
%!NoW$pu$j9%(6F_r.;@B[[+\0(1K5)kY^X)VkYnR3qpb4h<j6l#B\([MikjO1n0GJpN1(@3"eR`U!%loQgbMf[2QLS\VXArlg))Z
%2)j/;[&`O`iTtBBc@>cQ33Y,jbJHh,HjsXE>-SSPr/pp?="+Jg>A-/s9b3kRNB$S;5Fsp8MpHLCfViZe+rXDL>*'tP[I)4Rl$[(=
%VY#>&SRCs"@Gh%0XWNqJj>ob>Nr`dRcZR4mYefBtA"=KG5BJ`>-E#P_]g=ds9h@\[eeFY\?BfUTY9mXVd4O`Q-%'ZTd42MLabYrq
%7MlKKWj-s_ZFhh`/$V.sD`_=r0BqjkKqU*/6o,gLK-6bf\"hh#SHd?WDA8k^Qs^r)WEpq%cCUSh.QXKPe2e1jj(W*0:q+#9HN+#>
%]Qubi.5h^Gq81fVYaW5YqCWeJ:Fk=uSt^%#7P]qb!%)B-;c)O0<J5h^L(Pqg-sJ(hYG8`'D%:3)BJ^YC:uUuG\/Wcba0-l/Fu:2I
%b3UK:\U*eJ`8"t.e+[&N"'IN=KOh$#3kiJ;HpXpI<IT5>p<0r<dXISo=[C/g(Mf^oPPfaKG!VW+kLl?YdBCqK=8E[;]=,#3'joDb
%UX]6\8%`J;.9jt*Af-TfIsuJ:Y4.\C+7K/op.J*tX%'J?J\WaSZ+at!P!<;ICijo2cR$HJ3cm^b4;%jf&%V#.JIq3=C7HGlJ&#Z3
%GDACQqjHD3p,7B.?Yo)uL0E^hGH`^dNcBKkC75I.H+["sB4!m^8+aJo\2n8=d>T;?K4sWhKI?_0'bA?iC)[mW.*mS`0JrP4TQTD?
%8@3$VctBca(I,G[`'9!'\aN+n@g%71^qkVB1G4FVKXT9KLEFq&Hg^:bDK@QfamI,*H$/uU8d;@Q1oOr.X4\/.Ebcit$;nRklK#KS
%BQ"u:'Ds8,:UZ,.dbE<=%FYTmU7Hi&g"S.@F3-Qk%Xe?^?ZoDMIlrLFZe@O1(-XZ`*l0cA22b1;G<\`3:4!bj9hVrhZZ(5>qZ)NH
%3!ubc>W.KPAic-[Y\\VC+"l9ooC<$ccA.ItklJsAh_#kOKm'R?e)B9rboq'l@9lEp.f48E86?QQJGMfK0*b4a@PE)D^RrBMoP_MT
%/_74:o&eCPPi&ch"M]A!VAI,%prTh*]gDFiIpON]g@#9QBV5\K8mW.)<N5:noDU.H'fKeHGnQ]dp?H&Blo`oP(rCU`HlM5l?T8M'
%.9eY,e+Af>834T.giC@bJ(Uog6>,DU_6n:q=aTSg36`]Kg4$i$Pj]S3-HJZ8EAK0br6["_JRpQr(/@WO.Z3E#"_n!R4aV>MF9.\*
%mbG2+:inJI",l,e;t2]/c-iM+[4uL@HWA:@FDG,@NF@f6VNd+BCZ1>MAkrc6%5$FZ.lE:MD\h5cXYq>adFo_EIJpI&+1aqC_YRoJ
%\"<@Q\4fE5_dBsBl:C,Pmb.QMR(g;I!jgjORFV65W,U2NN(\FFf7RCQL!n$;<cWApeYW7#[==B)DcJ^d(\p/HB(aX^LdZ7pD\a:E
%j/?;7[U*hJrY;7*A3JNPDqi?mJf=$`X2Bi#R+dSagqg$lTh2\pD,s7EbcBB6l9*9SB5=oWCWl:4^F3E<'$#Y"&t._h0t0kM89GFP
%adm5lEfrXZ^YX-jF[WK]Tj?dP_rTdQ<%RNJ:'apCe5e_J<1Qda[Pi\Jom'Zr.b09aDJtUjM9J`L`?;bG%Nf47G;(XGN!eQ0<dNGg
%i/#`,/L?m1au6_JH5fUZT/KY8?E^-_?UjG2,R4H;`P061rGl)+pSGs>P?JjTT^rfMd*TtLCG<GF,.VAJSMCjB%J]Yumc3[H*aa0#
%:emBah`QFSHlGp//^lGQfQ+GSjg^ou54+Lce[LJ.29.k%E;#"u&:rOU-thhoZKN][Rd)okL1I@8XNC<sSZkoeOiNNp>W5:,b)c#/
%&$n;q24:>[2#S^Rge,fQ5S/D/A/TSVWSI5DIoAXS<]GN+*go?P=&3;mUDV^G9OBhIk'&IaCgQQOR,XR1b&P'nQtC?aoUCq+>0']!
%GD^0G@0'JXWP*GKc4W(br&O[u\-\I'?a3n\+Gio1c;%_rAMpH$8-Nno/WY@%W]^)o298iNegXZ;[B<6b43O>=*#(Tir3>Zq'/IHZ
%$a!n5id)RAd;2I6lOnM,J/OH^07<?-HLg7_)\&_jEP6S"$Lr;dKDO:)W<Z%uf8ImDkrE%a+++ma`G]_=&i[foIJ._V<&U(Ua*$BS
%'%Mi-1f7p\O7'<+Cg4-ncX(GoG:N>-D'`qdIDGr/Z%YC?GNh8SI3pMll^$oJ*<EOg-RcUs*ctki7":1ITZA/[*n[E8\$(#QolaOp
%Y;\3Nio1"^0l]@T>1[g?T]jkPraB\Jg)Z`K/MIH\KQq`\$k(I+$lC8dBTBt<`.4TUGDaZ0H7(!ZD"KOsUl8'X]WC3-7d'$CrMaJT
%#a<h:Vq^%u-TGW37prXSPU`9hp@J\m^t\cC.$ib\+]-HX-QB8u(H77j5P,bj\C+-Ge:2rr]RIRm>46V?T`'9/Ym8Qt-mXj#,M\%]
%nV::Q[0:*K%^Z";O@j?14PWG+7HaM5XO;:&1(7eSJmV41KKWrTS'NNU$=4bB_>G>`VY]hm['q"55QO$$O7jg#IW;ZAEe#N9^qtH[
%`n]LG<1#dbAo@n3H2`J'5;q3pSQXFIgWW1`$KO*We#>h(HAbG^[6Wld;b.YbE.(GF>]2ZKQp#GE,1i1cig"=mRqOPSm/=llT()9C
%h2X?da2Di?>;gg_4FjRVqt0u3A2p2#_FKcD;W+?s)9<?R'BiZbZ@%jI7#s.M^"?.F)!Z.3'IrdK]tYfiUXj)uX7uJn\'r-gOs/Fs
%OmJ3[%DD=%TuLKmRX3L$HbsG+>c7`^n9hFoBk"#M4u7#1BfO+sn-QWSf<%r'*--2DcA"Ackte;E!iFeG`5^9Gf^4b\enK79'5r4o
%RBU3(%tN!q\W?S3O7WiY]/aoV:!t2r<;IXmJ8g]Y*Rc7WVjAE4Nq(\KQV,M".lK-E1t]q\<#R]brNY*2j\!FnqaCoqCG>UDrTU6.
%QQ*O(BF]S_dWl+%F#Y/YaLt]Y?,Kjc.h"QP@s%n5"@pLqN%Igk7FTeJI$0PqN`D'EYap0?,N!&"2IodWEd$#Ao&Y2^K;#:gGMPG)
%S1$i?EnaeJAGrLg(Q@1U*_9#)O8%nNAY5V.POG9.F5#D,U/KO'`FbaO$<9<'jNTmI!32&kWnNJ].$*.nge_c;9e7#"OtEp+(Hs&-
%R`^D#Q#;aq,;1Wd]fOE3@UJu5:HF!:&R/;Q_bkcRgFPN^K8HH[I8oX'13^B1p;B+HaBZ:ASeNHNG>.UB\>T.aMXii_UUhQ'4fj-b
%0r:cc3TLR2\h0n@-JpqS$(HKPS9-)`T3>28.M6KL[H6%jZc"n?H4[u3IHY04:b&IIV!THo?ARlP8V?50;2&[rpL(,^@,1:>0rtRX
%0`2jI]f3+E"s^d_cAMjFJ^a$!D;]cS*gKa]2]PNHfFXB9!jb(VN<qgl#9NK=<GX(MRCh$dOh3%n"E7IY^BPt,gNuZg=jOIp-CA<p
%iO$OH0^[_5%Isf`k-u\[oo7NFm86qd6XDVZ3ll4#_ht)flI51>T-TIF>t'j16an?VlR@AWMEYE8AMh]DIG\2VUm7IcgipM`_q6?I
%J`_J7P9cXKY*0$VJZN%%Sf;I8p`8nT-XQ@"Ot^BO11%_,2gh\frojhW-1p$\0Huas4^c`fg5kfHd(hbEitt5`8m<Se+m3a_n)V./
%SE!>bjo@m$rdInM?67Qeo1D(.N@CFJmkrDs`pIYVj%r9O`:$5j5nrL5OD7FLK0XFiU=siLFFTrj/rfT*Tq-prP<QafCh\-:cLU6<
%P#6Z<%7<SL7spsH4rB4Edo""#^@9#\?@HF`eop_Br0^+tDgq!ofNa#&#Z!eUM54[ErFJ@&j*)q:)J)*fKk\5*.3.d+&kDHu<@Y+h
%Et*FKRi28F5+(6@k/Qa7*qF*bWHe3.iV'HRC%ebhaVEOOo$?jGbsB%iVB.PI=!i<6,CBZ=M_uXpDT5G(]:Eh!(jU$_"LfX;'9#Or
%c!WBBEuGIRIuaV)0QR.hNj4j[0UsQs[hXR''3=A_a6=c>r$+MuZ3o#.2_Bd1/,/+TM>FXL'8qqIj5`_4Hr.K%8N000n`PB!3;[eu
%GUhP."62AT!E;5L6)1JC_13cCPWMT/8F::A0F)HZDjOg_fupkYD/$c+IB2D3N(5+)>RuR]6DXLH@&QN5K$ilB>qh_';IhUkhmHiK
%pW-5%K?'(."pi=>DXb+Td.\i%2ecf+`kg8t!je(n03G6i#SUe3E9$^fAq=t=B)f,Dls"d`2gX^8cDW^(%2il9E"h?8#PR@B'S9q=
%h_9/BYL.-7mg(6`0i]QO)5!t"7M'WnRqggeleCXrrN#46p#(K&h&B8#=PncZbWi<Sf!$36F;s`tH`[+\kOHRJj-;dYl[ta%.fXmr
%A&Z6hL,b]@Er->Kq6.KV6gi_N/,/g(Q)MB;>HI.e('a^r`LGZk]AZYag3pd<X0AjO<R#-HY^TF1NMfu$lP`>ef+=:D7lr)XfRkc<
%?bYiXK(Wkka%YGIS"=_+"=p]fUM-7N7mJkVAPOlina>bn`h'_no6_CZEe>6aHJ:)5@cb4glOt<))EA=C5[5DED/\5j?nF6irf4eJ
%@NB)g=XU;LCq.=Qj1p,Rqs0sGNjq6X_`F68cs+,U_rk)_XPs-MNFAoE`]UXJ^XFRX*\7![9U3osYAD7j?KriG\;S53*S*)1'gCiO
%3Xf*BfKR'7b"c%bWdMMMA5D0BHYVjoITH]Si_Wb`%#Dqcj`d!2O3s$m/-#KF]ofQ8?[bToXA9_6EfsrFl^e81TGapTs87aZmZ8ZL
%Xhn$$[3\>EM=]_2_[5WJFkOGRl=l;uRYAgq4&9KDn.'<?<mOpr&Sn5eST/gT;/SkY1IotjWk3Gl"g$0E[8MGhD6_qpPE$m=RWK/A
%,$4ljlu8RmW4TO0N'5`aEp#%h]K!:;H69iT[_mt@)A1k>6g5$b,!U:MVoZ]D4k>N)kr[PQ$e]!;D60?CXCT#4*UZ_']6!7fp#V9]
%HcpI'=>.SX_`^ih(9E=H+T>aj6B4H?Isg"/gLK%M#"PH:eIQ*ucNqiCEthqVm,OBl+AVl=2:RlYh^MZWP'[tG^[GWM7'M7H&3;_/
%Fn[AU)GH$E254SL1lBf6i`hb?o,GJk1q"%-GVQ!.XHUQ+75&OUS+!ZP0X$\iWEE)';oRa5$./b4fW8E7$LUG.nI`!kVH1BT&<G\k
%=:aZ&W!2L5mBe2j$MNtt;B]-K)VN?'oRfhddR:1d%$C#2Qg]^HrZ5H1%9b2C)AU0T.XT^PHjqjQPIA<gR'".^:SNkV_jQ-CfB)>K
%p.53EX#d6&dIFPHiQeINWQIs&h;rG<UM9I&A*EMlpX?\K3O]lIrd$U'q0)a@]h9[]7'il^<QmIQXkaC<*P[U]&Op'Eb)\IH%<ZkF
%ri-]>X9(iHIHIHQ?gfqW2XS4n7(X7A68$ND^C&7nTD7TRo@MTdd%u;,ZPD=`gk3f%cSru9/$.s&N;dscBJaoLXZJI+Lp_/l^ZL\!
%k=.<),/Xn\RpZ/ldZ.[5gV^k>j4E4436rP"p-,c_fK@LXW*^KE4VqY-6I5RPBQ:jbU"gKLc1s8sO;[KS%m_/*pD#hi^WDl`:rUC9
%W"jdFHnKko?eCH8X+eH1[?cUQ\#8_"q$NY9SUB\\V:<pV323*22Kgo)>'Hl'igk_A0$NF'&bPhVNChHUesW(]X/KiTTr2B;CM&4T
%+hfMTV!.&*R]Og0H(r%U%d:eE(Cju]p:_PJd,-;+&M*Bn/6HJ]O<>;sd*m8__#!icL_]:1+mY(%4WQ=G)i#q[TVqC\@P)e`=SIH[
%7]]j;dn&FJShXViD/\I.-3KCXqU_sW-ER+]>5qlTXPE6E1Y24s4_D,`&[@J>@/W/p"fDp5rso@9O7*jcJB!DT]I>gM7I/h3.i8Cs
%8(=*6hT4^@7-'944(kX.8snda'>I#DhkH!j[!*(R@0).`CnC2pO8@L%AaSapL,N$XAsTS\0TO$gJj^plhB<$MK/B!,q'")N*)\.T
%(fhud6.oLu1Qc.bn09%2bA1Fr&oE9,)dTIoY5E/s2],oCSUfT)(dBD]e.s&.BV5aB=&?2^L>d5M`?:YcQ?_7D=tE%KM@rP2'd.YA
%Df+`'1;cqh7Z:oQCb0QeW"3/sqNYia,)2oB\bMLjfYS^L)M.U@b#o`=%,eZ]f/Io6's!P+;Ep?oDCIdok6&D%%Xfgd?2K:YJ<&F5
%&cD08N51fJKS8iMU#MI\iJgea5O&a_h7G!Y1hgVY89Qe;<q.(OrpZAoSTT>jblM;F1npZ")nd/Z&YeCP@h+@\oUJBCqNgR3TpHLY
%3Z81UpugKARP16Sd)FUV=XUm+!]<2lV.2\7Llbr&gq$A_IC-?aa]\].e]u4,(T!He$Pd#(HY+it_KH\`ACus1CIT?i,81No*nP>k
%4!QRN,[JBtARfSCHq!\,:L(L&52?6&Iid"Y(NL;;[j(E)c(/#0\=7`c+Zc+/7;'Qf3'Q5P4%rqPHdV\"GFQ[:rVd8"oM?2Z[rI\Z
%[M9R^iVDJ++\IJ77lb1Ybl<'Aa(Jq,9bj,LI2aaWq#?>+Sp;haD0l0.05V[8A(55![#*j1$M,7-a41K]"$F$=R+tX2e.*1$!H2We
%!N`Jk_e&p#\P&R]Gk_ug"uCB95Xg0>Ua"lTU(>ef3_N!YfqZ:\^@".bb*3eGe2%M2de0<:ToIEZ-u!]@TBTR4h6lA!qYE5436_0L
%+FG<XNQ!r"R24K,1egWrd5oaaOR.5E.j>XB\'">Lm^m"J,^>c@Q=]G20l^R"*%0E+8Efs*<1dU<\@($j5)lSJ<GTq/CQC$b\?'su
%93QOC4ccu<Gk;<!7_7\jlWr@\_WthEm0l/6,EN?D2ika6LWQ[/k"o3VS`k24>n'<F%"7;I$-g:nGB#]@7&MU<NERdYk`ld?=WPoB
%-&JM#e-`fVB"csFA#cq80A>Y86F8a(B.!B"RejF7*Hg)s0^.-bFqE!GA+QG0P^#q52s54Z$.6iNXY#)N>OrNLgmr;_S[JfT.&m2p
%lbek#d5W#'0Ud2iR@^`4hu[(uBG[klYpUS*9R\D[1mcKiXNlNG_C@tF72B>`e^l0[Rs"@j`4R,d7BrO<raXUCKT^X,.T@79YWq:[
%rI#]9:>@j-6).rBFWfT9M8]_oEkkCIU*"oJ]CkL"mb<$3c@*!s!kYsm:K7DGK:dEh3R)H'`Xts4gImT(NXL6,Y_RG1o*#G=UAC5N
%,&Lmt#>>)MC^nZI6IkV1RmsEkoD:43jMSfV#8*>2F:a(e/"mdBa:Y9tLHg*q#eM<Ok]$W]Yg]L[Mm0OWal1b(NO+U5=bA0:;mW\]
%&9M;=;kZoYGI0_coD0H)<o`%#@%[WLPrQ.7f'&ZnmJFj,a+Z?%i#2uC$\\.IXXgg(\E(/M>:]oE@;9sI(DmdX!=ns;*W9iI6)%;`
%:[CUhj0If9Rs$:R1e4dukk:J^![Nk;GfO,>QpMEt1HVb/fnOJ?nB>]_HX^qJZe<7Nn:m:bGa!&jjq8SR=;RN[OGBh$*C"@KfQ;/\
%WA(j3$KPfDAmQ*eBe;E#DF/_q]1"BrmUn9no3/ZNOK<5j;fpAl'r8!bk2gMF<M8%I8/oAMD7n-KZ^I*)OeI2k\[^On*stlbKk30j
%B5n:W#p?8/n6Bd<Zu#Ack@(AMB14f+nqWl9@pa9:,>*m@%OTA7k_JG.>9"E-e`R,ac[-Q%g(,<&bkmC>mFD"4\Vd+%'Rbbm!bghH
%%K]()#W4PUT!`MARX(7IalIDmAe(d"NcE-LM.0W3?%PU8M`C'pEAE2:/[PABHr#F(kI!-MG7#@i=mbP)FIsN4VR`aN],St/2^m.^
%S"_q[2(qcqU->N4/E!u)j_#'</>V*di&sE-pi'R;BK,^*'jTUGHFTMQ]@gp"R(O/I2h[o?2\/[T"QWLnagQ^MT]NT9*GuNn/Uc+!
%c*b7tA8`QW-dBcZ<]J@2")2\c$r,uF]A_GAqSSla<pol5]#p)Oq46p+?!Nn"%lNTqB*(@R50jU]g\_?%_lM:=.IJ+Pq!qneN96:<
%H#C^aREnPY@':4lp/\rFC%D>qFfN:[`>Z'+J6Y5*3P&]_dq$3rlt3G*U%sRm):*?5Y)b6NZg/j#q=MAnaK<qf#WaQOXAbK66-/^(
%pD(r^p$[,j@trH[XcN/J`dD6k`s%E#HbYO4DjWP%EEm6]6U8!/rrU@^!1M[=[t@#5[H6"1m#Ki[BKQ^h@su"6Pt1#VdHKRnf#O`6
%qY7;Q5sniYl@%a!4rVaYq&',67eVke)j84T)6F?R17_knH,/.<g6sghZu7r0BO<qKdjjDgi<Oo,@h$4,VSjR4UcT6,/dM#sjDGIR
%*.tSWh4[Z`>[lQ]a7UuFL"IsnC%XANXij[R9U7+XR`9S0;.=W/%C++0;l\o#SB'#:F2qP&L+5&nNkm`]bi:16p&_UH[X[*+ILm3A
%<`r9RV(qZ_LN_<P0McB;f1B<NC=_fL4_[$Ri9U]9fYU^^/8Sa'BYVSs(%K)]W/,=-a!c4[J4=?>[mb<XbY`bNWt\'B#Oh8^o==&T
%iTdt:F?]G(4sSI@9'6Sok40*_I22!oN`\k*T0YT+9BUBBj]g24(RIeXF2U[kq:5t"CJ1Mq\``Oc),h?<8`t0@jYOp\Q:U1[YICB>
%(,)6(kFTjE1\;%&q:lKgS+f(48E[<!J@7#f2CItfZ3Na8kLaJ;3G0O!7a'q*c"FLtqil;#C"a]PhJ`nK3H&]GoMJb66ZOM=lqJr7
%#IpF2!'6Z%gI/bI<HUOH[UE>U[G,tC;r#TTs6Q^2k`3E*5k9ZdWjp4=Pa?iBcnn;6&UGH?F;Wu*.C3.@er+n7Wp`.9g-XO==IAS!
%JM)/Wn]p%`nu5>W];FE0A"+!P10QG.pf8Z)>;N)QqDi"o57`h&T[*VCGISLppZNika`_V-/aug5@G6(+h:WhpQp#EQR<H'\q%B_I
%KkYa(8%'H`6[+U,5AfQS;TRWQ-&M^[kEA"lHli6:QP/`CS$ag4,qmm+Q_Gl?ce(CJioV5MVR0ZM:O4n]G^/;_2OIjDl'0a!J8KfR
%kiHj5^e^WJ*,+D^'kLm4rVn-49A::u3mPXqP.J/"5+7WZVj_*j[b+hFKcUJfkK,/HHK<s+#D[^!aaB].HLfqiedPKL2B;Ui:S2rD
%`,cjA;9sse*7qQf6LttJbr#9f6bAkY)67fgB^QZoQp<*@is*d,U'?)fPIFToR`Ak9H%p$sZ*OS\>]s!\+I^>f%IP68j2IJ;R@.T7
%Xm%pXLGqFEV3dT3a\3.EVjH$t_!oM$,665!>ULBS?8/N'B_'&&&Ms1NlRq@LrP;u*J'c!XB%,Jj6p(*C'[?[mATR3dQ&@i^$`*-g
%2RMX@B>uPalt/W*;%$d;SX1,],,qW,2rf6G-g]*ahH;co%*Ad0j<a>C4tKAILiq$c:!*$J9\-VZ0V*9E*/kCiLA"/hnjq7d.j2g:
%[+WD]$l,>bq"a9`f81XeG=gIPEKkmB:6thtkD[1FcMXKD3=h*@D"GVtk/l#?3=4rt/\Or$7;q7H'ut4:'tnT_p9RBr?\h\<\[X9J
%1.Q98c/_[U*5+B*&\YGgRT"gbAnlbA!/EiJoM4RF&@.o5>5%Q96ofW?#]6I&S[er;l[/>#Q]Bp117TLS0tY=e7m<ICk`,*`a)!rp
%ZI'VS-tp;nDaE+HrXP';-O?9s,ma<2Vuh^\3C%tZ\sc`"@h3LeS<)q025J@LUolY(%,=!Wbl)@2P'l6;Wu7K\GjUpT,+Z:T/O)5$
%-#>P,4:e3aY(OFu6`=8$Aq.]E:AiNXX_7J2?/=RD0ZDAqJO%g3MF\[n#qV\23rf^&86d@bcZ0dTA@!F`?1YdSd,0;AHY/j`O21^=
%mP:2U1V6M)Eo*fPo9SAms-\-RLLF8LR>5I'*m\+=1J^4skQB2kB62ZuWJaD[WR(4YjBjsJcIHOhXdRVtk/n@*-So\clctaFAEFcl
%`gE:Zo@T`)bWGtG@rgE=qa1+HgR&f&>FYNRV6e^/=`CE&H?i01R/QEk;T@LOH[XAdc%\Z8'V<LfE&a7P!%iWtL()&`S@d'\o)P6V
%$@pgI8HdD?mT1^fJfp!f2eoKX5H?n1%VISKTF?P%j&gmtH1X9HTu7*s'<2g4$>g5=!jn67j./UU(GjU(k&WQ;%]2:im#bl?;27Jk
%ECgsJ#3;>A\`S%XL^[sR.lfHH('1PWn<ZG/2fKe&NN[m+Nm3!mQt]U+27(mCH#*DfYf\W6X%AJNf0-9anXh("YHo`QP,6bjpPrte
%NI-h)I9lE+p#DGcHbY^hg&"bqakj3N8bRTZ8[A)68[=?m?$f#Uo!9-<RuTaIkEjt%8M'FGF3ujWK\a5CBYKQ$Xs,=@\?*etGn/$O
%E_1O4F#.1oXl#qe[6ORKpe*!rR>L(Hb?lYHccc&f;,Z8>iRLBoDQP05:HrB`k2i#XGUMVKZP_e6#qa3!n+gk97siq_p3Y?[Qp8Q.
%XrSU0DOf!g+gdNI[il\eNNoZK)1A?_fu>g\GGBQLANW07EKQCF%V4>M.*REff`R[]Xh[+Tf&Jk#*I$&Q(uN`Ij(cIA]DRukB/&&S
%ILep9hMT-_Q@0-1:Qra?3&l3]m88=,*I]!MDokKV2gP=PYDOYc[40q'NSH"5Qr;=$@sZ>nStJ):MHa^k8c,m,rUk$>m'ehufl&_G
%Ldd;NA&9/@B0NL>YR2<g\&7X?dh@%'DTR@fp!U<RZ=!L'lA0SP5(.@\,l>")P/;6>"'/(Kh8YeWqpa1Z[*7uNms3/,foOm9FMnM#
%5&a9jUIn,C_LcpToM4@>O*Pe=J9+HY)fs;,bE7jt24%i<Hl)P#.BtViL:+<s_7F5Pp)B!01I4O4_5#Uqbquh+;T2F\;^Q!5s4$=:
%lD_T6CXon.YO;cqf_BkF5$WEbj725OK`RJ3'GI*FZ5+rjNTc%-DeCUqSR7:1*UWOqc@O4mdrW@od4(>o/r;\l4!fY)Q*3-n$uXR9
%@DSJ3R6I%@A+((:Ma+CXB,DQi`%-.?cgGX5Z`1Y]WOu#9qE&>B0?*<=3b:3^#<gq\>Ol>g,:M#9R_7mm@&dkno0!t6KZ`)[FN`]e
%"b1r`([8<Ib7j;s2tkAP`9%,APP0AmB(fKsReFP:aqFU<\u6OV.no<9Zc)NrQ'EZhfu:uO!lW8-p?@4Y6e,tT(MPLdfOoE.K^=&g
%2R1R\X3\G`ZBE/?Ku2[;-hc6hEX%8)<FVS+<hHGs<gqZR2[MrbZ_GB%47@L?.Cjir`'1enOfaGi-MH,(p%c[2R5_Cs`oOsWSZ>NP
%Z^YCX\A3-AI3s7h=ad0OSa2a/40d,M.S=p9e5mGfQe5q0LSg7aX%DZabNcDmTU&4:ZNFc$X1k=H5**tJ<@.@lAb@WJ1f%V$/u$US
%f]Pu9PpH&PE?%nXT=V,+0X8r!^.bfWeKjkA!RNc`=-hKOQdo_u#&:-U5._LcHP^n*`'1f7^,>es=-lMFZ^W81e(r1op=X$M\bhs+
%-2-#S@s0)Hl,5dGOCiD"T-pnigaCrKT@RV<ABd:^o/^d-bWb%.S9I^g]28R@+.P^m3+cM4fB4tNI)"ZRB*S/g3TbV+ch"7EmoTGb
%P%r%c-bD1Dr^c-fD-/FlEd?NeG=9?^:WhWAJ(_OWq5.NE;QV!jnP(K/X2)/>2Tc68j[ZP'or5gApf04ArFpGC%OP5C#ueGupHAJ/
%bnbU&DjG'[n,FtOY8\P_>B@P'gde0nfAh@P;%E0rhi`P[hC6R(=>mk0qscn#kFn5kr(f?#jmi>B?eRK:<NJ2EYi0Qj@BmlQ9WP)O
%qgW@1]c[:GHahh!28HFmnsoAp^u@?qm,>)1,9_8(b?f=taNp/:rXXY9FZ]OU7o#].nO>a@]4']cc"gLHdn589^UST7]B,QJWuW;T
%7@SKCgBb6Ce>rm-1$R(U&rtk6VY^0"EMq%i%E5qcVgA<CHk058oIYA7ri3HMUK.A3Kh&8JH:pJPMZe56bPUJ0]UUdhQn03:!X-m,
%Z:][5Z#8pPW_T1:,'.nI55^M/+4s[X5M#rdk"g-rbkBk`>mMNeX1[:#TXe[HXQfPPIM,t%4r'PA[Uaga`(88+2WO,&+G7#bG%=h6
%qR56=NHp((pJ!uH.27!s"h`#*`kZo`0l#%p4D&9@hVe)&\E!A)p;lT*_E2h@oAYUoo;5@:+!81%`BH#-ZANE+#U!Ii^31dY"jjmA
%?/rY[`NJHD8>[h+2gt,=iZ63>%1Q&%-1@F^i_pochu2$!lM_II(3oT"+ZcPdrO7BCVO_(;"fAl'GQ7T.l77,RDbY^HE-Z_NIeRbt
%rW`QBn[P]uqTRE<2?D,-hYf7%LRnV%]^Ph[*p<']m9<r4nSsD@VbXj23nr9-C%n[Op:[s,]aak1rZ@r*s(\[hkTK<n7TY]=$W-KR
%fA\0hA3`=!E;`V*';/pCI0l,qf=UG4bJ)"u"C4eicC]Ob5+7a,.!#`J)9r`gP"-A@Zf<"tcA>M\b??CVo,O0Z7&p"/bhOcKp&RF"
%o^6jrq7XZdTZs*"j[(e4281H^k$<'MhpXlJ4nqRD;B6:?h-0GqTrQSCH+1>>a/Claep?+]%ZA`EHHKrGX*Y9H;,8^Hh,p((ml'q0
%j*j7;_g'n\/+;&8'P*5.[:Z/u#]6lT?q>A$!C?BHM#2(S^BXmiC]LU9iL+nJn+84%(oG:B^i$7umoHp[nK;a]Ck"3/YmE-b._'\g
%VFeWIVAN?dOnVm.\6$i\ptM'sB6a-q;t5Vb;-A\b#!^,a)34EZ1Uocs&)nn<ifoS$k/[LF2?uV0b%F9&,.URE`obO,e,+Wtcg\V.
%B-C0LS8`1cE@pYZp"AuL;^14j$eB?[GJo@i:bIeM28n(1^l;]0qVm_akE;7"\3;Z1Y:,1<NQHJ)FSF@T&uZIhn*#4=k`cVAS:q5^
%JB4A&WO4&s^)fA457/?65Ol@?'@saT<JdWAhuBHLN`\g3cdN=nXML54iRSJhTKsblg_(2p[OkF91)_J6a_todkd9GR:XRO(e]SED
%&'4FeK:n9OUZq[%QE$Y?KbF\TEt1MO@V?eh=Vapps6B0pZM^iX4Q9a'A?WFgQ:pd\!j9^/lSb:)1m2qZdF%EOa0TZ4+$K4?0k]ka
%ht^89%W;)jR-&/<p+5P-E@2mZQ1b!777joIH*5\IHJCUf\%L/L_COZHFMn[=!iLc,fl!rK@*g8+`ripgo1O>35,CSAk1uuTF![B0
%bO`l9ILL&$:RAQakAY&e1O4rOXf?/*Z0B<M9`E9<OkZUk=P0)"=0UP=bA;c7Pg*][IJL_4>eW"D4RFjYS3IE?)c+@>3C!DZSdu8K
%,LXT&_Kf&mkI=gLEV0IgXQodV!/6s*Hjn6f6fqPnn*GIH-#uK0C[9`AZDk#l38Pi9Y:!UZ-AH?m,JZhJSF8P2047V^gEW*[^*Idp
%,s6MuTiI];,?Q/90&c`&Z+lbZ%&\ub&^GY8g5LC,A]G`6k0M;X(j-VE3?,kYad&A9SiWuoIS=m*[nQ)E2D<Iu*"qf>8T([^\$U'h
%P8h"#r9#AP56,9r-%"(#d&R&p,YZ>ca';r&Sp-Q_[]c8U8i3_fUA9W-Yld$7dCe=hSn".NXgV&^2Y0&1ZcB])6\C8e[V/:-hg@gY
%[)GrVrT5=;%D@!Yikf^!q,.iBpqSd0d:.7DS!)to+452[CAsGc^\N\O"#0>D,l/gdEV3QZ-#o5Dm.1fp4D@#/M8!4qk:JgjPXM?0
%Zf?(RXO+ass-\o_3\n'4o%9In'fn>r.t4SH.r;\h`sT4kUAs#h$I._kJ(eCdI_p7YGc]7B@qA)i'b[6,\,MR5.l8,?IS&X5=3KFi
%^=?u7#7pdhC:3\dLDe^q%LjdaQ@&,J4]LgAU$$ppcu*g'\CJami1YK'C!HHSX8*f!F<&_$DRIn64Bsr)e),e5^()VGs59T%i&7bZ
%Y0##$/cXb&qeLt&o-BPPIO<J]JQhib6^tn0;NEAU"S6.:qL!&&2:ae^K832.J:=,dnG2#$;MS]Z5BuC\mhtb;g<SUCi9mchRM^@=
%#7oWl5!(iCTa)+k993<P_*cC;.a)U_/pd`m4a=KlZ"r5-*kH!$Y,rlm?[ao\/Lu'_Sp(MXJ+V?3U2.:E%ujCtU]5M,?4/o@k^JP0
%D>((;CNcqs#7oX=3S>0M_1RO2/f<QS<BPN);UbWQ6e`'l734S@P6gQ9GWWl\gf#hA*^"PR'A&c&j&V:_OjRJsoOE%?HLT;[\c^hn
%_!AhS3Sl2i535+OGjTHehRk_fiPEFB;b<d=*^$f^U'maP:>nMM*]e.faZH?a0(.-u*kL5kZ=\E<I>J1>rMIW;8fhhV47ps8^)oIB
%n6!Q?%j!bX7n-H79*=bTqP^<MlhA4_G:77L4,#1UJXUlOcle:5`0eLc4IdWNAsil7h;.Le,Oofsf$]ajH0rtp`Ut1nefR"r2h"^b
%at#R+o>*e$f1djsi*jXu[6nFpFf>TVkKLnNoYEohf+&T[d5CORTfEU#:"@jilH;A9kanemgko5!_*drNR&i>MnDL!0:#"80%EmIG
%%j&</pZgNn-XQUrnBg"'=2f7F#7h83o6K87Ta)*6I8B#bMs#NXcnheG2%Lb.(8LhDLW#B_`Iis6Y8n5lG81W0\gQ`'gM(^mGj'29
%:F=eQ!me$Q*R8TV3';HL^,)Io;6poskC\OJJnfPtd)W[lIh*U3Zc1W?><\>\_cedA_/^U>5+NA4[<HW(DJ%_$Ca-aBD@tiqoDUd<
%gZDA!/.o,!1$&#4eMScU2!)(hbHdR;Lp3qcJ=;792:/=;EEFq'ml1mgDGQ2b\bdM6<JO23G:>`p*AG%JmH\71\CDD+i(f.Z"nr5O
%lQDCkP,n9)h,H"s3>`cjDpQ.@W8bdXV+Skh&QO.*4f6Aakm^W)F3dhIq5HrVmu:gV28-n+eb?s$Fo1!.;0P,#0C#],s&+'YdnT-,
%YYh'"07V9Gf1G=[H9[8[;;$?`h8#*M\)#Hq,.]QKB4$A?Gd)TOR\hFXj,IKM*FgUVWKM#m3Om3;42LOCg_M,hl9!GE`naQFZe6G>
%9A9mLI^/KA9dSA+Vp/nb<k@#,>jk>&Rf6&*s0Zo!]bI5NAc!FD-!\:i]P)96H&Z`JG0Y#^1LQsXN;9WgSSg2"mW-pV#;Rg.Crd!B
%iVi^gb*H@e+u%qllJk!Km69*?]#d6Bl7bSjCA0$S]J6o7N>)%<5XWt([<0r&p`LV(YB@"k)3VtuGC25r)5ONR_d^m6d\;Xsk$Vl,
%@V#X/><SBHd^ZDh6]A_1dM*c6I?<>&NLW3Q#G[-s]933=Pk)Z3mSO"+J^4btU071,HadQC#N^@Ocne/u11/_kTJFfah;>u$$^%Q*
%.<KrX!^:AfV=_M!Hj8$taJ0WYM96&#nrJd/lrmuqQSJIW=7e4s]VB7Ur]#Rl)g3rZKMMsrn&ah8Y_5O9c\V.)4r2%#@p63`\9Rae
%N88bf&+>7`I&A$`WHa.*C&NE*Mf^A3;ST(%oP\jA/[_d23/ZoA@(iUOe.8CCiPY!Rm7@1PThK-Y>puUoEO`VMeE*I0:-KofE[e#<
%+LX1m<T<R)&MIKhGb&--h+[Mh`:5851'i7<<6QVe^pqOBYuV!VLjf'i,cW>[WLQ-UAX++366>]K5Aqt"h_b7EiL^W9;"h-EO"&gO
%S':;4CmVYl<;c9>9IQRUdqK!Oj(41B@<2`5Od=jIg\ELrFIDGA2A-5&,a4/?<<d$pii3@eJ@p^l"*,16/YsMu,TqfqK2b$]]:JrB
%Iu.gUCb=DV-W7qET(h)P2Vr:7FH4e7i!>^O`bJ3@@@Z:G7H^!uaCpNKHGpg^0r.\M'8^nohs0NO;=YY;^:G]lQ@!)%;=#BUU%V9`
%$__k-K,-/QarX8'AN;_.NrmrOectVJoF-FZ6A8PK7cQRSGU#I"\G*TidVf72i[J4A&DtK&LK(N?mjjoR.IG5^U5b()$XWFbH-/6<
%!3h7Q`B'\C\dC/\gbE(O`*IhQ^aS_mV@\.c;fVdZ;CXHbW-42rA7^P%Hjghf#=YPTcZU%1OtXfAUR:rcKndLQ]LRJa8Mr%je-$YU
%76Q_fMe4)C0[-$D)1=2Vr8bHTr=U+gk)n+"Vu$Q'C0f9!9Zn3%b`Ck<4W7oj"66ruPNam+D2tZJqID.hR5ub^hO;S3L;!EMi#_Cn
%,Ad)6r`C'(_'=`^3+AVMI8:K[#W(qiX[DB4mW!@/m3)Xbs*]he%INJLSO38!-6BAi))L`*a\Q4b)/P%EIS_f3\>4@4T3[5<2\W9B
%B=`FUL9YNI&a9u=-5p$Zo:(N@F[uom-Brmg9i6%2]Y9st/5r[QIK9k[_4K'>"=">6O4'=(K9Fg]\5%Grk=Ei/Ob7m+F'Bn:?b@%D
%AV`K>p'Ba=]3hu@E>7kHp-FE$msbmG!)7KRVV@Q^W9&@Y^ljg%cqa=QW-IPiL`[[K_a1oq_0dM7eqQ/[l,OC:>?6*s,ITms.el9L
%86<ogh9b,%f4<>#]D@4!g@YjkjY5SCZ)c;Bf[pmVFt_>q'27"F*.Q=&D+JTb+^*Y)s%*Vj\'[sWoR(F=3&!JV6EUER@2-^]VgC_(
%g<:-/+,3k(EP<,&pqj($?9g/bAXP*hSs(NFCjJj\.[0C9R1.8!11G8T4rL:8G?"Vl3c)CBUTOZS7:e(/!2I7!]=1`e5S]%`F5t[Z
%(Ds,J`5b+K!-N0k@,thFjT]apMX(79Necjc'Tdo;Eahg$1GdIAr)VIYSd&!@d)t_r:_dN:'bB'6c&VI)ol't8G9!J/geC9t:M9o5
%q)G;46;mb#lBQG*]5!tPBt`@=G>\,Xapo1^3lL)#BmKT<Ce.`q)WItB#,g^"44+bp:p??OU_l\e]ER3O[s/:S>m$%)d=/2Q3lSk6
%lBJCV/\iK!1s2(UP'@OONi)H6;SO0dIN_%#*dlcm-jt7t2ds+1&eSTg&C]@;arsgZn?u6BX=dfaNZ2"2`?ou*2RK(>;2u"d)J/<U
%25;X^MqZu\:s@Jd,MH=0Z:q4(q#G2#?m7l7fFCeggM#e*gGH0XR?.6sCXZDr";IC1FI0cth]&hL%*FJ#Du$V]Q:6YfV'BpO*)gMc
%04`,h0YJK:[oo`(L:c!<kKu3?C#:5Jq4((hF-+Z7"i1HO<Ch6&;56Js*/_jt!_qGA,9`;>*qN6?A*$1b2)c!iYaA`4f^/KZ$:Z]2
%Qk/mABu]g2')OA-08)-BdrcPCeO2%'mfB?oZ*oCAdC^4E^s1%>%no48&NZNi+7?!>J0nG&Sf9Fm<:-<n@U;'lRtiB\U%<A"SY\NV
%Wr:',`m8!P0UnYtQXiT"0AE=C1ib/\psmG[haI35`u$u^$#jMNl%[T`eqk#%;[cQL2I!foQD18[c"[!L9VPYI]'bjJj(M$"HfXs@
%VXZO<Nt6.AJ<1!>e<&/hd7NO6\Or[85=^"]A$;7"euE#r48_sA3X]fpFJL\;1I_!PF,[m-0ljmQ'0IQ<5]@;cAqi4_$i"Qh8FD?K
%JKd0e\hS#dOehkJkjp.!c!8N]Z6DES;1-JRPopAF*b%k'Y(]Ob:emHtY\U*FM^okcs([IIe7nk3@0uqTF0,UECqckqq!Dg*+Grp8
%%YLi0"p/Jn_]Z":JLG3%_]Z":JWPN,DIJXW`'B-aE=7E#-3g38Jasnh=<n)[c6KP"K<-C(@L7/$L-_,_JY8:2T=0qHUZr>W#FMt'
%=VZ-\hS0sW]E.>s.WKA\LHk+0G\?ti>@nU"'H7jX5JKdqX:e$TlmWOK]r&FW!F7k*P#PP+cAs2rE"O#E;6nj5-3e(e`(2/)0#,As
%A1=nCe30[ba1Z)p=++<OFqu8W9h2/]LJ$g;4f'^Ee^2G_9%bf$s3>'X[1i?uLoV,C$AKWN^2\lGoo(fY!eX8KQMJ23TEASH*0:KD
%qsIdrL@(nTrs$&m66["4YTa`jH(GPbDl-fSF?/W6G5;59BBcfgin5!6^?rB6V3*%RUjl)GKBBNgod>;i+J,^t:JMOM6#$m5;BV\P
%_DD'H->QH?asWnWZlf5p%E*UZC<[TbR<lX'^&)^.50g@<fgq`a9cqf-M8D_tMRUP=o#EDe7.d$.$]$6p/$tN%TAtp#K6j4c4_Ce3
%Z^kOl(P?A@_/M3=KgG9BN1!b"U#Rkf#"p"Ka&'54b^3iS/KKWFT8^">T,+"jdKA`Zrq1Bn\2\fkIm4ctKEW4J4gI_`aOCQN_f4U/
%Y?FP9<.BbTA;V@+6a20#Ge;qpS'!PMI8)3KFkMHp[2W$GFijmC(n4?dgE_I=ofc6+$>iW$2`a?E&6/9O0+n<*P?TD%&u[%)Jri*U
%8;p;\<f3)@=pa^r7^h.KHIperfD$LLWG<Tm`Xe>R;u7+`IWuMPnj,`d(,p[]k!-7C(4k,%A\h2d)q%.B,%CK>agJJdjQ.I_]V$X4
%-s89UZ%X7R"YInH(gHdu[1RZD1Q98c<^aL/.Ade"*]Y=`4-IkP!W$9WE=s6[`J!@fQ7-^Af=(l8??Nfn6.R29`77D,PX?OcAtTU>
%H[(e+D=Cdhp:6O'C:5XHZ]eeIPTd3c&8;F\>-^S;bjKIbh]8L54@T91J@r$)ki0][Xu<-IlVle!>FfYTMGL?)<4t.mB4I_0nbC,(
%VI5D$dHI>Y*/YZXgd_Y[RDO(fSacNdC6.0QnAZtJ[I.aO?+D=hg]2h6jkn9P6Sp/ZeLoT'"e^_8]F'2X2@]u2dHfUk.Cj^STs<.\
%rhpP"F2)ohnO]mHq;(C;R%;HI+foJgChWP&Bho=&=MA@TXKS7ZeMjR1\bj?[M;cfK\g`M)doJLX&P#7Kj^iEbHS@9JI$Gql0spPQ
%Y,XuhEdK9B`WqE1jA&Q#i3)Ij)scnGe?e7%L3C5)rH@h-`UgRHK:$r6&\Bsd+`*nkU9[\4)($`I<L"]mK8b&!SH&B+[P5>).gPC8
%RjVR39^c_)p`*SBXN-PG#d@<KqTa3uYOBc(+sP#9)NW6iW:rNMnc&oTs%d>+ImW2q',pmh&/me#X_F+^/SU0U>N2)m^T90XDMahk
%W+Cp-G>$_MAdMu&h%E4^?mWh&]-XV5pm*kYh(A.SC[1Vf`jiW,Y!f=V2oaZ*E=D@h@>s5m_lMrF>Rm_E;gfDD<5Pen<"p-mq/\%R
%LK"8uC<ifg+&\43RCShd_(\_)h3/M@IP:D!`Y]7$Da@6#RS8L4$NH]]5!/^8rGN!iF?1QE9>SC<;bRC/-4sX1*rb*&[*i(R,?/JM
%I47GM"tF;S]Z7@R8YOV'F9_^?kjLcoPWbO<DGLUj<'[Vb%^jc:&G1g*L[+ACQ\;!fZ)@&+Io(\Ircn3Rm>i^qEX=s>1mLa2>_%]/
%@Y/*`6a7oSF%P_)/BQm9n4S?H.6`TRkbLHi!Y9Ei096,6rf)Du_Je=.p/cbPS-PWmWBb5.^4EK/-eT=n9*SKV&`Z<G$1u_6=t\l\
%^e@@6SeNj[--?B8r'F!mSdmT^*?V$ZOb5tT`ac4I,R;j&!D8"^`?c/uXHO30)G9cASP1eZ6QsHh1cFE(!mb:4+i]BGliIj\'/ZgJ
%A?[5:K4\)A4N3C;Q;dp5N0&PkU^YS2Ai(n)UkI`1XVjLdW0q0I_9d53.#-hSM2:1X:^NTP8Vt4b24=k`BT=En0M6VD'[Hb&(bmAC
%n2D!o(lBYi-PNT0N!>qHKU%)EOH*3n0p/,#$,pBb&kQY^=9>iR%22R1@2*B3c9t!XYm_%noDfdqM%HGI+Z#)*9E81(P0eo[&0I.X
%iraUJ#pDT,`$D>"`i)9lBdguS,cSdMrrd-D4eMq'C6C\LPE#^d&nD2L;3]g$B*=):A\b;SWPp7+"Mtj-Cf2lW-3R3jd)lJ<OPD$U
%(aQpBrFk,nKZl0(;6Y^Ln4CJs8Wfc*MMe36M3u)9N(eI[_2o:ej-#'c.@^^0[@;@;?<R0#^%M]SE&!(KIV*7O`j;rjYRF>DB-%FL
%JRQVVn,gQr#m7Mn</51\fVAKn[)OGGX^D3$+iP]AIUj'nN<1R`#r4A#-NJ)m8AJ)uH\AjG:*bP/-OR<jW.^gs(9++7,QYXcH:,*%
%jTSNi-:/gY4=(*(\O9=G+K_:m!lHO"9To%3VN_]j'bQ!pqFT//@E8ELFco"FY;f`OQinYT*>^/*k#e)8'4f%SUZ?;J.+Vjj&;EVr
%`A54s#s(@EOu1=e4r$bM6;f].k!u"%*iVncb+V73E)hBR+YS_Ga[Ir(!949f,RMPc"NZ3nbl_pF@1uH=XNQDT<rm8t"(%f;'S&ns
%Umf(s=Md<.J?W-GUk$AI":H[Z8>S.::qT=+M'aGn!lL06;BJPp>_5gF3'hEfdZIKIM?8>>,iV?$L^>S>6fe+I0:*rI$:Yj<"al)Z
%,"5ot/7IUo+P8e*iNNNj0uGHb5^6F_-%uY+`/Xo&-<[DS$;BNRKE7qbBpOu/=J[/T$Gc,+9]0#N92#DH5s]H(MZjOYLWGPii!H4t
%/,,&.KguHRK^]B[K&?aLPR&K<VLUNt#"?psTL*(M&Oh9_6k??7A>6*>&rKE),m"T\#>5nk;Au;)$V=7;!]:'^_@!*>0Z!t.`tFaL
%;=6Qk#\l_hV)csYU<Khe_#kK]k;eYl:r(m078O'6,Ua+!MKh`G,kN9,5RSuK@S,Kd;N`:/MC'M6J:\d)=IQ=#89n1[*"FBR=rrG)
%HC2]$LSYV1O\u_lDi#liY_WQE*mi.OZ8Y,O!!/s`a41pZ0bg]b,-N*l`o']`O_$rI-O>]:Jj^qK(P*\k&Ru0[7%+/VnZi5S7><+R
%5j-P#oHt<2>_9"!$9Kg@2^n&YENl5m_'?.g\E5J5ei>c?(GMA\%['CL:j^;2EA03^O-^*hEi<5V*"9e9*@G"m<cUgk2&<#o7!ud3
%]HE7^JMRi&(!&U7+>+Hm^gn;KPFr<q-9M=?J709`jB,[Y3NU6:l31\U3D*lj##uMB1k\2Xjff:mj0ZZ)$&^$`TRc8dlme=j,*i6)
%\:dNo-mZ+@Y\49'C5bJXhuS_TWJ;)e='c)V+A""!=V(WO#_Q&NAf=<1*&Z"o;*>ms.=n-W"ga_NO].&<Krg)>5tVuSPU&5W,pe-K
%6B3?1QZ@[O!A*:KjCK_Od%l7n?+-k[:6apq!J4.)Us`7cXb=NB6=i\FkSI8e5"E<1.AFr".!Q^hBo'EWh8'"8#^fm'84,[T9.U["
%A0la49H]CY#@`:JJO1J:"/Ot&@M_?QGQnsn(aG)f+4kV+!te2K(njb;OTD+/_*K61&:5..J&T-PP,'5C-"*(_/B7k_=WAZIb7Dl:
%P^kb:Q[f_28;Tkn8Q*DP&rbNuR=nRk1h76O0b12qkWFipMZ"bN![SO2$>MAJ'7&#'=Dh\t^`,NW6nG"MMfk1Be'MSI!3:6A`-!)6
%PRqhG_soFj4sP%\N'(_!l9(ah:T5RLj95WW0<^mB,*.h<NaXf@1,5eJ(<*)D25!d=;.*e;'/Ujq:'T#VL/:K-/)o96I$5*Vm089[
%fJG$&P(k7hL1(D+Jb:-E'R?,]^`or+4tL<YbbtRn1C6#_!YGkY+[\j]2Sg'sTm0!X+p!id6kDMDA*%Gj"GDhJ$>Bc=!DS60pgjef
%KC=GY)[\[ITVd;R>"#*J2%A/F.%pc[#atmp`i9Is>T^238eUY!2GU!3"XP@5'M;LP6-1DZe0Ko*$435P/5/rn/;tdARV55hX=Tqo
%ccC7EKi2Fg<Bl?F'[iWT"'?bR,qRI%`@u<=6[AnlQ;G1#Kg]jpH4NJ$8#ck`eL/au&HX_(:=c_dR%2l/n=<FaM_`DZ"PbntW+W=;
%jIV7NUo_PO"Q<@g_/Vl$F)&I/FdK4L7O7S_X%boe+c,Zj+AAN5MJENhi+179"7l#W7&/#D+cR3-R^aB<Ag@_J9$5#0,rA-6[PO*m
%,sW]L;IQ7%baL-g]dBqS7-e7fRtP-V8Wn3ZQMc6&rB&<l=L2fMl3Z60r%0ndI$0^)OA[s/e3X-]Ab9=]NaY-'NdDsC8KiW_H&u9Y
%b_Ng@\[`(T(<8`>ij\S32rahN\ZsI<^"ojS\FY!;jZSRh8bJ%R1`1X[/Y/0sZh3)E;SUn6kJ[>u^;bRWol(-OlNT#-)>"sBN]1a`
%JMr:j\!F"3T\f%]hi62+r79]Z-p+mGcrkHDL@A;Xnn6#BN:1"SGN0*ZmrYkc]BG9@aQ>Et^3)$n/mn.g$"LNZR/DVB:8u4@G/kWu
%U8;$in$oW]/fgcAp@qlF*iS$'inUUo+U/$k4tFCX^ZB(1j`hgU04hU\"S`7Oc7_Z`mWnGL%0q7TN8Flb@:*ib4Y5X([u<F#YIdLV
%XK>(,^MWAt(VcB9pUU"lc(8'ZR$k4oFl[CZ/A>>l48ma'Dc*_"#.JB_[2fMWYc6M]XWsJ>j38+khsCh9)Ts!K_WSpe9DA%fj=SqK
%/;Do()uK$u`HtQ(44o1)&ajSCFI1K_^@(qO&9l='qln[u,,9c,pA%pP>sO;ecsS/*Z-;CQWpVG-`&lfdMuOTqnr#o%\d2YBf,/L7
%%&^kbcLSO!q&3TW\)SZ_9^st]SG#&APYpj-]Z[Y2?`A1#^^`o9cR1?dHB(Mg%JCT_$-Ne=n]dFcU"_@*WNa^_HF'6_ftnkT4np5+
%!A;>4r`q,EjthJ#>s+$N7qL_t(N=C-kV;."iF6r`9+:AOP?F#6E&t2])qGg@&r58#n[BCGoCm<drblpM</fr1pG`S_MCmX7IBR%.
%hu9*1#=H)ck6(Fkb-h&^VpDdL*r$\Wo>2k!ZG]'+>`nK<[7D0sIW+0aY02Xi4),;=X3^@B",K_b7.tO!Y7kM1GTAbGh\^ea+7Q9*
%`,IU)+D)V3,2^H]X^%)D3qMc(gV)5]?7+`sUV:\aMBRu(khs*NNeW?%Z+s(Mc]7Ms2I=Z*HJPrYUR6)I]n7I/l7eG]f[H*->VE-?
%(3+tn<J@!ZR9Y(f7MjBF7)^#A/<;%HZeXt*"I;*W=J#?c`T=+U&_N"'NQ;!#p1,5Y4@F,``DPU2gM;i:2t8!jQnJrm\((%8\So46
%gM1Q>h_t+ch#>cMTPpsg\8%Ytq\38UFLX\Xii#uS1O`ZUP95/UoU+bsQO4;p19tN[oQ,#%&9&U'h@5S:HJ)<oet47[#FE#A:c8PC
%l^[0*LJ\is9C'e_`p)eVT?[#7N2r7Q5[`T"#5G[+hZ8:6'fVeM2o!KAhsAP<%mBp+_05gjUL(pKp'g+d!o"Okgfs`)%h]-O4u,)]
%Y8csj?a53Fj'7(@HEIApP=qP<#$QS9s(qfT?/J2&bJh4O1#dh6/(F<af)\r#pTV.Uj-ug6)#Dm0JUk%Z+'?Oc=Ri@rs7jnWqI=on
%$spPR@HIP2n$c;f)4YYJ5K+@oQ,;`n!G'g1k$E^6oq!I>#-hW+O2LXpMS"+_F*Y>6I&jRP.^Adeh^mXM8]:H\b#n=D*%3_D`.4IK
%U^Wmq$[g"J/e\,eh;Q\dX*f8B!q:,nl<4fTK1!*)rj;,Q>H,+lQH"[SD8G\4[F6EOW2S8<(kH2-GA!'7/>%FI[.Il(D>HKsqqH)U
%`1=<(9mKL=$%W&][)H8;,[^tBA4(R_l_E%:cOC06Mo>kn`[b1rO8j:Wl9nPu[m#^7KUX\tMu0:,KV^8<p%+uN1PN=<Ne@@*+@3F>
%`W6SK2bN)o,b4e&q0gk>qmN%X,J^F!o59t!G`0jhICJ.fhiR]Oe2VmS?bP*\bIE,V!jC=Kf/L+KS&jdW[T4Onqsg^sMeCWS2.ulu
%E&.b]^+&gd3g$oKm+n<$I5F-EDN4)[N'MP>.g21,@=UIa//<ZH,I\r,&q:k1@<oj3b7I'jmiXD$J%$EkXb-EV&FiJmr8JO^O,C^@
%-^J&=#*]#el2?PUhg\E[`#H5l6[:T4/HGTPi"njI\A9)e?GSQ!&/JQh=S`AF3Ucc2?Z6jrork5,pJ)t7l?SB+-M0\,7\=Td4YO5?
%^3XW-$bWZ->/'3Lp^p"0M&h)mHG$"kJ&!t5H(RB`?OQBL_ncA6V9SRIel/gC$gPe\A!&sa2)_&N(@HX(i:c4$O"A4Uhdq8#&+%PR
%?7^1XpFgTA=7`PJFlH"sc$)3oK6[;%q#:.+HgT#l4^UG5$2?\o]3:.h1SVCcAS<5MlnRtQR+-8W'<gB8+<U7:(L7QUbj?\18ZZ??
%eb-lL9s]=o[7qpXGG8q+YI@\2J`W?^np_1!K1n>;:=M[h(dmf-n"hAE_Rhg8+(+]q/i?tYM,t!Q?KsWJ_=a=R`l"o)Hp-/)\\=c6
%PQ/7eIh$F,;Z@NI5GMhtHLmO@qp.nnNI^-59R62+C<cMhpdaB!c_u6hLi5<%KVkWA50N[1p+J8A^AtJ;in!Ac#kDDLL;E/EHXQ[F
%JV;p]kmr@/7A.Q,qn9gM\)O`A5"Kl#r`6?!/XVV*oBF'tqK4u2+GWhh%g.[H`aa>N.NY"?LN(+$LjA;e?ArjYq+^-9R>!;KqLtfd
%1tP>D,-gG$_$PE\8/j8NZb3n(4.Srdl\iA``o9Zu^kSKCDK"rNgt<&4bdBs[Y9aFBLpg;Yj=Oa%mcA"<hKla12f&"Y"sW<EDh#G$
%;RO/2MjoQ-kgF:TAphTM,XbO^CaRoL\)gK"d%@#nQ7<A.[OYe[:(#=KkjerI+-LX>JJn3Q4N[8,'RA's,V9s#o%k)ao3/<[k:FP5
%i>jR6hsZ,m([u"[GOqPN2>M^]`,+?.$lB6ie6/I4<_+Z9;nq<ULfD!!?F;'<61g`Lfq5ji4p%%N?1B[Dr+l+`HZIq\WtTh'&EAYE
%6#P(ZDO>can*`ZN65U`Y4C`k2DZ3u=2'X6DO7Tt`Z=^qli_k/BX*m'>@:1mDTpZ/4H[("B>G]bKV.fZC2fANeRZf07P&U3P!GKZs
%*6-Ys?@mLL<A>DRQe3aK"<3i&^YM,XpA6O^L@,Zup`:#.7Q_q`pA&(3_!lm/0@[aS-CmudMRP1A7+T!eB!@Gs)p-Bq:u=f7A,5N\
%9CRGd1jo19f;6E(Nl/UPbq#s"7$(9-XpY`Eb.*76!.!aa9><J2-il5=_M'D&4U'"I4j9JoQ>8dR3.G@G&iuYi%bp'EJk'2:rBDj.
%oj=)2a4:..Vf'cVSE*sK4LahP(lGoB2=pQb6?J=\rdCL=NR*-E5l/8P)lOL?%M$"\^F+K%]+<aao"WMV)*gq4>^g/5%;+l5,V6Gp
%r?=8SU_%Ge<X_#g=<?=P()Qa@d%3dQ]+XI@)CL^cMu0*^8T1lH6Mq8-=Z?3.(?,j2>eZM/3).%':90_#s',_Fijse)^K$nSRKq%h
%f#^jMmCVqao1HcWZ$rq-oE6Oi4n5QJ"6@&l3c?EMVA[B>H<BQC\MR43d^u(P=T-eP..8$l0Aa]0+45\fN$[@1X<ImaH1Ka*^.pI5
%\^*eD6EKUZI(-QlZl`9C);e!W-*KY#="P?)Y\3',/dPZjbaXFQShVKg-#LM8jZHEUccX1nO?TmjZSJ=NnkKLA=3[ZaG]5$,b"TJH
%p34A;;"F?qYqR+No_5N;TZ:'<h<g!&Hp*aiB1M)Y-.gEO5IDmp<C@rT$F!ss<YgrCTE-iD@$j7ZZleLp(#u;/-J6G*S;E>ZPWCPW
%n)h@#\djnrF<Ci9;(JMGEa_'t^B9CM)7+_j+tjK;d1cEmIN%Q^N@Te/Q_!%XA&u]!cAp&8#_7pp2=W>2g>rQ@(Jr,4h1njIn6JA?
%\LL%R![p!+%)f<]>aG<q>UM7/+g*rSPF]6=kd!;"55%-S+RJDtg$;oCC87aR;hkFqelMPlmc=+BEoPO:Nspd;A\.0,D">'9^rOg@
%25C;tI4K!@Y2>.Wq_N,OocQ0K';W4ba>\K5AGKdM5agMtcp]T]G\Fi,n_U\Dh!`<=o:uL4'RfN3T>6gIX]o:['.Aj,B=.13*rc\<
%flb>X+P:;?=W[n)`7^3GMFGDFfe(tk^GiJnHkGjdh;p.N=k8h"GAJnH()e2'5)%Z8(E/E>S9Qqn()eW^!?\I*YpZT0N?,s&'?6s5
%]jkSb^2j.%G0U.Ho"oKXTU.C0CP[AUB_3iYQV7fW>L>5\G+ri4L;R-QXq8?T4%ikrPgAq"=_K)73FBnTYsQ#!s)OX!]PO3[in+.Y
%daka:isms;?Q43!R?#7o+'9XK*1,p8nD:rPmp.P$+NeS?+ntc^PDp:I=jkPX^cNom]9#%umrnuBB6W>Z=''Btmq)/l/Bg#%ba%""
%=LslGVeh"spC?'dOCPU3Mhcct1\%(3(=(]YnFJfWnIp4^Z"GsgbuH:l*XREQI^A*lOi:f43f]JbB=gZC+aV0!75jt\d>PTS/&<I_
%j.rLOlTd)24C&qB>T`CV'A3d`ErBs`pA!d0_'W,Sig1+d.IPQTE.-'LRdb&[(qqEjgD1.)P_$'\W4R*D56Sh49-=_&$-,3t9FuW9
%Rh7k8s).8q:1UoSTSk71$KiA/LWO)0F)"hf2_J)_-:Ym,]cjg9:D>AJog;hJ>O2=Y'u7=HPlTXue\GAr3TCU.\RAc'h"q#VGCP[%
%kPF6?>@(%Zgcj`[o1k!Gq%g-dSd67lnprRH#MdBNR:MF)Nc>4YPMBr]JKa&uqnD_I#kXVZ3pbUT^Lr4J[GSIOh"pm*m.!0@N*a8.
%:urH.d$Do9;tj\ooo,X1Tuo+$^@+,WI#9euc-MTN_2Z1P3M#rL"[6;3LV2g@![0&OlHJ9f0EfGmI7L7A(ai0!QJ#k>WejY*ZIQ?^
%@X!Hg`q3LHVgUd>\-GY*YhD@Q$<$mUAZZ.rFK=N5@C)PaS%AqtHu+>[]q1[M9S-_GD'5?fIrN6<e`kgAOu51?+A^<<HkbJp*N0HP
%]U&$2S)NK"'BDibR=WU7(hrbfC>8c_)2]6IATT$ahMno<XQ2KgkaVq'GMiA3R5kYgQi"Q+*,W\3't</f4Ep=>UuBfnI&%O+l^LZ%
%Q5p5Zd,<t=4W+c*TCrMghst">33emXPOaUB<1eO;-US:"i3Q[*f6A7"Gp8iu.:bPjF6*/;i]OEei8`JHja]]S(jB(Lda_Um>k6qf
%0j-%q=G`Aoq][=7@K<%JXNDU$$K7f9o?#u3VA/"aP6_hs34kdR[t8/0G/nB"eg6B>o-4*Rs%`Kc!d^JAr7tl?XLr?\)%s1C$f]4:
%%)AP)K>2D8T'32EX;aP56I.<ai,'<-iiI?B[8gDuWamWGbP+\t=5_8f<RQc_7$`KXYFOhtjtAgVGCp&ch=VeFGc=U2qKP`h;OA';
%6pct_9&]Orc]q05f5L2k^n^^cXOXeY-kXLh9E!_bh.sh]M,n'.`ONc?!\h;&g3h@n3C0i-Co5qb^St/8HMBno^J'Al+Glb"'gYM1
%ht*j5ad;kJ3#<(cTL*Q:O;/P\r@8r9:$I@jb2L4,.8Y5CV8%kO?!QmrMh&85@6@l(cZ!!d.5#iQ5'0gk!pl&fpND02aUR$bM#^b"
%+6U2DI+J"uJGrF]C:kFe91F+gPFgXk4Bjq`SFT%*J<+d2:,NEgEIgJ3)(18O3UC/A9\@]m\^dStWppd5r@4uOWqI/#]YXm$&l.>L
%R)eg>:Hid9^W!OG1K.De!%nZ$SjfM4PB,HJpPN$g<gJ_bXW8ck=F`9.ol00XrF_Z.r&h=-kR8I*>-^;,@#-e7K0BY-_cT\(b3I$)
%g;U1NIWpi!6uYoV`t-qHo/f@c[elX=<^*&nZ*ZB[Yj[$i0e`j#!#!FV^;Za!gtTenPVZ]\1]$VZ.\8:+'UGfM8!N_AZU+8R_:3p_
%?4'7JD#IL^o+M>9_i4rT/+o$`Ou_^3p@".-n6UE"cr,2,8q5Nl8UUohNf#Z(Sl^6dRAIl;'p;7@deF`G+KLi.cK6)s=^"tY>7+Ko
%9YV=N[`W=J\\gCK7r>/%jBLf;#NURjC14:#\e-I.UXAeif%IrRWsSVT>m,&qbXi1.*HrVkW2]$-`W[n?bl/(3)gH"&'u%*N,T-F`
%k+.Aqr:u`eVRTQ':E3C9n4Hf^7q*Nck(ioK</k=-p#SAM@fB6=Vee5W#N5G^:#WG=0Tnt43H6C\@VQWOJp5b/C=NhGY><K_*:;8)
%Gd8l1&P;'<)tHh0UQ\pmWnT\54h:D/@J+#Jc#r.V?r1&ahVT_eD\X6t%h:;+6qZ.:1]u`7a:T_!LCT%n0*85Nc%Jul&RnmGmU!=5
%9=Tih`i?OQcdbEJ'<.+:#0DX@Ji<abV`cg]4O4u"fr,e3->X!$C<`j(@"\LQe<WJ)q\Nd$U1T?r1t^)p"$Pn)*HhcKck<8+:23*3
%j/*C,XY.S0hb8ba^n)b88*-8jf<`kL[JLn>Yeo&XoYId,DV:ZE@-b@q?t5c6N`F*-4ffL.9`iW$;HMcpNd:'ML1h#EQXB.W-6NJt
%e[,=J?kJ@X]XPY"+GM9!<K)jq;(O%dYdb$K\V=+<:Y5`?aO8"MG<[83@50.jSNan1G7F<d%,h,U=RW,QKakC3eoo@Xo'Q2N^;Yd"
%;)!l`=sN(,-e5@N"ms%`l[]VR6[eiNfI_g39YP1m6b"YKODtDoN[<%oKI(TaFS>X/,@"YK+Z#09=CDGS0#'nWTP9cD'tX<L*X@].
%BSm'TTfa+4'q6[L5[>rdV4O>HU-'8/Fbg#_b<%\d4O?8kdC*[q+4#9a57^hVU,rQRp]aj3j0,:%N&qcl4JU0Q]N<Zc/Fl`ER-J,<
%ME^fkUHSkW+$s+h0(pJZ<gE(naHF[*dpkDV4Qd`GbI>iD&J]=hhW6nYj01%`_0aI1<ReVM<PQ)hU115B(9'^):IJ]O"9XnK6NKb:
%'=`WlDZDsQq"QChWSR36rPo_+Q06[=JXqq/3"@GtB4XUq)Li_*:(dZ(F?t>=mPJXWoFMOP%@2nN4pQBghUT]6_pVVWkj-,ARC5gN
%gUU<HffOu"od#!?RDYiY+)L%a(9^ut]mr0t:nidPKY'.G1k+JS]K$aoPWH(`c')^ZcXM"krCEjm)S%&$=iY<i'E;e%HD*E,W0_gW
%/73?Oo8C?g4KOh:rk0E1]E'i)q1e\\,NI`!GS*s9?t,Y'J\ZDMp>K\DTN(S&E&=..c6l_kOnoR(-HPN^>"P9F/?&8:$;u;"ZldlA
%J@A9Kmsd=*G@J+bp-[*.<Rn&WG]VZcc!PPnFG7\i`D@H*"D5"HE6Y7a66$@;d?p&ld0l7'1CY31)n9uR-dHLV+%_6KH^JAY=Boa3
%ohNN(O&Wi"T2B"3\2PXjW/`R;X^[R$5pk-5Rl1YXq2@74AJc`3CN7uniHN%GB9`l18So5.cms0tZ,:It&k;s8PZ(rS-ek?%W;\0m
%bOmA'kW8FQFBau\-9bZ[NBQa0,p1q,\T<%[(G;3X6s-O4GL_p]#@6Z[^Q%".IDj;Fhr?0U[OQOi8Z?/:#En(]/nJ+9%"?Q)l$:U8
%V<.r[mD0NnCYsH9fkoV[Q=/)F@cP`PAYDLVgM\&DSrcVYgTTgX?6E1]c,;3nJ!Hn)Lu6t(rH6Ha//(4)L\XqS:[T#l.4qdQjg,`%
%h'B-5%<\CADbSf8caL_fq^_Kq8)M,a;b7*JaW)sFdY&IHeaPPG#LZ@:^c_5r&`YHE71`@.NMh#e6l=7D`SZNVI1N@qr8H[EJHTQ0
%(@@F#RU=1PV>gr/DN.2\]_N3;0`Rh90qY,o*=39L/:ah:+3PJ)S,s]K+*n]>h$XsU\rqYGP@Bc]BV!7D(D=BB&9HsGDiMnR9E:]1
%eSRLHC]GhBq;Ej>?_\Na+,89D)t^/P/esoFh5o,60PREf(Q19>?_J"@AV.k[Sm]o:_W'oe?C'<MS1oRWA#aA5W!1\NA>Dqm4R!u<
%JL?$C?f<r3EWmL3+!UlJ\^]c2X[;k'21AZiI0`h@9W[6[4C]qob7L&K+`O0U2HUHL`:\73)mJi0[R2KQ3,7#G'mhW@oW0%h?QoB%
%D+dkQiORangd4W%Q4=W\>4I`m'V.P#R`,Eeh-eW7q4b#WkKk@UKsCR>F;l"u#EOIWT5\.'\$9$e#m!s)$]Au_?_NjiS2cJ0j`ej\
%Ss"ZA/gj'LSpIs2@>Y]FEqbG-;<nB?%uUIS%!9;pnaaR1T-<N@H!07[D<jX7.L<;0*M849Z5Vf-OM)Yii$dg!=QmsMh8h0NV_Dmn
%B^FH.LIDiYCV7Q[Z"V^j':jY[A\kNkD>[nlo"n\:a%H<N8j15h5_Q5^9%8an)`8C$&;87@;e-lA'YI*Ge*cp21_eq\I_39C1Rpu"
%2bVZ0%O>u+F>Rn'oL^#ld0mf4`&@$`kKPQ]S9J+<s&gUaGU8G*/.t(L8A+Q4OUVJ(51pd(a0<5--B\VdhEq*<!bG!tatGsF[7eIg
%(3+;;"Z0EY'jUW4@joX8o6V]s)=5463WaNhAZO,>!G+"`IZ=R@,bAjM'p4jW%`FC!K/[1L!E?G8palRFg_Dhg]NIWpUeWb)`6jl+
%'?_$:HOA(Y&J5`1s.ghRM,H/<&!G0r_CVSX)S-lofZ^;%(jKO9(r.=G&W9glYrlT3$-kEn?F<Z[nl#&CV/u&%U<KiD<h3>Z1bl;=
%:a[c,!..A55I+Z"$s6Qd.IVhN&T%;']W8Qnd(gXVU\$U[p63kRmka5]/7R34>iEB.']?hH"d=?2rSe,C5pr7eAn_Ajha3\.*fD=N
%*4)h)/I3btT_%:p?ddrDj\g?LC:[LRK(r,1Kh.P8/::c`gW2cnQNbig;IX4MP^^9ABDdts\fh\9.hn1MfK\m1g/!8fr@nbm.(.P-
%?\A%A7+;;k@tQ<6S=i!#Rp)l*Bq6SJZ&oAlhdR?WW*,[@k=!d%mCErMHK%\5L9V>JHPl6P]8DE?%YH_BQD5\@(8pas7dGIq%RSc$
%N39$Hp)oYcMt!"f\X>0n;lP)BG*P%<'fTr.>425&eF2VY$ann)I#Iot'6]X/JlP897(S5Q3/Ee%,nL&?mn!E+,`6DqK3<6d,jX"1
%ph@L[W?C7E2l*f4Z#J+#G%fO"8?@L+<&-REo(d$Hl5bI.R(?b(i"8j4XCW]\[kO_dj8/n).P1F=hWRMTO"?9\\)-_(An,lW;FT8T
%2r4S)KGLUIaIoW'q:9F8D5-qL"]3^OhhFoBL.,HIeCDjiNNS'q#-1t=PE)H]46jh4$kD%,;W/cL\Oh!NH(>!j=S.+pjrf](E_o$E
%N'q-JMd>f!&9&2gKJ,;FonsNNQ;A[=e@9SPYJ+XG)VqQZUS>WCZ$.MQo2j(dU0iV:=EL*S>:mG$q[%`\bFthJ,U8:''Kdq.\$3Ao
%>3uQ!nSgk]#6d44i.:5s!;LDkU_U#Dj$E1>9h1_/)r^A$:UJu#i0\E/$h$1V)u)4cD<$$72q!X]pNfgJ)?EuY]JH5"gI^hG-!@cN
%UIq,Po3eCsJ_uc%r/I3NI.P'\[J]^48qq!?8Y<"u'7qOLjkIU:@>cu)F,n6<&0#7^%dK;lE'`I2M1]KBiHih=JtIna^>mhEM*pjU
%JmeX7('k=)l?k5!_Zs7/7`?,E6s`r\qO)YP$bq-#*Nm#m:X>^QA+96Z4b$[blg=/5MO!G3G@t:1F2Q7V;lM,!ag&Q)m%6=s[&-D=
%AQfG,V"TfrE$Jg20j8D>E>r2qd=$\+JO(iSdeI&HZc=GD#hm9ooLbKK@CA_RpmVDRq<^6M'6FD8`97!C`.g7AIHf"FWdpof$@.?o
%BW8s`Bl&?jSq>Xsn)S%I?>VPhe1NFoSNm'$=+1OYTD"o@T55%\I%`M4%npiQrMr>-;g?*D%44F(6O$=@Yu<;'^U@_uV;d\+(1U$,
%(aeM=*j6N.g$e0M2gppK\8jO@5Q"7R-YMm5JE6Uc^e$X%l2X=n69V#\I=#$Rj+YPd9CA8tSA/V;]]D_0d`O=W_>Uqi'*oJ/UneAC
%!1.2=kC7a-bY4=;Y&n+:GJ-F.d/Y`Bd%BF9^sBmpI`kk7jZ9]])?U<>'BMNg=>^-\ZE/rfP2Vh6Lg7:<`e,GnTGr7^1%Dn,dQ:/9
%&@50s3>R#m`Jg9H-9bk)+'.Q-;hDbpmLW$K$O*Es]^V),Nm&3fVV.t;9HuPU/0-nu(@s+[PV0g^#k!NX-et4m]6gSI;;^%&6`UjV
%o&3fTCeZO?StoeT7p1o.%sqLK2pUb5KciJqS>-lfd0Cq'_*Yl.pXt4%5Qd'TO6O"YB#O[FeoWo.`oH4^f5s@!MC\"<r!_KgZnKC^
%)Cl;%f[s'Fj%<`,ODVPR$a!9V;-rat.Z3:U8`7TbiUAK=BU*`"netC&r5.J6-B*Q<:/&2b_655njGm%tX.@C:4jg]E&*5Ek)/cE<
%pDG[l8[u?qS8kCBUlPrZFK1t;3!a;5UB';%ZF^/W_u+=CrY][W8/;4ILj"*uY4)Fo*Eb7b4KT=tU@efiofI9u=FLSZ`2-\.kc,)`
%1+"#0dLP^%r<H^A*h9c/"UYi*3IM6V%:[9nOPY$I&Q1Q]Q5R6;MQ]D^,ce5a&XSWWBsSFp`lNmBlj60ZZ=S1ZHUZ24i;=4rH,@qY
%@V0SF##h'PWUFM`Q*3`1RRRm\o@8eO^TkF9eD[G)6:!-fhKq!Z9e]NQ;UJU@e3>V+9b68f:JOi(`]G<o_8'175(DdPRZt@*os9(_
%U0pcoYS"4`Iq#7$s"mcM)`EBOHc>#oXIWMr7R@0%I?F59O_8eP+#H5l.kmBh\fdXN]>kZEn$g*JAT%2:7*h.'Fi!-kWf,,jA,O1q
%*)/CbVMt9Yr<VLaf4E+NZOoN&c-Uh:1$*W3/jt/5rL@J^3\d3@Oqo@"hd6CccdJV^!`BC5TQ==Y"j@_SFXfK5nc)d@#M-pBF?R>a
%cm@gq)]T)=+Z*8pIS<-+ZV[S;dZ0in:TSGbQ4ZbgmGNIUE>CltOW=753Pnq//;>kYZ\(Bj3MDMl1P:cuEHB*.=Q+9Ig'0q@5,uae
%,ZAb9a;usLkE:31TY`gn6=XW;h@`&NaA7<sUZro%E&%r[1'&Z-oT`Cl@K1&+nO%lA\rZdsU"g&C!2HUGQPIlO`gQMAaYSG\.rnlr
%!e;M>F]E$?kc,VoOCl"X],&bCA:V8?61<&d>a8\J'j^*m%>k1t:>/D^;X%Xh6MDS8_L>tg>WbqH5Tt.QD.hFSW!".q$Kq`[)G^ia
%>.D$-b(=2R@&[5AO/u-,cVT+d;OF5B:qN]:eIX4PQ#Pf.SpB4V=*;Ws9d+.<9ILDXibV%MDfRR=;`?>4Xr/M!iIVE.]!<L6F^Bq*
%/:.u>&j`]J.nDFT_Ao>H4]Dcl6p?_#APVd0!s/bm3eCcg9`_Y"=Ff,t>bqHZ`aOJ,;EWmA-u8Pqe72IpSEfK>GRou4gdU(7H0(?7
%ET6C^2GKSq:R+Bb#jP'7$.dYa@V^+gL<e<iXbXp>/^0BhYp>_PPrl\X_)O#/:JqP&_D>BZ5DTSb6Cg(k?^WZ4"k11:56]NPobG^r
%G.7#h!cF4C]%tPV''34>Y9Gd#k7DU;1M[..m[9<HrZHe>c1FrI*a'?t`-osWc3L`e<nuqaLj(;\@0sAf.jB7N]3('$T[1;L&Qi(0
%,`n@JjeR*H3SPIAYA`n-RP%@0O;WsMV"tR9^.Nrj/g`)Ki)g]c;m>p)BB=nFS?`r633&2?U"*G6Yp=u_>`c"q5B3&T\DL8&<4&MG
%_R_GIc!RFJ[a/[(O!0S#FE2eN'gh$"=M%X*i\;fE3lF\>Hccuonm7aBDqrDO:spdWa7B\ZbUk"hPFuc(q30pfUD^8B)gi,eAS5D?
%f&&V?;m*F8b^uE)'J,q>J0=4mT\a*MDWpFMkFm+>iaj-]QVIn]buh.+Wu^6&F:8[nScH-YD;rm>@0M/+[PIhuSBouY2m9#IV/A&p
%*)ZVT&Q$`IOb]fEGJncf4-)MT/pBLi-M!aTr7n+Sjiau7#rq$56'jAF#]8R<iQ@Q0XSk%>68/%3rrD%5(N;P\?I,/eXof<p)^5%8
%Bn/?m!K9Z'Q?:#]Co`T\Q0?3oOmql'`*"1V<(f&=1'&0XVtImMo!j%4#7R"kOILsGFC:C=rU:0SP/ggPe4+f`&4:D1)!VYFj1sJ"
%Fn!<^RgC*dnUV>P'/"g2ZuqWP72+a]kI]"@9l==*:`*Cp8'cLlW*M>1?!.7lD]YKHq'52d!L\Pmm+dj()JP`t7o(+S+pufR$U!/4
%Mb@2n%9[5CMA07QR?e]a(oO>nn7Xp3/;[Y0AU3`c9K5uZXSH&iMfjHF2'k&nBP([N[/Jj,%BCVQ.7!JEhS])$*2Z,aIPCkqa1P3<
%ifV&8`ACfH.9KM2$Gdg@)<=#e."BWFU&T80)$Kn$S.R>DDI?=JA%ncLWW-$2S_%eTL'1mnm^+#&d-!u.$%IN"<=@dho!XM^+?qS$
%DbG@6QSB:o\GFJ?%F:a3$;bs75)Vh_l9sY_+FRQ>()+`kak-N?%412T/gMq+qf#[SGT0LbV1p8mDk;N$7DqKt+#AbCQT#sLUG(f[
%7dT:CDGB),&*#7Tq2ElZ?uc"ZP*?Y3^)b7P[sD\ANhj`CQnb%E:2AG9#sS.VR]rPNUK^*q:6L#bci,0#d2/^?A3tERC[n!7.j]^G
%fo>f6WG9s0B=F9c"5.0"cRDu8HqJ\+bEM:a%jC#)gG6,/h1%K@kl#+*9_<UrX*73j#F=[]fptg*9jBs:EdK.cpV[Zg'o\;R@i9QC
%k)_`'of06+XK-K<6oj-e@9G-;LH-onJ7C9p%a,%9pDES*ETb',.j\<m',!1-(n]ihgr9!)R,g%i9uK[</laI_4C\a`"L%6dq=D-p
%'*\2['7++b_[fPk&WT:[BUedINRs":<a^<sN_NbZq'pS7Mm0.Q-GdI9m@NnFFnFS0`E;JHTjNbKgV!!Dl09p50ud<YApP/;Vh3DM
%AJAK*g1.[>3r9naE^mr^`F3Bio.UjZZ)fg'if.J0QGZb?R.8/Bj(!)0.eZa'E`$`>;bKtTlF;^fI:L_mSsDgn\*B9WMW'G(4![f(
%4l>ded\HJ5D9RC8V[B+s2oDqMnq8<aM=ELd3V":$M9GXP^.&<89BD%B:XuFs?i5)hk\E<E3I7_<.-Z:3YZtq`We=6unKnBU.DE,J
%^mEMB>Xbn3^Z-fK1fFVA4-$pFC4UEf>r?0$jC1$lH^As^^jN+T@MGNDO;N?UMdSki<V/%`51S,-k&=`VP-54p.027cCo&=:qX@Q;
%=-T!f937+C=Z+aC3]YEr,^bi@jh"pR9[%rXL$M.=p`O<eS!5At:lY,[h>t*s^lqU4D,kG<O^Dr[<0j-la7(Q,IXZ(Rjf[OAh!b.M
%\_!miB^9]+g9mk8f[9k[deBat'M6ICW/:l%09:k,m"+HqN6D]\<I21L4jT4Jn?>Ma1IFnDR&DgJ/=;%=.H,4:/BEiF27d[,R!ERc
%V8Z.[$Jj"+%bHP`%TMIaQkrlc'j4L3:sL`J77!?&&iXot<l`:/b$H-$ot)H(+bV/J"7Pjjnu(?KiblJ1Tn08a.N>s['9T(L-,k#-
%<S,Lh4`[SqRlft.iFs00c.o@&$V"?SW7A7;EG+g8k]@?E!9QpI2<j?8K^fFP1.c'(9_4fTF_FM1Hn$R_!U+l:%S>24"i_MRJdkid
%(6qT[]Wn7tmetVULn-Z_S0FSh'AJZ.AGK\*][]Z8C;j>grJA0<lVB?JT<5$L.`Cmkakr?$4O^J"#R=g<HA^h9.njMF>D`h@YgP1e
%#kRCi#s-'QE=JJ;2XC3?@lu9%'DKk[%@'%Uh.iGi4t*V$=.te7('6C#TG&p@db<ld.acR[AJHYd6XdOf>4%D%.=7Q><J^ar8EVaX
%f?Rf>C1+;U`Y2ELO^.p-RMu[YMS&=UPR+_kNYlOqQiKU`<N.A$W!*I\i4nht`ioTL#;4"d%'9o\W+i?On]uI#<Ahai-!p80c85Q8
%eoSLhU`0>g?F,<eL)7W7=[+IjZU#2llPCQ:NHl_EVU/c"qdQI(PSYdk*:j)[Y=Tf$Ha?k=*$j/M;N)7jPbTFqNmJ`&L*m%+=B"mI
%&@/J(A#N$F0MLl*8`'@?6Q`bt%WD9J&r+?$=.H3C\Z_oQZ4O9'CgP1lehkj>_j5(o-Hm/O:;_gM;8$bkX2$\S]==F4h,Oc<].-Sb
%Sun$d9-'p*N)VWd7/@eo&c%7KUgdPmOK]^T^9thYJ+lCI5'!DAq>@9:jF@35s5X.W`XMpQC;fDSFrNkF6/khA7`iUp;:r%EFBRsm
%K,:`qPhX"akElu<mkZuf^@kOQ-4af#7d<Z`G?'GW.1Ok!Ua-P.C8uX-K7`kce$a!S@A;;-S2a087>q?@@a:,H[6b(>B$TZG+<D7M
%cm18*G,5aXm:+3(=?E\WPZtkcpTP:S'5(:&NM8un:>,6F@WpZZ/Dd%R$,rUuqE_XCj\:3O@'XPJYB,pA5QX]"WSU6SPs7)90i@D+
%S.$&Pr_$S.H.ER2P:)r0ao6;?p2en=$]BSVr0-F5s&FKsq!e*.di&0+A9rE50OHM.Keela5jraY;>ocu?&P%68UYai%_>oF8`ir<
%0jeE;'f+=tDn/ZYrrf,::\*8K6(3lqXS&1F[tr7/h=pKiS\nPW7k,K0m$SDupSf'E.;GCfgHIE-n8,un)8j@,Ak]Z,?:f*;*)Bg2
%O#1F<^7Ac.F!6$X<ZO:<2^'_bJXm,O=#S`Hms106S*<a]eRX4G0*'G"!d]gA)HOuR@S&1@PimCfBq4*P/(*5B`:9/%VO.k[Sg!_^
%KAc5Oa33F!MY3K&YFjVF1(>u%\hOO3164J87]reLP);%Yh#FPX9+5)7lRJ^p)\k`<Au*.4)2L=(YE,1sE"nV#oO.@.)>:HUW<PFP
%.deJ1d>'n)b=l5>>SE$$+e7Cj!l=E8;k!IA4^qQ>S.`O.6ts!nrV=MOH`rl%G6r.<dYegqdJ2G0c>QaSUWXS9JZ;!YIH\)F>e,^g
%cs+#orAoZA]#e-6Z0R^rZObRCX%,+3$27GmF7g,oegXQ?iJS0#-b!uR,/D#-_YNW7i#6+O@6!kcMoKo.4)hKp//Ihr=B:\6@gi>]
%6'q;s=QTmd/KGC\"@4TY`V#-@DfCI+krm)nUS*J/)_\&V@s.UMQWc/^(>b6u)0S)e"4S`oKB:?nL;l1,q*h?q;[i%d4Y.g59lNgP
%nU"=D\4u'JnL98),D-:qO9&`20^0"%\)[cd/sC:=I"qMHmC_tf,G3?B&Ib2s?'c1&o#)Dc[hsB7@)*I;[o<Bh[fgJoS1<>9[\A"E
%YV%7\oY<uIVIqVCq#t^0W?G$,Fm[>rc-2/fqFYXQ][]"N2t5>`qr"3SK]aoU]UVq`iU#J93Lnn]$.qh@HK$PPNLeMKb_W](nQpKC
%5$@#4qXD+oZ1=ttTIn,9#$?b*kJo@u\EdUJ:R1KlU5Be&T[;)-Irbm<MCF-FF$F7O5BQQTPnjo)`+h1t'JjDM5,]<?2hQU;dlR[4
%m@B3*o&b!qK205QWn-pha8P=pCtI#%(\aJ.Q>#U&!FtRhqq-/r\,]1[2&]Zo<ql+fhYui\0QsE?jndjsL.JI#7ror)Y0m>#a:nr(
%*$<B',MW)@2r/Lo;HmY?W,CANUL/.Moq#+K#%n374$_N/%DQ)bX6f@='0M4*a^H-Fil)D3m&'JRq+_om'#3%UeE;%IR;Vf'X>9Uf
%C=_s$iq^FSh[oP=:S$-rP\3(;Pp`s!OE*N<Dedcor0B2!Gr+b9A,"5I1BH6Li5084,<4X#[4,Q)1WFXH*%()kLQ1`2(uZ0=$*<8p
%mHP2@r$A8?Qp:rTH/PW\+i[_ZPZ8EuNr!#I][1pBjA:TS1#[AjG!c(sQkVOhpWoK)Yb[WBiYc10/KiD/AN73t(UXCF>S-/>WHUjG
%M=>L]'&Q<RW>n*<h@-gtEWHpp5,dt/:P6XG&"@k"p[?&aSKcC6inHF3Zs=67Tg?G!@'n"I%L/Dnnq/Kh-<<TRr!WFpbRiS?g6MSG
%!nN<T_KfPONf6g"mWc_FY<C/OmR^.KA7>OOTU]GQ-1!"5&V3BY,JR85A(D0]8<:>FYGF+hQcGTY4H$!4VF:s2=Ij0oqLWkkWBN.^
%lL7^>q)lo#,Eron3b!$MfS2+gI<qB(Zd(#0,TKgDh(aWsC--U*_j)j?hE4Fk-/\.GN;bQt]Xt0PR=k8OpJ-n&<FGT6G1D.ps0VTl
%o;]Q%cPju8lBr";lZ2QKo0)Ei;p-hZ\[AO'.Bp(a>1M,F`3Ri<W-ZR1hF]S;=5R?YA`J]7#(u`f^91Ang?h%I)OI#FQat*GA*[co
%hoG+]Z<f*U.<A:#<Uu!!kUaN'EC6TUidP5n_l//chf-Ro44;%F5IXK0]<>1Ip*qqsfqB.&;Kcj*ST6foN;,<k4_.GI]J`Q!\tlKN
%YBE6c0%]?m_X3B`EhE5VbJ/k*'nGm=*mIq[P\`+f)$IrJ@Vfk#Y1Hb5_f%@,j3a67@Ab,AJsdnM\;-trE.u8MB^N^527"3GNd<iO
%TsnZihH+UE4bPJ.\dJ!jT-Fn12$Q0tl<Vog!03C",*n8@:cm-1b$`m<R&pK-A!MT"S_1eq;ag5;pJ`C)cJk+Vi?o"8?drg[p$0Qn
%q4q(QX'G/r[+Kh+r9fQ@Ua,c?<BA`-C;P-O4408V+;NE=h8a"%13F*$Gs"OZIKG^ZN3hGX_)L5Km*k/7-DSgiJ)?LoR3Q+DIS)6b
%2;eO%#nR[A'3u>l=76M[K%GMlQ(.&B-?<e8]q1&I=U8&j\kObmD?b'%fsWB:?@!TW;"f]aMt@Gi0_-f_)Zg,bV!Vl]0WuiUmi:".
%AUhCCL1:\q`_22Q:\%ej[5;^hOAQ9_lfHkb<=:dcQKYs99^q[4ZV"Z9b-:sC;!D#+4:*/V=5",i/p>h$ZU05ER6)-E^1).BT2\+<
%Fho(&f`6AEXui"qIl#H%BTfoR8pu*(BT'`4=Q#B*Oj#N[n6U#H]]U2)8UkgI'bYQ)DQ_MP0Jm,#j5?6BC(HUe:Ttu"'`XO#@s\=.
%f0SK.W_,OVk#DA\.`;@o9H>!Y5VE30$Mf5M+.UKj]PKiOMuhXe-0hT<duc<BidP(mlma)/htTe.>]phmQsooK4?^EHekJq:d'eCr
%f0c.KA;AYC-uDj./PKY^6XZCcf!n`%6'U.WGB"JCNjS!ATL4;BCe8d6S\_LUJLAb>73#9s225;Fkn*C\73nA!R3k:,-XN4g/j1jD
%i#`Cb2?8n]ii3.S+0b)A+IsMFj';/`dZ3;2V#5D68AiS$Y,Q2@,t2//9^ld':I4]4AHZ+7e@6NP/aYUdR(dX'%(9]SL#tirFC-?-
%ie\s+9_o<p!l+c:8ebGD_JQI)B'la!ZK]V5$Q#jLGRJg"&U/E'HF'BI'4&^CA[.k1l,5Y^?LWU=DIB$72S`>K<:1rb+T6/kRQKZ?
%W,UC-o)4!l=Tk8>3lkD$hOX4356L-?[$Ihj$X!q+kOb0>,<IQU?ZG!"WVmKsNJI6tbCMr0Sri@bq]B<p,X,_!A[/IZ>-l*P[f@@)
%b<O]][Fdi(<Q50#NYfiIn[:7)=gON7cWh2m#E2^fqp%gGWKk@6h)LK9=+@S<Q4"PDl2.&DD[r<uQoDq:?p[-0d]T*qqmTDP4:.%P
%URiq=&V$ES5_Wb8`\*i3Q7A*:W:TLkD*UW=lTaIQkLC3Y"3EiAH$Uug-8!@6_;^pugL)tf&g'gAloc^GAD:pW`q@`fa9.Ed3g#0,
%9gP7,O.1$]@NQgf_F3.QQ)0nO5`j(U"WCJ1p9Yp[4mP#IrlcQ>pdAq%P<tu;b2^]OF?+ZQAnQ@p04Xf&4:9\]b1%uMd'84eEj_->
%OL:ikGtQuL3D<RRO1@^)Fu$Q"Mp4:,+pkei@.EOROm=5:L?3P^^%[T@3Q^er1FJ(0:[?PTEeu]n`Y/-2QJ1cYW\sdi,L8*d1V(,U
%3C1?`9CGUscUn77I**UDs$OS0.fIr9-IZV"^r1g\GQ4pL0tsCMJs7g)0^O)nnqSRCgnR2n'?YXXW!j2oRc^r"Pn/WTaVLj$BW3st
%]kA2R'q_g7FOLn!9e'6s)B]]ZjRo[ur[#(HVjf`gY7U3Y"YWCIHtE"V@;L`0O!::*KP+QVo0C(6,EV`n>[C]tM'SJW'`#[>cegsd
%_O2qZKV/<f8nZ93fqH.]>)U&n<J7#B.7e5]J&Ej'EO//2'oL1(01f-!.OjQ`%I5ND1Acfp;]pLejaO3Nm(=7(K?4jn5(]jm.=p^A
%Z,oQC17:[2VU@!CMgV63H':c5MJt#C(-h7_Jn_Y;9C6\i0WJ2#Mp!m8eO-P7D7OIZbhp^dQk;itUb<_+H)e`m^#AP=.kc48Npa91
%AJUi)I)M8d0N,W_lEHm<F^jsoXI?=Wf-lA05fj_4YCs%"\r;`F/t[l&(p1_I4e%tN<iNr9rF!$$j`#ub?7,r5@-[/@b$'sN7Qb(>
%M"8-,9"L&=2=hD3"(Q_n.@Rc1,f+Mn@s3\99pJ4q#)TW);hF:=,oBTc0GV4dApCe]--(rr>5+M90WUBU@QhP]RmNj]`nU$<pF&FW
%Q#D]E$2=IVPl.nJm_,VAY80Sq9Fi:K6Gp/Vo91p2o*/.LjXZ%IIMP_,s1E%rG^3TH<Jljo(maNRX0g.;XkJrUUaB5//L$^`aKYoh
%in.Q"S.tb!KX:9dRMh_t9hmjlpi2:$Ncg]_.8fSuB-jUAj@0"iY99s=h/`LBLo8CgDosk\T9X_>jZJ-hhfl7%S1&R\mVAVUI%o[G
%'YR-0(e`]LrDSHfR"11P`:KQWe;AfCC:3.BMcdFNh5*]!d<%9J>plaH26gAO3QH:Bg?*&_\`C&8DQlNe%p&L)#.N%Rr04DIqCsGe
%n@dX;H]=^1#hMZA=^8=`hL_mR@lr"XSH0$i9BsNj;f!Dq*;;i:Y@Td"gb:\2'(;jt`?EA6M*Oio%EED063@?AnJ$#$P`L7*@3bl:
%<4dVMAWU8^1N?FA=1mE<bUSl'VmVU:[&mK-D/qM*,%)iQM+(E0F)e![NEX<6mV:)Dho4?TJCqb'VtC#c^LR':^])jbnc/Pprs,89
%0C:pT4J)#?s+!kXC]i:=PbXnlMd6po$ZJ^)5Q-*3Ikj!9os<s]H2MlF2Wa0KBlN(Q)gn77J%?kdWPoFG>A/6)e>eDRXr=<6Z.q-g
%.1,3;?=u[ZUHl_1735SiroEW5_Kh(gI^lRrcb]*JVQ/Yl538Y&IP=[Vcb#]J=a(;_5=t[k4/WhL%?K+0VH]2$7mY,BB.9ZHq*J%U
%G0?8mO7m('+NCqeLc!3C<Q*<!=c'ic3#W/;RrT#n\fE:sLi^;.k=VO9>o7MOWOc,HQB$-#05hqjNQKk$A0)AV%.F,nYEG`+W7mSL
%*J->'c/S&O&<cr"=kZUkG-J.W!iSRBbdo*:Gg`gtl.4Eajq^VYFH=7T)ATY9oS#/F\HlW!'uCl2(Ikf;`Cmh`O4j/1ZiS!mo\-fo
%YCF00N%1"_.L",oFEI/kBFt@_9.p0c6lUA$7OHpOBsZm$HHN`7P$7)K`^Y7*GuD;[P^b^]ZsUa^*MUBA9ou;:>V29!IK%gcEEBnp
%T$H^02,=I8C^4mob+$^rkC(s!W]>n*=ZtYEG"oFL4c?,Ri0t_`%C<Lg1IL=`g$A$V(j9/`d1Y?jjVnQEdsj2=AOa8qTp;<[cQER]
%'AZ-f]&P93.MZN.keIKmk5n?94*..Rf&I^`$cq,3#!Y'd\.(QI=@+,4[MaB:d^LpR(gQjg=*\%aYh7Oj&c$*,EAg,Oi1Fl,U@[+#
%`><SJD=KRtFB):YKQl>(L_BM[Hg3g9BVNEb4HCrDaTGd:G\^QW^U=[^g^+UhTpg4$[5aSW(n[Il8/M)G);GWWm.CHBU$Q85amY_,
%/#F"559"hVXn^b=^/">%-HC=U:O]1,('[n%i;2F%;g>mkeSn$aAIe@2=d/d\[bpc"?n?kj;8#5el=X'0:Ndp8:Z.At%*S6k,Q*BS
%ihni62`+h`.GkGhX9jL0$%]@N5J)j)8Z<)Mjg;(N`Ru9#p<a9dZRkm3>O8(RmkgeG^4@C\,J$Wsdn'J(="bJ2ZU^*^4emr^I5lVX
%#Y[qBc!8b7;Xiu#Uh:R)#0r!S^IM(oSKD;#Eco2@JS!Q@YV,PO0(6Uf;F=h^'@q>12:D3a^/BC?(-"FPA=^llqVHL0[GPX=otHGg
%oi2c=&=h5@S9F?V\HCekdn,H#0U6)4bUF#Mf]`Z-@f(mRS4;&=@bL8qVhao:\08l!J@fS8A$M>Z]7.>_CoMGaZ,9Ar,K%YBbPpsN
%GS/&*mJH<9I`DG0@=@M:5om*rFtC(oqu,fa80h\>%ZpTA8*@X`:&j*4:\ZRBIse0fP#BhS@coJ\nVpo)oRCKs*m>g"Xt3gQ'RLNZ
%NBJoVUGsY?KY*sr8C?miX4dJ_.NX;6#omH*LcJ*L*K.5SNqe'j`*u6]_[JM<#rg%'M9>ScPC(4BD3BrLe"RJL]/!c4qF'6Y=bo7>
%%US#@NJE-\5s'KG.!MV#"\M(d&S_h]nC\/,49@!KT[rA/C.j,SPO+i10>=E5h0s<I1t-\bemM[Z$q__ER`/'J!osNpd3;CI<;9KD
%F5_3+f63m;qSRiZaOKSL`7Obfc9C/KXRj,g?hHbPKi?sXRGU)+%2]7Q\VJf#)FAcKrLUcNh;qQk>3Q=3ZlclQ2=Z<TQ&I)hZQUju
%*r9H'cSQkm&RuAN(76>\(+4X_756HCX'#qlI8XJLKe#I"icXqqXgm1b8=Y6;#lu!bp_J/_!PAM"TlE\E3,SIB4i64a19j-1g>6`L
%op#K;&qCOA;.sq@BX/UOYiYF&!iGp8Y+4\'MC513JW=K]ZV$,e,pB$.ec%b2Rf/J_2_H7@;79Yj"[r/GUb]n<pZVb0X,@+b5f>Q?
%YqeksoYa5K&JP1I,mF'up,:Cfjc-*B^[j'"VAH:!pdZ*\4j&?]c.qDXYRm9)>!cU,E\k`uoN,dbO4V^aB!ksOWiul!ISE8.+@bX%
%1^383gice"SG%$4R3)$:o`D:rFiK[k^1WTh=ifj7n\_n32>J@IJY5C`MZ#QNKs^k--h_>HWG\>4Muo8^Y:uYti9B=kaUbf/-2_rT
%^@Dn9Dq#t#hbU2XqY:DH']MRZ<@5Qt[7m("m:!$f38*`0di7*T,X-b!HJUCi$EblX<bq];%6\E]?B$W(#Bp:nMlMNN$k\Zp\cgKb
%(t>DTC.2F%DD[N'I7g/qZ+^,BVE^>c<>L'0icO"1_ojO^HQ5H)l`$Ud0.!Q2O(1\+8RQf&MO02WAb(7-Ed/g8aaHm1,d^[TC@ODj
%<kQi"Zk?nMm&n<gW"OH<jf$7&8L*u]^@#MgZ&C1gRsLB(!*dRFT5%irG2$"8R_>qtAAEQ.earN-$[&EXn7d@);0g#=j59_c^mOdK
%L!k:hAChUle)rP58ePuReC\*N<sm9+O`a(]]\6TM<&-P=Zj%05U5?;n.*V5;W[*g@*;THM]^Y(6:M6[9]nO@B7;hE6F,D$B/3Ol:
%*4B,[Z[hh[CNdh)*oCA7FEk#*5X`Odc'n$'@-`kWN@g.i@4S+35XAk%n.]0JATQM%@q;ioSm#koDO-0MUS8(Eo32W8V`?$?Rm("m
%s)Id5+>'Io^NY?!G@H5aIfl)0CFf:NJtSd"52WK(kT+3g":,`[5O=JbgliuJ;cS]M5KBaM>W4V5[XR8c28['QaR%j;`BSYN.HC<u
%j&GCf'QCGVan@KC9Kf`@c>&L8%hH#n@p+pt]Y>61fH3J;N;qXPNA!E&SkE#**'N>sYn^p=XesUrf=tIlO>[Ko0L7Xm'j_5:13$B3
%c]WB6,DX0&etDAp@VaKDD'2]Rfd3<H<;rI`EV_1L!1%QT/5%jk$cU^M!S=kC!P7"S/bP\t>EUL9BKa>^^(m4XWm_oJ5b&;P1ShT*
%ERr9V[$$K_Ub#E\FGpuE6P#.Z0hf%Fs/I^oQ6W%/4nP4-,JsD_gcj^U)]GdlVcX`)Pdp`tR<<:OOSH7-_e!]9W\.&NiiHC0D![^1
%!i+b4n_E:cp8Q>^ML'bPY$GM9jlEdF=Jp8;7<,A6eY<hiUhi@K_cdg28llK_m4F+,Z[@Hk^?/04o5nuV<p$RG)LS*=9Yu#rF_PpL
%eA$DV^Vtfq!LCq`:Ach>:Sg%H-IW[Yf@`Ws>nK,LEbHm7RafkN:3)J"XB*"7i=T@R2$TeIH6:b?!hn3EX+].K(I`JB[C!E42JZDT
%9"l"*oEsaTmRkRD<kS!V/fe&qn`SJqE$KStf(K2+bN!.77,FoMHg^i,4,_.,M@WhF5i/iDg0sePCCK/'?<%V-I!b-tX>*u12!":c
%`n4IS,kGr'1##*fhBH(M0(pcfTK`>YeuX]&DAaZrH*`R@?aUWL4f$F#`@H?mSPc_IA8=,6)c=6meVL[\V:Pu0pK.-rn^t"O>tO-Z
%)2P&T(:QUlcsl1+:XDO8&%]iAr+hd?=hZS1?9!F:g,d]%b5CA.j_VoJ=m97$#7`3@(/7]U3Tkf;raeC`Q-Kk,E<>-oX0g9ZKUh'X
%<lL?u;[oh2dYa,AD``M/7K!oXaloSdTlqsNr_-<OJ>WT[Y4QK`(&4uO5't']'r97l/ChnN^G31`SJl3$:;AbUAOkIDCmNN+K#-k)
%]AEgYTJa$<hAh6QMICm-3#DE2ZWk>0?.u;WhYc/ppUf\A-3?j=)/j$B/(L1uPjL:L7087:#2FlN^$dl]ZCn00k4_fFffM%adlI3f
%#<Q411cT:sle!6=?c99Zf9>7^X@[Qg2YOsrAa2`M"=L7bj_\G26>tKh]t1Lib9YI>Wt]?lAuHB,$q3Y"^KViHEW)l$hWZ*\fqsnR
%L>P`YGGr)<f25RTLPUq<WaGO*SUZCd7@FkhlA1N4ni#_968Jfsp;ZVj?k^\^W3iGeqF8[<#@a@u:\O6h7\L2H=polUSTnM,:`7c"
%K,%lna<$7&Nc+"Oje_1cqW9oE3p>b/`u2h$]MPT$h^Sk;\b*Rf)r<3pDiA9D['7DTZ%`=<4ZU&MT;lccFfhbF>j[h`a`>FB]KHkL
%eYD*E&DbLUq0AR-fQ^J8n\!rO^SXH'O)K$'Hk")sACl\Id=/,F30j_A]\W1X15goahr;qb1E[qYn?#F[1M"_2m^FkkL6Z_?-][cG
%>Wuh<c6htOQbVEn,.e<N]$2"!2N/lq<h!2B)6jr23?>,LiO6fH*7cT^)LPcEi2e(B`Pec_29`gN=6JbEB\f5F.2NYLeGpDXM0no\
%)/4?DO'>Kq2i.Y2MWscAD&(6G[-R*7$br"]hn._PlpU9!XlA?K+=I#`j<5<P9%9G<#l99rM"HSX%Wj%#J`OPOEfk-LOYSKS7lJW`
%Nc#KO.Mi^RqJR[\Lm@tQjCTjL&K-57T*CU2s)5mh0fL]@RU%aS=kGr(i0B?#.jt2Mbl>@4LKUP1,u));R:>EL\WQcZ\C5X+A&RVg
%WU;8cNA$ZU73uUu`U9rZ%sVHJ?\<G,+lbE^hMVtRERQco\k?(GQ7B7u?b;"(s!BZeZ<]$/C[U"Z`i%qQ8-@Ln\mJodL6E$q+*9`4
%$R*u/YMA`-eV')JHBa)j0I.1D+Xci:n3?Bj8uJI%q^N$b](?goJ"?mFd:k.B7]1m95G]nulmSj'-4URRZcE;TN$kb^T'?=:#Qr_/
%c82oQj$*Iia@P3uRhm,(\e0kd#0J4r4g/rX6gosVdf+KS&4Sg_(8*Vid-bAcXV$X2rA2&QX\kW?YWVPq?V8%oiY*o"(+hhX8SW)9
%:6WBsi1Q,LmN,ll7KfF'P0KkfmMnY,d3>UoT\F(>:Q86rjQGa,5A;:qTil;'WI/JN)mK9VhoIaUKMF%jq`2t=hS-8!KC):!9,A_n
%S'hQ("4#BTK9lc;^!D#-*6+.46OLeqq%,DCFqp1pKkNWCILQ*K_0i,Q!if5gBb*Y(>XWb-O)CW-pp]H2(<IK7I'HeUee@qp^L<Er
%rDeHs[^j8a;G?AtLfNQ#[-CL%eG*:6iEo[+^MQQS!g]u2,L&TsclN4_WM?r>"5*"C\Vop$gD;'"43>5br]s8)e[7D7rM?T)lp=4_
%n/lH'rg!;u3-4t2A,>@BUmC5]nZS4bS6akO4R)cY9;0+19^?].(rIuj:Gi@u3scP2XXEs+m4&'-^\(lh.^dp<=F)9R,RRsO=1`aS
%O0.U$V]5/kIKKG?D;WRqfb[u>^a/o*Ka-0rXgd9A`=IQg>rb^W*#:EW]i'<>GrsHD`mIIeqY]'G6>RRolUZq(Pu'#[mj%6XZ?p&b
%LWE!r?sE<.P:jM*UU?M2WnG4q,LF:?D07IKj)Z-7M6`S)97CY4+7#e7]kn#4aR=\5?qBnKZQsg".9[#+E=c@4SW??W!(6V!Rl@s.
%58Kf7YVKta\YlBCJ1M>sm<M-Apm5<fa)c70_\+$E-4=SUfVhKZ(/eBtdAFsU\5-Vo*?O^YeP`enb%M[aUs@oTS.eCFP1E<SoeB2L
%U6YH9RfqCq9CZ>nV:NHFVK9GA-[[j'hUY0Ed[&qK_FTAL#1ZHM:JrPBh%l3ro/U2KFo3/S3oc&e;9"'u\4C-MeEq72))3g"6$ZQ!
%*?*ZBW9XVqEq8p?2UqEo9U9pua1Lb0+N6Oi3.F]4/+6*sJVPt"j_MV_"ZT*A@jG',7Af1FC57;B']l)mW&@tqF]h^oa(U/ETpio%
%p#em?%&G97WBd!lR0*<\qfJ,(VP,bd=QbT5gm(Wi(n(MT4*`LhKt*hJmNgEZZ98cP&81T]P6@<]kci@P2%RS,Rl(u:4?B/C"qIC?
%87u8-KgeaEUS%*Ye?kK;`+[=9%,:CAC?pi_9"-P;Y3)KF3k@dP"H`pJ'Rdk6i>?>nLHT[=R._J.-H6d[Dp*>66tqGhUa>!U+gPT7
%Lc=H8d1fq'SeEO#2$\\j7"l1,cJ.\71F)1T.kf?X1KkMQo"lt_*ql)(rg^FA]:)4XS<%6aEi?):7+KYMZNe9H_R=h\?GD2-i8DD9
%i;*$!,%13.73/1rE@+E13)j0S'$QBU]=JFMCOF^Y-T)%r!am'q+ZnT',086/rX4W'Sto%.G!!A%YT:KZ['P.[BJ81RZfZ8%R^1[q
%e!@lAKLgBt$BF%189Rqqj`[JJNcWLKb*n+seCXZBBPqt`k,f#F(WZA"WXQ^EEVDVrKHD-#R'V8/W[JOLmhj_1c*_[5PeGbB*PW/A
%I4_k1>:\6@QK>E[_LBJ`Ejtp>njDTDSIKmG*%%eY/Wu!,#T7ZDT/S-dX2K#]noq:>$-uJKK_L"k!m`8]YE-JrmqX>gq)6LL63p$l
%_)6\[\QmTbe&uI[f@`oh>'pEN+M;b.hVB4mq>sFuY;E<+G,aMM-Q]n7nAJ$aV!:)V)ub2;A`SPGVFP\(4+G9dfdHZh:&/H7YTjpJ
%1UUg%k>_\-;4rB5li)jUHYWdc#n2PD1/$C(b9'@97f2uN;W?$nS=0S[WN%"oBXi"KWt`#*XQffr[s2dkNs;)hZ#M)u4/;fMk;4=j
%)cFb@R4Iff4Y`m]9YmRGPe-$babe0qeL8>uZ_Ruh.R9:i%YKUJg+FRTMi8@ie06QRACFI1j;h?Sc\b03qlf!:f[,LQCfrP/.Tas@
%.nhT<9=["%riT.a't6F+jK+3Fl-57-RRPjL^kc*A"]^Qe5?Solr"$^DT7;ie)Fhm72T%pI/AoPjVC//SDbN0YLZ/6@OJJbYnb%r`
%a6+j`j8/4`IjDUE=G@+*)l='Yno5LR.k,e'U(MEj$oBNnn@WnH"=`f='5)mXGW>N8R6nQh$SncW;gBUNd(`p-iI^c#B`W!3&R6HU
%<UAJ7/kE?T[U1btq*jW.BAm:JmL-6NB5-Sm<j*KQmdmV9N\8Bo4lj)7G9\gW$W>o'f[dTgUON_YIHP&IPoLZBU^FasD(,/p;<ja<
%q=q#c@X/W*C(i-&1r:2M=<CGY?=1U@L&8(C`?pc1(i9T"Gka2"*9KSH7A-.%C``DU)E-&QZ\/9<\=2%U,_rZ(o<7+RgF*A)kQ\_g
%N&>/ViiWIu``3j/O>D@onGj[:l_0G;l"l/495SMr7,cn%1r]?6(V6(?WI`k0\LXTN9`3!+:D%@];FYYS#I[\LVN"pjepX?gOC2.,
%G2("@]L:Xf$Sd^_k@ig;HJXUuNKMQh"?E(hV.-qKJAq,%)3Aq$GumU"0p:r?/;Eu%iqjCAN+i]5YI?O6NnAtn])+LdJ<gdX3:c`E
%8dkSn8k1+%oCP^-/5fgTM\UrcU?J^,7P'@bpn%0K-tU<-\f0JS_3H8]ntN:EFVN^TH$KV\.\a7XgK\sZ6Ji!Qh-R\?f)Qr&2A`-g
%;SEsCD3WDf;s/R4152C>$*01*]Os]qM!2:k!(;X:Ga[ajT7\qPQ@.X?_0jV)qE+Mi.eHrRarNu&1A\3X(DaGZc0XZsX0I`XO&Qd:
%=C0EbJF,*+Vd/I-GnShGS_4`mAJ5ri?@-\p]%/qp^XJCHGTM)V/&KT,,iG[AVeL7L!.,,u0Y"ll`+RfH@TARQGW)i72-ePk]2O-'
%'FE./qu4=Q8<A?4APY$W@WqXRc94>leMqJI0Ppn62Tc%hs)%"gVPYZiTt>%_<MB)u?:'Nmmin'K#ae?`%EW\T\b7"amo"X>FpK]p
%>J.sA"04BJhUEMeOKTt#df=9OdNJG];dJ?eBX+ADNP+JQ/G=Y'aj5C\1H+)))t7nQEE^l=[41UhBm'][#8HaGW7sNbLm8ae9+$+2
%DV1&QrP[I2g6mNK.'K'5*[rQinf"GVIBOW3(rUmR<\H.i[T&72H4cjbfK&0<1&K%Fdc'Yc0i!QrDc+3h)R(6^i7CS-pc>.*pTOSj
%NV3bO,N\?3E'fic`i@ps2Xel(EL5%_A-Ap9Xua^7@kI6&SmO;8E?C4?*EHN9nA8".eU^ms'c)k*oQlE/Q0po\C"?!]ON[t-T1_RQ
%Na'W0))''[&q=OA=]XL?P"'$#MmIE7/RqA@hg23p3D%KM%;-Ad)iJKdfnSgL--^.;"4P+>j(aQch'OVu^2o2i?Z.Sr&6ee:<W-3&
%_>C8G[h]")nkMneMcX+@q$dTb`HKTdh,)W02j(aA7/.3NA%-2E42-F6;)]FundTe4!@P0e,StMlkjW35\Dk?8h;)\FFZ,g5[X5>N
%/A'+gdB:%5nu$BWSU,n61H5n^6_ujl/k[.*H.YnH(_h&W&(M1m;TNV'Brgh4W\TK#0TN!meZY3khem!d_5u@i@,ps[FN%j%Q.t.^
%X^6&>7U+rYm(RO(on-=7N&^.eBA?l0;!>,#k1m85hL&@\g@[$KH0aaDh2e1%<WSKiGKS7#GC'5/WB*N75/VD*nVf)a@\lfkmh&mb
%7N3KTUl]hhMk0:h`pPu9rm?#OoqT&`ZStjVOtLel-m,oaZ`>WRGkA+Ka>kfr[*T*M:=oc2GQA7`e]b<p,",fASi3d.P36PMiDhmW
%ilA+u::.g5'<1!@@<j<9mq--$0(kq^6V^OebrS]&DR*[Ql"$tnJur6XFQXIpA]B])=FEkf,.)&YXBc046)!dKHf-J$X%Y<ZBtZ!M
%lmN@\1eVU'b@l$H"Y`s$C8OJfL7IHB`O'K.:UkfLneFV?8QRrg"dSY!FBngfGE`W]4,coI&>!rGYm4U\^BQq(_"@2KhF:YKHIIAa
%.%,o)7jZZmQpX:6"]^l-P%^R,8nc>R@=0V:D<]$Jd#KqaL9o$H_]mh@9<SKWL.(?bpg!&JJ40p-gqr5VD0lcbh!&%r1Q9/Ym!coO
%c.'"JQG&G7:)ot0H`8NC2N5J3Sn^?nY6#4ch^/9Uf;^`,kf,haqV"9ZQMhl3mOD*rgkl=p^h2Gefn+bEN"g&DOAGQoBGqL#G*>mj
%3`QmC2?9a!#sQG$@!fL,NNg86ZeVjJFqqif3ekWA0j*R5&%<#6#_orm1Cqm5UOBUK!e_6BIF0dG8C&r4h*Pq8qJcnOc%CZniguXn
%WC<+&;g2t"!\ZlT+4$JIYYpI?5nVXb-baAe2rf4@n[k:X@Hq'm,+=bQpI_8^@^0gs';'kEe`VF'=RsTm;Buj/`DlpCb=T)A:d7aU
%ZB\kO=&`rkEnf"bYL%8mSYc/W[aK:,Js1%S:00"'f9S\HU-Rsf2/Zg3%6'Qa>Qi'G*I:9]X0q&NJ!1o@LD'0DR_RP7X6/5);91#g
%9p))&U#gLu;<)6%#$/91kM/n"F/-26qY/LC-,HmS.YCZ=Vg(;sSW>&;@num&OuGHj/rL?gMCs',i\<p$BNu_-Rj_A(M3QM7P4)-P
%#C3D"p`>p%=Y3'TTGq"]r1KD/N'&/Y]%%tiE"27#\cZK/I/6e?7WIp2T=G@N`[jcWZaHsWk/Bk]HGU0(@ADps8tQoBDP<m+0W(dK
%*R;+k5m`\iSm<]4mg:iOkkCdfXR'"h[FpW\1<iFr%_5of34=O6W;ihTfBbAo+IcLcQ?eOR)D%FiR2_*-/EUFA.]S;qSpDi+8ie]e
%f^7TF=!`9)0[/NE+>dL_.#`0jn=OO,N$^&qhH65`2uI(6$XpE!4?#kB%i;9HopG,$egPf(//$=qpX6,E>m)G%\^0RUZ+8ia/60j&
%J"+7epR>/E87@Bo7YS^.LKYuY7*0!1%tDYo4!fq`!%Z/hV`[O+G'HlZ^AL.?H0S3dPek33]sKPh<"mh4Q=qNjPOXFZ@[B*_*f%Ls
%Y#]/KB84;'4p_bp5p?:_Z#*R#^Cq.2U6k"s_?]@cdikQgf1@G.Nf+9:>JGP;jD<3O;&J'XfF.6[H=P@%AK^obpfonTcRk\]JW&r)
%2$_P$'mqR72L<:\6)'rn<QC%jKO][G5cr,oeb/M_K4NVV5Q(2-H0j_YZ>HA%=l'R<%7rCtmSSlb;)h3Q*#2[)&k39'V9L5WMP]M)
%Y_"LHZKj,9.9_j4>@X1X+?;!l/)sL.<7(I:4e9_!B"?eqktBL4H5Q7*j]VKm_7rUE?,`./=5aC[\Vd?A$&o,dH0&s9;]A!B8B,=I
%m;r#!h[`'5:j0(@V<)dEK6et!`HRXKM</e(1(r(`ob]mr*Ni/$Sbo34>?0i9_;F[>Zu%mXs#EDAhJB(4"hTbmlJF=nMlH+48k#K9
%D^AO<EG]GDm)7&3+:@gg(R1hV-LD0%Ep^qphP!X!J(bg!,:PiS%A#,n;e?6=7+H#6*L_qi6#44j]q:1?'Od/DMW<up=AQG"rP=Mc
%qc@Oc'NJSWcDjm8^/ici7rj!Wa'n3Y-Q5lh*%/!MD`$H/PcMJn8Xepr0c>FOLpHWDlK-&"7g-`tPq,kC#rXg2O19bc+_:m/YbC0=
%qM^B:SG1NmO)s;Z8^ccM6+Is"e5dZE;[B?Ugo:@"`XPrQ_2CGPCj2n`r2g]#Zi/PB*c3:(d2'@[MIqrZqoU<l.<4_*N/]Vmm%)DI
%X/Ts-\s6'kp+-4oA!o8b"jC>QFB6o4H4XRrC7iP&4H':^UNJi-2[$^A.EISQM.DiXYdCth7"LQmn!R!.UgM4X6GTi"k2-n.gNSM8
%#8\]q(&NQ7Oi/&nb:%11N3Fe^`^D.iO;i4AE,Um6&AT[gjpF"/+KXqiV[Y5A?FgCn'u[S8oEPZ9\n'E^2$hC(e-!^/M45E#UT>Y&
%ao9]1HdtH`M*WBK\*E*1,3F[.<'(j!6*Wh?Y?_`Q`:BGHe5ij5BQkB*rY4h7<&=;%l9E>]e"sdDQ]KNTM.t0YDs&QpX4GRu5(>>[
%&9aq9),DRG\Ha(D@Cbg3!,7Dc7RX[[<-StL%)$A?+>9X"BmDW(F3T("f<:F`?PN12qYXBQ^BMO(nf$;moJZ6XUNBu?7oH%oV*GFC
%LU8)2C)0Wr!I+Uf8KgOSJ*0g"UrSaJjY5X_L7DNkHsPA$;u%1ciiQAtW[p:.7kB,'1f:nA!)<n[YnktP(ldRG$\ZHY*3',?4Zgrj
%6(2a,FRUlcR5KSB1!7AQZ?kI9f0,mO05WQ;ZJ+13]+s6qnTP%PV3Sj7Hfj4rp3Qq00O=tX/J[TG74HZ`^/3:fhC>84q@>13.8=S(
%1!=CAG(e@%UO?6)2UY@"VREh7gPD[pX'P7CGDAq5[p6,%)DkaX)A35iMI<E6A>]["3qW,b-ZrFW_$I2l\m2ZT>It=Yhb9&'9sL`[
%?nh3M6&WKM?%aqM_fORX[HQ)S98I)2)MD\!'PIA*UeM_8(9du.T=0W\8fYek4N)T@s4l!?\"E*0`SUEd/O6V;1d?!+^T%OFj`:+3
%craX?*39.:6BqtZ+.hUE[p&O.`;JN_B+&Oh#\Bon=W2fGL&b`;S'U,8f'P.ib3s`@<?P.\+2/n.?S]+Q],G,AQhRkF/kE<;Y+$S5
%H>[\]B@)P?A,P5jikMNVZB`inDIEq1dsB!hraFU)BYeIYgSMsUTMThlAtD?0j>QDF9E\/M;4=!5:Qio-15Wqij?X/CTbl*>:QK0c
%458G8q&X.LQ8H6,[&Zq1_8huh\CV^D=7\_m!u<ujWA\'/ceOm.WbnuM]Wlm<h61L6;@u?$!J=SJSi9"UC*n=:D0%f-'e*,_+A+t#
%n:#k%ak3=uZm.\e6)Vo$?oqb1p_l@)k>>q=`Fr=nm>Ie"S$ZJ$9Uc`h9f(\>.*ihYK>$0l/:B1%(32QiYH15rFDbobr"_40:7Obj
%GKJTW;pq^1"O`,(TTiD?<f)ZR?gkD&2)f[()[/5.iH-?0rr'%*G!ah&.*)`]Wn%,E,]gNja\BI4q6RD\N*h%cT]iYldH1ZK_s[.7
%KIXWOT6FMSOA!Q*@+ah?'0dl;YJ,QejAXlK#PJc+Z>CAB13dB/ro&Q@/1t_!cC:@u;h*Mb6rMgUJF)RS9Ih*22ng9fN8,hT:P8aQ
%]Jb*Zffk=Og\WTPK.C6i2:CF>ic=;dL[l*S)WFA-Lnu;.HS=6Thj'",hp4;m;)-Pf>.;Zu;ec.je0`X8_.9U<;7<a&Uj+"CiN8Pq
%[#`Y<5#P0W!)BV5XVC9->[LXjTq;dsDI^H[$h>UK@h`sg%BIF7\'SkY,QK-to]Oh\<DO6;osUt[DchfJLZ=Ae(N4b&)O>APRb+ao
%Sl#U6Oi%E5C_1a<Q^:!Yc0D0AG2(=tJd7;A$KeR*3dM5LB+;E7(O+V39;CbRbRsI\Zj[o)[A`@HH>OF(-XOEPmT'H-Yb/IF9DAG;
%Zmn$ODo"i<q6W4$SjVT`Z_Us8FND_13UJgNR:VK;,$8<=NfA$_08Seb'JFtO)uIMDYUg:->=Fo)@o!QfQ/<O3B<=dYH%RD:0S%R1
%CFr+c`*il*h[@C9,t';7.glmqf)X$>SPJh5p+9TdHI-)>T;-4:hp+#Z^2W%`;tJLOF[]G7PtpiJ`3QY\VQscbY+j`NkHc\$a\$Cf
%L#[@th"bp',ZNZDVg(T]Zu-PM98`XQltJ@0DCU?i-k)D2%E?m464t)tkMAdDHJ#iN@Usl<8E.W&gF4<5nRm4_:Q&Pd$Q0]pUqCq6
%-h\fZ];hR_bUGq.=uZ?WP/UK<03')KIOD4&cs"GA)I0/)M6`ERr,j)9lMHN!)'3&jZ%j>`kGhj]ruU(Zl7AA#6(r28/N)d-[Z[$8
%X!$YeF)HC@"L9<aXkEf[h5stIK2r`V)sYot5kcVYN$Z][2[i^4]9=5^BV+Iq!QPi)8'=)^aqp`Wl2&SO;3?f+BSV9:N?\K*#Lp=(
%/I'AS&>YP0:q_hBJt']3m`DNUp]b-hh[]MC&8rMln87\JiJk,2ha5/mV8(kVSl?I6Ti7r`mp1TRN(Uoo&PVIQD'1Nc%"b,*X"&Z=
%lFROq/9k8Ps1(66)b\mSTmJ[18T,=khqWq45AjC"Ud!4#B<,@NEm4'CohYY]]fl`t/369`iY2(Lahlh5BUe&FQ4YG7$LO>(4_/<F
%97W84AR*j=fVLmSK4f2jeO#@!W)q0_()=\q5:\;U83F/iD+Br3D@in=_a1*NmmY=$AZbjm#<L\1>2/l((+Wj6Y%,#5lg=N0YdWq_
%6+dLo=_/IAM02'kRT&<6NP$f\2Q"/_G.#lk]N;)2RX3m2m*k#:D#(ca3&;d*,-?b$\*[V\n:tl;[p9qB.%ue`rlQ3Uk.)5UT#1mQ
%he=&*5Grr^#hQ#s8-/1XfE]e6Gm;=!Q.f&fItm6#NYd:T/;a/2Jer>C4%J\f*+6"T>cN>CO:mFr'$,A-&3i354BM3_JK&(c)AeDY
%1o'F/=)L1#g0(u:XesEMI/#!L_K_eZ"C(^[pisq_5dr,cDm%aZ0k;k,PD^L/C(jEt3oX+Kb\*adQ?3fj/Ck&/)p9l,mYLFC3F/m+
%&bW[B3soB;1`t7?@G+)]Kci%`[nb..9F_SE&M:%7aZ.'$'K<EApLP@"(qDNjXea19R4rD`o\GUim8h#eq@,'K+LA))"L#6>ZlMMF
%+oXW6rql_`kjmp:IO?YW9Uam/fOuTarqi=r*D4TVPmkJ'G2`JRLpTTo:eBl[H5VS>IkUNo7jeE0g-!j=e&;qf>[Q`tZ9m"a^hN91
%7tVA/*&@-W,hni$Ahg*,dCLOgnW^Wb04ut#2X>)TEU">?0.\GI6/nC.M@oeY(l[pEs1gpMHEnV*h4ND30Gs+<'sU_!7)T;M5&u[-
%MT7"2m)V$;*ZC>llb>n,DEIFF8(94]&n$X=YC]Hf97BL*UOMM1EAi;DM4JQ2,uPDFedq`Ijh:Y$mC8ApC&e9oQ4%X%A2K?RDe4_'
%q:Yci%\u>Sh00so)dBB2!InTae\1bqDl#Kr)8:B=;g"/a+%oH=a_H%mk#S&`9Bj^':oNh\+3%\^b^%QD;(VQ57q@Ho)?<S<(sDX\
%DODU-[S8NqXiIBK?B_?HEqr8L&f@i.h4oY:Z0\#qbC-4<3+Pd!pio,:.:_&9i%e_[V=D3h<qD:j$(4fMQ$a]*]$5F`p$/Zjf)1g-
%X<=DWisC)*mVO/ESCXE:bRqT+HBeO\r\24qbEZ-t[.<$aX4HFid<VF'b&pW`&Dlcpi\mnAfl+;VX3c]_WjVo&?F*+K>V.kbrk2bH
%L2&jjNEsM5]h8]1#CP\NB?$4Op-cF3JP]5VGFVKH;W2Q1oPm?c"7L`"cO*0dJN3ZL[qf&Tq4DZo_P=dR*9K]O>K_;i-hd[D]5u=u
%lU9-;kT,U[L@(^kC@-s:QZpdAeSO&LQ!HbM'.sNP$0c=ZX.:E&[8Ncg%D6<(AM+_.%>GtDpK2M@[8d%9h!)t+O=Gj[8L?IX!K+uO
%:``9o?S0g4B+uD<<>I80.uR#ZjM'2_V-.TN-].]-CX^M_nb$1ao*7C;:'2m/`FIRY:V9l<+]i>O=Nh@g5k(pi6!teKIgh/;E2\Mq
%A)^\n();.XVu1tms7u'.R(/1W^_9H&)A@f1U4J;Q$LTb*GO#.1=Ak1iS[3(/1_/UTW`FAtPqfM'),1O:(!#9+f=MOEh1k*2cBG.?
%d6%KqI?^6u2!\ZN*Za'TFMhqEbo<*p-[p7b'X=I4%YnW6c0*WS(ekU[3\f=1X-tt"+^-&%U4:cJ.NQBI>@6_[>Z'*WO0@]$8Q(YW
%IuftK+h@cZPt/4+$a3mp_m^'9S5T=!qsU*@FXSdGBSOJsF-qUa1#dg_87C%u!U(Ak"2e*"2cau_\pQRe)MtDe0FH[h<>7-_eZYKV
%Y<KA\=:5%9W?feM0e\J'2X@U!l]^H&)?8lMX+C%H?]&aYe'pa"]S^\X\r4Nj"H-N<718')LBsjERZ?S4L6Eg*EterHXpV7ARiHR.
%Sj^DEjTf(J-"c-_Bb@WOU';@XM<59Id"*kT]/[0#IPJ-h3+:>6GZU2"+CTQ8'1QR#,_aaM-;8doL<&l3ni<5)Vu66+2^&T:0Wqn[
%SYW[[lA4Q0Se;7KN'%U/6]&gJk@TM^)Fd;@(n-O9pR$hXEVQ:JnEf`Vae)S5o3:0oWG"kK%lM&"%lK"PXWKQ#peL[i;Anq\5KR-C
%T(?u7qE$!AbOY2K867.+ln;7uF!jU3[IcjS8KF!?#BG2bB&BINgL$Ir1hEZ;\Bj>oVud:6IH>Mac$5M"eQZ>^RSY@2CB,akNmVb'
%=<_m\]H8ZO>HO2SVM*MTW`3gcU4).-oJ41>gA13Z;>D3+JnLnU9)&8PE9JK&99GMhNi/*t;F`1D&DTFVNoc8!00Q=&jAhYSX&mE;
%"_hp*HAW;?S,WhV1&CRoOcbcW;+FA/9gDj2R&[>Ss8E'-N9UdL-`>2^?'=t3D$44\Mc`MigJue>)ThnZOJpYfoJG*hFu9R[0a5Zc
%93'8V?ZA3\TZLN`_;&&dB/:PWJul&Q"^K$ZHW)A21$/!rT3I^9/[Ad*#EL@G.kOr]YmM9c/Z*n8>eO=OZ@ZRXopufAQ/clu[r@Mb
%1E2NGB</o%B8.%W@CAf.XQjK2>7#pKSU@I@;k+MZ/3Jh9T9G7=OTGDZ,l-d4iMEQ94cqIaJbC.Y^7h.[W2JlD+7MoEfI8%JFT%u-
%opk`W$mVHgmrMJ`XC6mn1fhWCWMGFhF-XtL<XOh'[LD2iWY"hDVSsG*]>VOX-^7Gek+nRS7+f?mJC`6'9'*<hYCB">>]CJTbp(Z6
%*]hFP*2\2]^ZStd--V.gi))gb?k"N[hbOudfs4gV+%u8r3'^S^,T[!+<MJH;)l"r:":;^pqbE/TV6F&+7J5NF9*RfVCr_ot1*6-W
%)T$eZ/4":*<33MV.Wqop7:#Ek80Ggu4<0%q51r%J&?YCCTBtC1bOA5r)$\h.m&@i?\/Zu]8#G6E@(")6JqZ3$V[8ABFc>T3Em0^B
%Brf,q-d%O_l;c&n?OZ<;`<ARADcJJ.]t.3;ek>]$.e?UN6Z&g5X01rKja[;jq7_&'WhE^I+j9eSqFQ1uB>fs0^m[>/=BJVYk.0*I
%X8l`kakAOq)?tq<:OtEl1G-W?&1oCVd[7'*/%#I]KQc`>$lnZBOY":WZ0>W+duk0):mLTF)]"!@i=B+-C5<@9oXiL$b%"///-.7S
%#e_u'924\;?9+mMR5]T!*Gtn=Y+APE8=5#3;&"!(%Y8#*<kZ:U-*qE@2lj>aoUsm'i3khGoPF7P/>pK])<ZG2#qa]d*h;Q@_K8TS
%#!)[,4/M56=EUB',7g?dM-!KmNH^Sr(/)'gi>#td.1'"o82UahP$\%[W2\/IBL3tq#@JJKmhgfm%(ZTun<")+:;@E1H(pAG+fD(=
%7enS.j.gZ)=%Zr`*iY+=@YIUe\aWh5af7D>];71]:o<[Hb.W<_/8kQohB+B"_?7*ohWlS>UTA7k;<HNe9#_L%g+e;kR))27Kuual
%7V_"Bkf2q6MIZ!3*EE]f1M-*bs8(R&ks^J](3a(qG'^i^E?6h0Cu-RR2TXC5!j@?QbJ-9[J,dGNLPcjK.9$0c%F'"7^5?radaiIB
%pE(8G[WJh.8,Msj8%2-&",p!`D<"GGe^HF?'-fD[oq.oW[Q$k7rus\sMe9\?F?g!LV)?VKe+qqu,>q&=@#QRV's/<G+!p?o"[&T8
%oX;L#X]?`uX-!BlkG13B#\Dc'qTZE@jBV4HWq5VYT^E-2@Vlb+e#7(ebJl#O[3)"O`A).GmG^IW2YUpt4(#W5A,lB>onh%Xqu>4?
%G-/2(fpU]F62cRe,Ns%#-mLMl1;ghh95P4Ggu&t9];A\Q/.8hc7&a_+rk7Ld]HcRmVcK)M`gD?eYAn1"R3.P',K=sm`#-ja_C_H\
%l%8[h#_YibYoZEsf1rps)+/8MT!n#V2"!37=0\0;LWBgO@)O_R0/mf>Au%=9e&Kd<cHE]3=N/]ekB3'[H6iAb<a.FM&fa'cb@Xu^
%Z>SZc7OBfh3)d6p5!TFPpYGNd0`u&E-0qrE=5,SX1<Yl.K8#+Ml=[Q0Z=\TU&X.EZYI.S<q95djT4$M5Jh5)$/;)"RpSMur8fgL@
%GJjSb8J:!YBXaFk\W7rpLMXbmgW8"2]gd^W6GAD<aK:ut2RAuXS[hi#rG_TnpDlCdM>`E$@FcrH"Bp[-82Ya>1Q.:GNVlRjme<Y/
%A+kj".&:4)gR]k^][E_FJ8E;O.3g:W$QN=-<Pn'7iF%LE[3i1nl+@S<O%]f.s*,\2]qmu%X,(jr1fNipe9aT2,>Is!2sK&pI)T@d
%`@M]i$EDhe=cYMli#J0%de\m>>81&%8C(r6DTc37TRekn7*KC@Q!/Itoi0sO^c$%I$0/?;Y#oP,$E^-JId1Bd7O-IbXO5ji9^]:p
%B<J/R`gN\\`4[OHH;DW=^Seh"1%)q,D3>c.k4i_a,HB[/+(H%b7e+s0liDM5?GV'n2?m+)J6Q2?JUf>3\k$*eWqf.]R$Zo'dK(Ps
%JiGO1%N.(Nbu[RL4g*<=XK#b@,pA=;<,mXi/,O\LTDJ#tofXP-dZi%Ah`7``l>aG"8E?p8#,sM5@d3aMVrVkA\t\WgWb2V3q'r+M
%JSas<\Q,tCL$o(0fQ3F@-Opggo.3ff4`cO<8=npd!n[#&`/(^'Wk,uB\^4..BdsdY'E;3^*+e)<rNj^F&sQI<UaAMU"rZhS&;2.U
%gJ$\`O"V,*`#+"hN"/fR\1sb9d2$iI_>/jo*&2mJgcpaaT8g1G?DtM=)pmL3MX'u8h!,oMRVbsG;*.d.:TNK*T.,W(=]1=cR1<*'
%.]IC7o,q)nh5>%-/ap#.\d;!f(<]C.8F^XT)Bu2'ohRbG+O;hrFN9ofa@N&T1&&n3U)a-Qc<h-XU3mgRDY2&h[2b#o_jIS1,ZS5$
%2@.4.qD*4!ee4*Am=/iO!+<'jXmOtD=<?^=/N10\1"_?Leks/tVVFSp:,OaC"U<"/<"Wrl?Ld1jnNR'nV\,!mV]>SgF9AVT'8tT;
%-kRcm..?)6S.k3cXaPJ49Sh(Tj!LSLoH"<G#0a6Y*uPS_+_7UsA'Yh]Q`Z'#"AQYfUm9P[4<lBO.T%o)ZZ[k&QPl?*E`3%U[?JNP
%g1>q$Cf=@0GTW8E'F>lc?,#,o?T0P5LG3JM%4/<f!hKGokf/D?c[_9o>nVh\jbZ1K)*=iUl>`UA4g&(VeV6[9A\LSRq$7n_1Fg5m
%'OH,!GT,c]FkmiU7rf(is0h<Fr01GD//8@41YoW?q'Yc92,P9"L.?$Z9T4o2emcM/W^@s-FZl-?/NhM#n>SRC*=EYV<>`!7i=<V&
%O7pc'Y.93DX`T<`8@.B(Jsnj8K2\AqkS7N"M_7)`cd+9\jWInFA2D`@rTEX-9V4Qf#HtY'H.Z%i?*-WMLi=?1d'n-OO_giL!1*bS
%VtH;4^f8aYD^g7*?(;6PQ='.8SXHo$<2!j&TRh,+P5<0V>U;P.d%l.<:9'"'-7DTC1KAQ>/Jr1Q>V]Kn;uFSdG;&E..oSrJmX7(B
%WH.qJp\<p4@](07=[*:Qq`R5j0rQ=$P9nXq&taG0D%LZ87<j)R14p5$W;QWeg9?!R.$OPJJK.\jMMca4F$4UeEq7W)T*H[DTJR`O
%>bM13>hNQ0Eq<iO/%P+)YT?!j[SAIs9)X.JGMHs_2"rDn%5-ARJOiah7'hJA)d<JiCAbT&dreb/'DV<.hpMtt8PVRif9s]1_`IOO
%$3#*cS/f!fpDmp&hC#)"(5u4nBG@>#f^f*no6FKdGZ*EpUt7&[YGOTOZh-T]]asc$B2C`u+8r>n?P.qD?j7"^Gl78%Zfkg('"e2S
%c8T#=`CQeAiZ3>>b/V6=7I-?jeW*'+X."S$_(AjK+*#NKCV62k06o&CODn`(46,&=7lDBb1^a.1S'0e0b<jYYD</iJmMtLO$PXd@
%9Yo<4hgX_UnJV.li]0Km-*00toW<45#eY3=<jrS(FhI#I5>mE>NhEH7A'-lVnXZIEX^Ki;3!ra(WfBkFd%J'uhN$6)p7OTS:VT$(
%HDJ]ldU:!q'-d)CT*;4WTt5t7+^$Ae'bqks@6\m^(,.geB0b_dfh];!D.!lF>Y&Gj[T,K[8c?^48&1o'Xl+ABTQa/TmA'tjPX'Jo
%5Tfp`F3c7d-k"a1WK\US+h5(hNm]=#Em;5/)3/MJ<<PV(jG0cWd7*nXF)#I&Ms*oI=>osK"QMQo5SH9,Snb6.pnnQ(MoUNO,cHub
%.X9<MjBK%uQg:R7pE!>-mmSE@1a3GlT@?MR]MN"YqJIhI#o#rdqhEH`X.9k$7/]KpnqBid:IOQt#b1WU5>_CkH"O2N&5gnY4ei'@
%T!DAdlY.m\^#GWRe>g0N@+D;^oO3aGF*CLP_!$?X\'jkmlDtG0cCm^/g(6GD:He!Xa-M#4!e&%iL!udX5%lfb3M,(QGAlg``0MbD
%Q<GCY-r/\A1&CSu]+t56i%lM83P86pOPKk!loj8%"H0rPA1U;SOHrCVRlZZ8Ph($(n5>UCOoQbS>(+Q?Li@a!B4sT-T(,=<F=Al7
%p*.e(C'?"k8(:N)J,7a%fN7snri4*mW(u2*ni0iJ;Ag)>F2l@HYH;U<'ShY*WIXF."E2M0WDSBDm5;Rf1d1+*P8"Y"=lR(M:MM1b
%0"drH[RYft;FtYgh.7>ubf?m>o.`1(7"bkMdcmC27U)_Ek4i6rTh\1%kGTJM^]aEXY4bGB9_Cu?O?[C:ngm,Yf-e=KEDL_Aj;V`q
%1X.Bu[1f>CC\<IinJ5rBV%tAD#,/V#<&53g6D4Be@s#o(IF=IgWYCb?Ff.HQ./X\<hHGa`(Be"X7k8ljN:5qck\QO_@N+q[gBXb&
%fSBe9dCBPpUlipLetDKUJa-geUI.NE'/]k9j7097DuAF(V-f=;5$gb0nFt3)H962;O)O\U1rMtS^]$Um4n-hT9(&0/mX#*P$_G3.
%)%[5d(X,<H=Qt^3pr7>rM<!k4QT>hC:sVW\7hQ-"AH^,oE<'.6(=d?p1;*n!m7&R/`=821`t>FkVe6N^%rql%5`1W75u"@TVEu:C
%Na>PLEjaJ/JXp161TY9>4PC3Y62Z/'lAPilEL'9/WP&+<b5[DJ^0]\=5oK(3R;Oj<V>lU$-TLW%b';oLEQo84$IpI)e$\Q<<)T)K
%$Ocj\2,6+f=`1P/<W\RnU1mq[20`Yj_?^If130HYALm:XTDPhk^Z+\os-AmsP(tcIInqb?X$aMNWH``XpAd!D!SLXE[_J7j9J?V:
%p#nJ$o!)"A@0g;^FQm]&BBEEdl;CsfaN*;)bqKod5sh@;4ekVi%:%lTGTRb7&P`bFB-RZrEUjL>mOK4NO-+FK'0+n<L??"/d]%P1
%:"<IQEXpYm:2*<([c7*>e#tM2-"=4YKT)[=q(!*/0a3[KetM9$d`53bL!+I02G):s"u]uPp8j;KhVo/u6aH$,iQ825UeTpXaOfgB
%l$AS=q+!jBm:Dn*_4QPA8)NaeL#C9)X1q.fa/dq@lscE]HBfPRSnR&E^5ST)-D-Hb@[AhW(_=4,lIQIBLYTq)$)MVk,/_Ot2>'iO
%Y<F#<O7Yh?HRT<Ze`<G]Y(EE`V((&5C'??8C&lQX>+X+k]gDjba1f]IY#7&%nL<be:^3#EQ7`oKdhK)(>@s]Ki)(`qS\tYg"12NQ
%mE)G@bti1n1^$8oXA<7]\:jIpLKjkin6t^%>&[^?>L8t'>\n;M0^5JXT*-uj"cUG4oVN_&-V/taN16$jiVjBRp-4"*]/%*;j[IQ%
%EAbqa5c7sY"<GO55\G8QZ^74=`8"571H#<_-n06?n+9Q3N*j^3o>R/t`5F-@W$LqS1/h/liihB\Eht9tgb^MN%O_uLK)Q2?J9:V:
%d[tM@Q;Kt[[gFGC5kS"(BHnFe;%69;A#fLl[g[6o,<Na<Ys*2k@YHhaAn!j*W&&E:l1iMh2TGXZb1fQ%dr\B)Q3H%,M>[8hlpU3?
%P]RU!pj4k,<R)R?fJab(c<Lo[Y:H0Z5erbVf'_EqGO9L?m<,(=;L#L/#Lu:T.r-6;*pZt`n<C&DrBfU/X]hEn!p$5iesck^FsuU'
%g&\b5)na>dm$VQ'W[r87lDXT-DJ/!H-nSan@^Oe9'm!K:,Yp!<`k)6j5A;-uQJdia)d(q*Hi1qYZaN,`l4hMg3BT*W&Nm_P"S&X9
%p3b$KW]ThH+S,kD4nT6G@J*grURE*4gi:8j1-V0V&\bh`4kVW9i!P3m+>:nQ>4Q5iF3Q42Y.5d&9o=A&)"DD"(9e1r,6dR##K@_d
%FCb@,CV6897$frt8d3frJ*B.9"@^89Ig.OYhImg$7D_C)cIs3MZ'A(q4aIT#m]td)ldHS[3K43pUCn/lHg[F%l[u,P!F53#6MN=n
%rLVq"-5e$N2;SV`!?u"BnsQS`BI:u0Q?"c'Tr91!fe=N]V'UrR:UU-hX]%+02>aj+I7'r/G?#gVQHrMLc#NJ1iKZjm<(1ffS$YO.
%Z<:T^W(BOf<EX4H\W'_ZJFLN?Vmqs+!sQ?[W9A\>Oi'WR\jUs8%i[]DS+4Z2h<h<lEdP'Z+(7%[Lb@=^Qod.,`!>+24:h*+4TZmU
%k%9.1ZER^l[YXRD_@c"bQGHp/eprRNVKJE)%J5pSK&pp.5RFYhD7[eF\(K:rN\7'h3EW_M,G6E7G`G;5rKS=pOBmf-7"h'Yf[I(B
%ck@N+N8UEZ;6@Kpf#ZV%p2QKPB;p#DestK&rVOZU5JNmLU<uFiU+eVVPC-0-n"?=JodmIc+_(=jp8oc.,Dg<1GKUO[KbmaJi@8h1
%=_gD,f-4-qqnO_Rg8`fk=>72j\S72s%kTHtO8KWBmZXF/G,.tf2+P4g/S85M$pPr*/?7@Cdm?`raR%<.?^Db!(0:,CjM0t9<s`&d
%k'B?8ZMrq*r)6<ZHhZ#.h_P'*4MrK162GnYRh7KB(:fT/HB6scqCD>.T?e:V&7/)LlM6c:\EBmP'@S\=,EJ-r[K?>:IR#Sa)N4@p
%$#fIs>.tO2a_W7Ef?0),gppc(@EX`tmf4p[,!cIM%2u'C_.Ifs4kVHn$uXOq<>nkpQcR4Qb;qgE:.2*[,]=q3OR#THLqmFt&O[(G
%a]g&68&*#T'0TT-><XtD4-QZia'L-4]RMQW4Z2j&b#p0UioM^K>k\'*M?-fqR'g0VKd4_gO"roQ#4NCUGn`-ZJXa>G$XPR`mhN2@
%FV]i-LI__Q&MYj]Ec'*laBUj[:P`n$Gd>mQM)8O+lQ*chG8K01RoTQ&gae.=ilI1OU0G]@_+At2.(a48L(]+m\1)Ai:pi3)<ZV]7
%;O7p.l6sj`5m>k'p!>dI@8d'Cd>Rt7<V,[-WZsVfmRsu(H>oHQl9A/DOhRiV3]Yet4$$:4.n0M>&OMOXHQIQ<OWi!<M.jBpoD@5$
%1d-bNi,MZ<^-'40@''iQD133@I)(roo\k\3#_>q1qU]2.DX&>`>HsaV'*kc`47\u=K#=%21(4.FMc'Ftc.qKZX1"`F?pVTS1#Yqo
%oM`5Pgad+k0nFh3!nuZeW.4`Vnhb.j&dc:0!sPi44hd1&LcA.jT=b+?>.^ckIg%4ma1(/OHQiD>b2k3MRXc)(>hh.3XSGuFo<F/R
%B,Ha*GcT3&]/]+d$SF&oU'WRrEDf*.BGPQ7>^N6m$=J^.*Pn^?;3CRJm1?ON,_Ec^eL#<)_X8r5-?)C'I>6BG`-.Rql1TCiSiI?c
%0d,Z6V,G0UN#'lF*EaWK%8>,$Q.3mcE]ofqrRdNB'DWWJfjfBb?Qg"qCiZ]6d\Ug/rPT$;la,72\gOlTf33aOI"o".ESJu!7\]U5
%jPRAF$&j5_hP%C5a(M#X<d#s;RBB@o<G&HDQFem\,L:,n?D!`?donF:GM+kL<CfcW1LL\Y7#8rT`!8%5;2NYcl/$l>NIq1QVRn6"
%!"#U!h?QtpeGrWf4!u]YMb%G[&o6HPgWJh,2^`jH\9TrMcC?nK`T6[aVUj"hcV/*'khjcbk@T?8[26*mG`6m]lE!3)VjAOX?lZV,
%/)k<qCapjLjJUFVIu6aIIsjF[7"Z6Rj!YKhK'Js>&batB`@N6-rg^gW#PjXT\pZ7V.Z0USH.jL3g.f9DT[Gt*bO"NDgoJ`+)C1_H
%JEJsd5LhpL=,49ohZgHQE[sRar^M86lco?-!AS1CK_5T5mJ3?HDBoAF`Psb;5&Z6&h00-KC!#k4.^9$5:m9+A;o4;'Bd4_k%1o]$
%Ke&=Nars&dOA4>i&\,\f#66.B1M?sfEs0M[+>J151oaT0!#+`$pfQ?j+o<,`3,\"4*U4U\&SperCqup4,SJ>A$qSaOXAshEJss9H
%;u?(XiV-$aI_s\U>,,49!q2$T:RiY`,X9?B_eR[oC7PVl.07LQld]2lK)-S\DNgem%RmX\B2Pqf$ND[0dOWBr&"FfKZCrZ7-/aNa
%D9"q*Kq;Ita4Sc'&Z@Ht@Gf.E!q2L48+?&l"n$LBPY"NfihlMJ%OV-o-C[V*cQm50.mDq%biDe_a.0f',.k+)Z'A\t&KYe8`ADD,
%&h,W`>%XL@HsW5jo(B,tL"ntaH_Ddk.?,u0=\hpEQ1^!43C]h#<SmWK"n"G&*J-g,0;m1h^$8HBdk]hocpD,c5tJ(->r)O#\$X[A
%[]2B1*l&(RbV..:[IuNOc0IW'6[ko4,dq7-SCi*L=/o&SN^)E^Y9oMe;mE4+oag.;SX'Pe`D/_C1V[D+1MZOLWR"OprN`IfAJ+?.
%oku/i$j,*%cus?O=\_&R(2[t`%burrqu2#WUG[mB<[9kSU_!F;Jl%PR2'l5o>;ZQd-XbgAKC0M8gp=$6%IE1u$^W;SkjFPtRoj)Q
%6ark]mp=Ph]jf<#OHrer!U$Tf3C+lc:/nTL*>eUV?@!DU:5RbS`j17r#aN)),2n*JM#Z:G3Zg^]mEC,B21N:sHZ0&H>h,L]XCYa^
%$s&hCk&;+<D!WA5Cb&<*N3tM[[`%S[RHd?sf_2`(b4h/JE`aX92HI5WmoFkI(7'.MnpGpLP)D[<(Ojl:al_qiC;pC#]0#RHE(:$U
%NH"g0>i=dk(FniMr^bp60Y^V-3!p$B_45^;0;t/O&b=mS7fH9'F;f2'Ubk(kOh_Ti-[D9k8_AR>gJWdpJ9O[<QDFiZq2s^UOi,kt
%#)>a;XN/h`^>;8/8>4%qCdj?)M0snVXlG)YE2'd(N+h^^D;c-e"ODcm.G5_cZ4JZ-rB!Ds!YV-e)tE$=maC4@3_#%qgnp_h]kr(B
%l\s8MSL*!5XX"jf;6KT#>Va<s-)fPQA&_I#$TdRH7`d4;[3'X\"PlVKfR;U&>m\T16DOZ`7(W/:)+[asZj$kc^a2mLVU,KW%tD-s
%>sg^]\4]nprkS8-]I[533238hq-F8r7\t0A!AU,$qQ6m<5nCrCVA6L\)^&L1Q%2piA4F]O7,?a/W9SD!cINK<lFl4,Y9j7YfC>.7
%m_Kq1nht;R"_g@BS2l4o?X_2*E'n?a[U#F$SmWTG<rs?)_XnUTL,Q*oB#Ms/IEM[Ii(g50!!9P@T6_qW2uAoEk=!8Y5t#U]#?Ja<
%c.]j::e`TKd]ZUpNBDYiEEkVF6s6Q^,'Dc.OTP'1fLLG)`m7r&)IjC/J3)8a?&_O1,ZErVoj/`P6B0Q^.A*R@krEbc$&[a]iCXrl
%LO,8H#EeW1GtNoLb2/5$/:4V)]LmC.o<GK^J#R%SN$8corOnd0)"2.:fN5ZW%0,L<hH:GuX]8g=Ue\LTq)qWP'flh)j9?i9ad^K:
%9"3NF5-GuVO&^b/-oUIJPckm%g8^iRUB8`TF8f:R/+?fU5*3LAGFZC1V7,]haDS6]m,@p.h1[MQU)pPkpBjNi,`V$9[pXH\A2'4Q
%9MM^_W-X^>=QG5*We38JJ9\/9Um's/B.T?HS2nb37GNY_-l4?)/a9M6:0C^)A'*H^SO@h[7T>YX_2TG[>=@E8jje_URd"Ec>+3$2
%`j.";AAni.NZlio+HR:i^X]/KAGM3I<O/[l!(WdjaZQ`B*n#H<mRNo\W%>^280#\I6.#T,V9W-N!tTE"!`(>SB'V#jKp/.VN%U@m
%JC!T>j'+-Q`FR?-;9.o!Mn[;ff))7&B574.:m&%Dgm&$3p/ZCsLY/%$r,>f-OK3;,mprPXXU"i@,NuPSNKZ]dG"j3&dSTbH`sM7g
%&J`c:iEQ%\'L,($<\U1NC^,Fg'Q1>kF92?Zo7mF?;F"1\6B_Oj4(LAERO.m%ZQ^^HVP2aI*u!V8(s!R*,.eUtYOP]o9`W?blHZl5
%DTNj`rIcR>m-H\Q^@F)69i;jTBup47HETb%RUVQsfYu:1'b<JY!.9JA<<9Rf@7ID`oW@Pai46n1p9u^<pOE).J.(imkco_`L]O@2
%$1$aLk=1iO=bFB<7$c7c>F!]/9JYG$e;0.;2DK7D93;o>)ZPIk>`kVmeNi$Pg%$UbT6*miWK]V-9QKWp):3k.N;<Pb9-;@B8u*HV
%OBtdtrmM4qp4W5Q/$;B*V1@A$rt%G]U(qO&'))4:K6I;Y$g;%DPf,jRL.C&mOGZR^Y@?_(_>VU&pq?eAo;d2lOdTQmCGWqY#V*Q*
%`0o$Oe=B-<TgYL;"`\!0#=_k3),VVKd-oa;s5Q!)gNL7'\??u;2!!lP&-(S%;8jK(iZGn/lG"d_ju]4&2X_%8'^0G-H?%Z4H=Mlg
%^nqNufd`o8a0]U3a*>"O>kL8HB>4;tcFj.P7`E%m/Ofa>_O;0:4aT)g@\I%.dAsf9XQhG6GZ(8U#99@Rr)jNjIo_=JUd9Hlp'-YT
%dV*%\qt]hE%"AcETn^1XL&"2"N)drRo?ZA;[UK%a#CGjkL&6aWBR_*'nGdNH(*=uo?DqORh6ftSZ+.r:d>2l`HbiKsQ$@Kcf\#q,
%J"P[bn.6[&_\+=Pc@TR*piCfG.YdC2044W/O3\"!kOV@]T[4NaOQYD-j/E3B,3Boj!KCnHk)jj2_kZOYg\(G\.TA5g,&MZ/[3GP?
%.36oBhu`]ukhKNon%W]W"M$-,kt5%KHXb#A_S/X'7RYAmT]A+jmLOkK/qJIMS+Rq`G`D@lRf7^3nmaPf?U?JcMuHbX^Ah&,)Y4K%
%(?:RM7>,<&jM4<_rU;9.<;tA`eaIphXbr`[7;(GPf%*M&pQ;Qgl^7NQ3pk=6FSVCh&Q?,A,@eghH3]ZP8;'n+/BDWC=4K<4MLi01
%hP34(`-N8',8'%7,`s-D%X]d*3l:4[Q!61O?$0U7cV1@"+!VlH)O206j2Zg]H]:X@/k+L;Vsf&61HTET$$3-)QY.L[[_CVK>tk3\
%%$r2807rIYb>_?hIE^n!r)mok8=?n&2o"6S`.=0BruAN-[?t%_)W*g.cL2'sJ'hSa9ZW#a*t"ts/7'pbG1oQ[-'SZ8e9AekmJSVD
%J*/d[Q&U`'5Id[@?d@YLJ,,$&m?bT_]3kQs0E0.%rmgK;nCR^0nV;Vhh/@fAqg\S<h\5l/pqL28@X\,4s7Y2sra10NMgtQa0E0eB
%nDaIrfj1p8WeHNQ;9--l;@kY]_UiQ9EH*;So4hZJd]_pjA<59ME*h#e'64Nh!L>t^BEZHR3[elL:"/j\#\OH;:a/ls?Vas-ioudY
%Ms6hs$)7FP)O2P[C=6#oC/0hTF?B0[)*;nbU09`i)6<;d.YV^R1$+Bn4[=TlkN#t"]Cu6/1CqIqh%LaiFZrZ0CZB8Ab[\).=Dl/L
%ks9SDnDULOp(];BP$bhLJo@IJ<\^-TWhL_.oaSKUOOb:=eamK.G#+gmRm"!peQY$q;]j/?Nc;NZ=0(u,V\U_QlTHh%m&>#_%.NK!
%[C!p*%Yos8oqOVWXp#b^<CIPjno^h<c9@K4]7eSk++3L<O'!]#@<XAFU_><J*$WS4,1.5JD%CqnfJe0W9Yd83P8XBlY7,m(fFkoB
%b!H`i("Adg%5*2RZ#?Et8`cUKN&k?E?D%;6i6op@l3>BS;]rpQHtI%#]5sZEp*ac^%YeYXo3ir?a\LF_p,_<)g;=`!&U`&f'AX`u
%fb'Gm@(1*_\%k#PaNEABne?qPnoNdUU-&ZAbkA9Or&_#mSO<M,5'IpQO`.rkLJd-ja1uSj]L/GN#/J6?GWl:&]u7Rrc</oa;@5Yn
%R_]:Se$VM1c"g^)6YQVE%:N>oUP4#N"sS5Gg5Inc@'7*eKeB::KjO!+#fNA;C_gg3;M4fSr`,WO'6?_P@Sa"j+7[!kSQ=bq*OPiX
%@e@6=`Gjo1/8^3U]_=:CXs.\2qmss[l7O)"V64Nj$bItW!u8Pd]\]XR5Z=Mp%X(SX:Mp/:*B9"S$Ld#nI?OI)V'n)C:^A)Id+,T6
%mBn,c=Qd/fP+O5%pKUY*UYO*C%3F-s%_SF;K_\0WHC5J6>pGtTPcO;M84m$75"C]"@6uLM]2\p%@EMPVg$SMK/(bd,G1_<W82FlM
%doTFZ<Xn_ngo.EcA>V)^*@+GqZlEbP2[Zd.8]JLXR)f(>Sqrla%QqD,&Sp'+3`T:G>*SA<8?Xg=Qs.)4Lu0h05@AkcM83EVm$P8?
%7H?bUUijbR<Iu0$"kN.pj4T6ClADP0;nVg$b-&/n+hs(aO&-P#dU77\6CNGXlrQUVA==JaqtH/.[6si6h2S='`hfl38dPcs!LU,^
%$ShFUrKaB,a)T8lc%\g<TTn(j39b1?hPXW0308*KRU,0.rom*-VJ+4)!sbQU,5\UrcLE(jLI7dEZMf_,r45t&O79e8jL(+W:qi*>
%GR4lOCYTq9VHPupbMQXmPAQGbW6AOnM-gak&7F34,`JsmRLLZqM'H1mLt<m7E&:c(]:(D9l$+l>bGA7^krZ[,oCkX%A+[QL#^G+W
%s,7L+/ukHMHkujQc!S&VEteN.X-Ft`\a@u2Dahk4R??!*$GM&*\nh:8N>il,.)[,riA:W,6D+C(&9[CI[e>_Z-=V8d4FPa=3aBA2
%-j0i$;]q1-iAM>!9mYn(2mZ[0@^UImgFHdn,""hb83+PiAREA\?Upem-nJW&430i_GmW,!lU@FYVAsbL]l*^E>=`oN<$_BV[NSf`
%h`3/m?/Q[e`BFX$7XDbN?6A1*=(\>Ac4L=4W5LFJ#;tY`>C$/q7`(FR9lriD;B"r)N-$];:8Yg1Adq77Nn[nN:D(2JE^uI^=gnHb
%F67P,D-7Z*`V*GG8o6tBcdQ]%LboaT1CPfASJEZm&SEkcJ.VILLrO[=:O*t#?5Zbeh*0i)lueRS&7$,L/k84*?$E/"h,!KKcLs"t
%,L@P6nld,d49K%%An:+K-)f?#""9B0fltdef8:fU#LP25U9F.&p*'_iT,q9'H<!j9Qi[W$UZ70+]I-:(%5"[U<2AqJ#^^d@/(OnG
%27!.2Rqb+%in%,'k>S/dW[a&MSli/G;)(I"P0th(4md^=p<@K@7ie"n4K;KED;,oNCnc#u'Q<TG7ru-*@Hsf->:U^:#O);mP?YHC
%U(u2L>1Z'LH=HjE6e[XV;OnEdNq>mR_S;,Rq=G6#mF!!`a-"''!?_$Vf!16UH[!b3WoM[)b^)RVHemH>NDGEM37#+-Errr)jYMqs
%Yp`uXcNCo7:Wm$</*1Hm2Dg&#PUL4Hj2l>UT-_9G/;WFTBJ?$pYs'tqC0/?6(459)>\Z"3M1@-e4D4nZV=OOp_+8PW16l*D649QC
%Tr-T6)Ss/E,ljq$.rmjNRVFF?kG)hR))A+-oAd5iTS"MLbi7%>W/[Q\2KC+UbB_E*Q_`ju#rI(f!BpgBYI..$IhLK`?k=@1iU;E`
%]f_/m(I*@seu@#n@e2!SH'B6_?51_om6Kp$/EJ`:h7If_V`/jMSMs,*[3IokVMNkJ0Yp)[DqXFl0kM7jKU<D^cn.Z/7^!X2f/FEf
%9+.k%"UOlFl*Z*5XK4;XLpm$Bfuqt[Bl+%cO$BH_=Hd/H*h/pbj)Y%,qZL6*P*)fH^KT%<KF6)h-Xqhr*kN+p=N3cmZ8k,lgp-];
%e$5s?Spe"E+p@\jNh[)S<U9fB71Jcbp^me25V>t:==Il,$=A'$$^RV'G16@5'9iV5SdcProbZ>cMTBWGMSR^RY=dR6,Z[rIN0jpD
%[C",9>pV(X8G4OT2JoQLZuK^*AUR"NX5J>&'Zud5FmTdRO<H=%&LA!@_mb@pC72qM/#0M5!..a_4BF?K5g+i\doPT:nM;2un9M[W
%jHl15k@RlATEO;R7$XdSE0l9N-u4*f9&%\!%@RVn/LWn8APK?)*K^b'5X_2A^m3?LYpYcQ.SN<L;85mA4m9<0IX*6M*sK,"O&Pan
%#h,W&.nci'LBr$YJ>S[EJVdHk<m]<XLJmqA5^0>e7!,A@GhcQs[R8G[ro0sF*@fc>,1RaK<=ijFcr*2sN;jLVj`?qXc3sF+5*o?n
%*@$/ohWco?Y%9hH@.`iBbhEbl+k0fV[k!h=TBn\h?oSP-.'eb#Lkn_f"T)?p<d%nneD+sb63,;GelK."2,%]N0g77$O/:1-#Lo7,
%]&P*`,,qs+q[t"o.J^8r_=iZ/!i9*qT84IsVN\?#@gr7!21pf-^'ILa_r*t\J[e^C:[SZQfR$1Km),*'0gYn:)@"kP2-Sp/9a9tZ
%4OGrQ&F6!\W3?%rbT>WPE!V[S^>?=gM1C>nY@`Zbi%,3g0kknKMY;[t*ei#HcK6of[GDQ'o7T.BH8U6-XC<f]9]u:4#K5%BU&44p
%?u<s?(!1,#(=TG"Z.,[Roc*nhWUo=Qi$"lT$3dN&qOlHs(WGX65_ifKLbpfbV\GJm,%dcKc1R"i3CW82%,G=PdE+Z30bp^hPh4E9
%/4Rj;2+R;#<jF;$iV9^""#n5C2B&^<8t"$.>>08JdRjAV%"$$DSg'1*nOUok81hL,*L$#`e>_[Q0j?/o%>r#W0G.q)!Cl0[7*rda
%!%3^!I]WG6.u?KQ#j@1g.u4r%J+iLh0]3/8l#CMQL!+uSN#i,^G]25EqEUh0.PnU^\W;mj3VQtjkSQ0irLiB0VLb(6^9a:%g2Ko#
%iZf&W\CP<W'YansA=/U3n_b*&$4FGmK?L&<h[H%&W7cCWj@M%[WD-^!2\Dup1QUD"o'E!>E(5YJm?<^!<C5jV0%leZc]l*X=Z'3:
%^%k(Q>_nhK#q%tF6gS0%U0;gs/U%bONgdY.]cnh.2-)QW2X7>brH6D!>TN5C&=(n\%P$B:WpiT*4E(M$7mou[b=%AcIV$*l;HDjX
%0H-]=ED9T(nI)]%E6U1pq+-C-J0@bA>Jl:8"X5/b>4K8`D(m[3N5)E:;?j>AiG$)VTj^3`,OR5B1d\i:2k8(o7hA$8*@NU8<;7Xj
%g!o_A"faq"?u&*cdeSV`#;Pnj./LS$l97B,DYG(c05!,poCX[FHT-<Zc:\`ug(k;9Lg9g+P5R_H+fHLlN>89,"]R?J+cAi<&?9-M
%G%hqpX[eFTeE":Eo[943jOK!6\R9o_V/4\F>NftG?F1,gjN3s.eB_S391mpH%e3.Up4T55H9iLMhqh<>].7F%gD\3PO6_kJqj(a8
%&N?h@'WmLRPosB.oU$qF(-IN1hRQbnf%o]cX]sH@SN!Lbqt)[d+-X>0ZRd9169?>rSsGbN)%oG0n5A[n/+6.Bm'6"'3'(+H^rDfX
%+62n<mQ<F[F.R[T"Qsh?*0ls[#GSPeVbRjmPe/Vi-3N`52V#;4k4LFFoCs=bSXKj2>=[,h$bCKqaM5hVH[S*_'$^^r1"#"K,Xgu"
%:Yk&PDn:(qN,W,!c6TXGORRr(_3(q,cmXJ8OXBY,QSqp\5)u)IE=H=Xn*IAD"#`$=%NLqX?;Uj$VV:8oS@)BZNM,;+)YR="T?8sO
%E=Be;+?)W3erc#mi]Q+VpQaPma(]DYVol1Fc;Jn>1mW^Yoqr^C9gD%Brk=MdUbQ8r]?\/V?'`V^9d/b;'i_]a*E?\$/ERY9gbg>?
%iK2_D62T?59]R0^aJ!!d(:!46GM(HEB_eN,r_2B%!JhJUSI]DC8'3@#FGLmCU1M-C1FWLWgmGW>Ccb84(ljT?Z;p&BUE/Udaej\G
%:>+>R4h]%=i=OMdbo^K=$r4:G8Kc+$SfQn(b-Z^,o(GWiHWCJBUYWmma*s8$mD,Oc/DBaPb0@Vb4XMV[ndI9&Hh-#^lKC_`M*5E"
%Z&d?u&OQ%Jo(B9(V6S%=,pJ;)aC[1Ee3lQMl(7?.]Ff@dYbOA/$m76]g"u.1JN#Uef^#cleanC$-WSXSG*lS"/n*;$0kJ*ig^goC
%4T_lOKjekF!,Zp7#sI]-P5/B>]FZb'WtsabF=')&5#%hkZ&rO5lrXdHR7Pi1q0q`[%\@Q&.EHA$*eL^%RAL:_&M]SqZ'L4PW$Pp=
%]uJd$[iImt.P4%D)UtX1_I*m#RVbkOLM\tP[3:/fDL#/th&LLU:6!=3ARBtPV'QHu@^f<Y0P^F1AX2aVS(G_[:_j(k/`1G9R2=5j
%H)I[k[=B0@S9MM"q;/,bI_T)\4kL#n%4hetZXZHtgBtOgW(YgIN0gM2[8\>n,LgjS[HB@#G@J-^F&USU;EUe((%\CWg/nMsIaf<W
%fD$WT]$>Y5A$/5Ur*'TdMFn)(g.ulbpKX;!#;cpkq4uF=ZSg42,&#;8&OK[%;r#hhR=J-!%`qeAkKM0*\,(XW-Qc4A[C8]R=b:?o
%Zj$>.>NY/K8s.?1;7aV&<gi!hX&t1i2AY/IZI8.(bNh("$52K!#0C[niXN<H7/kE;0(0lK]'q?7o^M@h#Mq>[?6ecV[f9%QFurg<
%*G4SOVc_C3AgmQe(l"ViB:G8m][Um94%A7_9A-2l^ot,4De>/E&5VjE,!$'T"h9t+e/g2\&.7/mIt5=t/<e&+)hpD@NSUqh)<E@9
%nX7?%Iq!flNs0J-I:7C*;>=b9V;Tm@`2q$F49lBn61n)!gii2?$tPB#;5X!fcPj-)]"MuG(c6YMcpe(sbUlSD%>;Y(a7ZkUpi#,&
%K%V\!d^H!?8lBa'.sA20_pTi!.fut"rkW)fkCatl(/-J<HkL"gk],.bdZt\$6,nhb(b*u@#;E#]&+!8H@>g7l'iN4d8j@-4V@gSJ
%UKZ'?cj:V4Pm8Hu)n(')Z1O2_M:\Z"-]+Qr<>7N<<@?H%YG@&A!Z=PA'7mMrLsEa^@Nm/0bt`W]R>fB!UlLp>bH=#PE5)7M)4js*
%R8^ITOu^-m"N=4NZ.;\ke$^H=C??[%8]Old5&)Z:fGt!j]]D;A;tZ=MXLsGmX/G-31NqAtRk'dch3uA.++^j_kYA*Zg5rFQd@#I%
%i9Qb"dtgRGQETAp$Ba4mmcc<?P"H.d8"gJ5_Tpmb%eB6k9UB)@M@3`TLpDo:H3P&9,-,k<2.i>kR6m8p0IP)-g-LpWfn8Uq5"J(q
%,bOBX5JY.pM"9%o]24*:$FQp&p.^(]74Ao<>\Yl5=96&on19E2:#W$_NAs_RrTmo*0[<sDmkl4M&7!*dq",d_>-4t0<3s._TIog/
%Q9uNn+I'Ni&g0/0;0GiOK`^_i;JO57H>@L3N*\ugK0gN'$2aCbd*;%t,??+6Qoo>a6'KGI)#L?Z\#DIt-@Y()JUk4,Ht3^4#W@bl
%)m$rr3%`7(W,`J)a[71\]8MOE]lINAgobnuZsDo<)N_*-"t2H4B:>>`K=rcO,k@WXQc_6Amp@l"-G)i)2P!7r'CHi!<DJgf-YEL+
%L4!O&Fkf[fNo8'8jKn`)'MjO<b&?;afOfTX]mCE#E94f(rI76(KM+&M$cr0mH!7V4l?66JmTc?XPH%AGH:;B@mJBe%%k@,.jY9Bq
%@8]5\M(UGlV0c'pA\(,X;HSk^,=c;CpPD+S:08[kH<`=C#c_M!of::@C+q[AmYXuOA"5ua+VsThgdL43c^OK_j:MJC/(c1]YCrE]
%S\$k=a6NLq/QhFB"KbU/Y$&7:%kR<6H5pq#\ZXcK-knCu4@,24c`;eD[JOAm\X!fK>;Bu70QM#N5ma\*'Td*O6u^m\O05I+_TmfQ
%Tor8sh)5b=h:J8):c51UK5Qa53)<Z^%saIY&ilB.RSjj<A8c!-*@#a%j?e`]+]qLCRA<Gg4,<&Kn&Ds^5$F8`%=nbo1djDuTn-AF
%D/=A"84-4.S^qZAQ+L=O/ICrXCUL4PEq0fkS/X&'!"alA6pp`<#odWH6[9Y>")Up(j4K!C"EhLFJ+/^%^rIEcW7jA*]0+GF,3u2f
%%;DA#.E5D((hF(0?8TU-3EtNL5=S7!Bp@<al:@5$8Ws_1e%mmOKleNB/Qs0>#M\RbPcIX3&Mf(:rr-d%2a"/4IG"+hb%X[tN0NI^
%*95CBK[Ho,5gb&rgpCX6`"3QDcdp6TJSid7LRYm%WV$IND%;@7'MZg*)7q2s,G'_:Pt+otU4$in.Oo]^b-#EuQ#t!Ia9eF>iY-#(
%ljA>kUU5f,9?9W0k'9(#!34FP/AdtsA?45!C^r1bN`?pG^PMVb0*M5+mTjcu^t@>"MOM)K1<VG\O4*-KWq)_(^PbB9_'@U[_<-=.
%iB2usC26NM>"*,Yr)j8B,.PL9fS$ek:S)-@\Pg27a'Ia)82Ju;SmBCig=Y2tD!eeIk#A'-)d*RB*]A%gh^WbI4hP(-;7MqG_-,le
%=e$jkg@@'t32e2H1\*-KA&pS,.Sr7,a-<@2eS!-\7P[sfkL3<_nV<t[,r=pqYu)RpK+MQ;2#AS^Or>e5E>fB4,Zj9ba,Mk57E./k
%?>Qhn<1Bk1hNaN($lk7/^1rrE"HdehOaq"9A&P4-@d-mm%Y0+X5Ll*$Xd_'HWuGLp<%T+Fk/+'R[e85?ek&A=q];#@eLI'20I(Vl
%65WgZIh]8P?(t@46W=(*-Oo4U7nK0k5d\X!FaW3'H<oV]KY.9un;O3*L`&<XKk(jBCIL;K]?9"[)%gk&2.;#>UQ$ko]:$^b[\une
%hDYT?+\LgX4BB#t_eOeVd2k!3K9@JG0/]j#6WYS):/`>u29^F,WjGRND1]joS5XMX"dLSpFCZVh109<UZ6l(f%jk<!GsN1JX8F$!
%P*$pT^:#8<1?ubZAF>MQ5oI46-Akn`p%.Pjks4QIG-`p@3j_&/^`[:OH_gG7>OD*4!<l;ESp/MfE#^0-G*))'Z&uh'blZ!#FE[;&
%<:XZ'N47`54X1P'mr%u8p#`E*6"Eb^ppHluAV%'jAP)2P@Z6j=UCOZK*E@[cV\N:pG?:`5\BRKt'4^AiCkg6Om`?af)d\AV,&8Sj
%-m"SCq2@na8#0Q'(#Gl$!I.[>es\8Fe2S)_?!skMouh'2=u7IX)_H(j8Q`,O3<M#u;YJarDfU\D5GihpbTg7H<8VR4;,9HW@Qnha
%&)ImJkNhdq_g5&M>'KVM(U.mV[IjA_C54oN/O27&a95iRNctGO(qF-jdl?GPrU+!X+>"q*fo')?\gq[VN'sZ"FP*/rM'h^:fMnO!
%'W1A0o8-S:0EJn83)GZ3O2=sn'.J3tYT5Vccgr\*+GNUI@BT:315e_op-TPdVE;HB><t_GK8LT_\"P2!J@_<2e#3hV_TkoCFDb)f
%1X?\_=p<c`iM'?XVk_]OC6Bh0fnEtSgc:'k;k-`<U-n3RVoQrCi[D7SEg5Sd@pcND;ol)+$T2cPVA*tuW7;Ha9>Skqr3YHCl\&Ib
%)rAB3c00=YI"/6=lKN,YFhD"5;$t*=0_TW1B97W5%lcE<%e)-lX\,hDJr"`ELN4W>T?D4X0lg^laF<h:Q^[\KmU*TuZNi#_ZIX;W
%ZC0:rB;Gh$@D6`39SK<'.bW"%2U^dHEL;B6c17V:;S?]/>5*DUm!l+M#4q7RTiss@NKJPaE+H-b:.pr+L]n&JV?,n%f@%O]Epghu
%EjrB4,st.08Z(73HAYR]gJZ>JA7e>R9.pj8)V:InSE3qMXjtq7qfjW(P4*!Qd:Nql3c/0aT^k/>BJW/.RKr`@T>#)_*!K#:VKrpj
%QJKnaZ`8d1qtuPA]?<47+WnVN@b?Rf1ubN(<a1k["=#aLPeA-DdT4!qh(um^U.%ju>@NZ34?E\A%Xi/s9Y.:W'Po.e$WiaDHdiq*
%pJmJqFs1VA")0qua?Gg[cq*$)n'iXd,KX%i5R:I\HL?k@L=tZ??#pg/pj'I+cN_)#GX7<*.Yu7Dl>?j<rP&(R!_+,ZlrGEM.]lL-
%eY38^X@8<BWph3es)g1pKZ;l7^?jK`V2Vc-q!YUCF5)+Q)(2tJR;r2TWm<rWe'9:<]Ct0E`hGB>N%H`!hc#LZs!I2$dJC"HUTn5Y
%WqlA`L4;.ckt\\bHnoJ[NFRbmb='I/St&L*,PXPUlV%`_ADmT0N\`VhcUY/!LHp)?A?AI;55Z=Ogp?<pOGI"VXmZEYc.@bN)U2?d
%-O%-*XN,s>TUXa&2Ikn3l?/G_3WU0/gt8[-UQR?=q_Y:`^6Ccj*#=&rpJXu(?GZWCR0eUsk39Q-/fn:oAX;$!d7<<DhK:J^Eo/Vn
%;IhI/ISE,t'NQO.G>WiIA?H'f=dM:YK8KN<96_$?3i"gOk$AV%`DpDH+T:IP2[J=UYEt,,cSFc8L!Wg7[uVrd8Ej>NZeT0:0u%Ms
%`7JU[\'If)4S@0"WSi^LM<OFT47<dK'C51Sr"LNhWm7^p%V8Rr+k\mtD?W%sZRcVh`;-l3,tLD0c5]\437rA`-U!Ytm&\1>ld3/G
%B5]dVFfm4,o!^:*.O%?Yee3$i\kMjeV1B-h5(Uk,.6bth`i;8;arc78^eQP'b-%#s.S%?sUEQM-OOn7p`hf)I\E^DO1[uVGn\-!J
%IbO#n;Y*"o)VGd;"OE1GA$3[<r:4cKMERmHDV5>&g-4$P[p$F78<%GUE-c..;oG3[^q)f#,-]AEN+i8.]iH[Bl?U"=+HC;!Naaah
%PUm7@X,J#L&-<WI##5:QQ_^$l,\-QX[s5G-Ms60b,?.onidju;oh=43D=CY(TA$E1?-4YRL=[KSdX:0,0SqOgAKL0:M+np26gZju
%X?PXJ-b+htM!SFC./&pJ\shWI`VO,b)jLcX9cufNb44*a,uNIJiEe$8j`R/7/#Y7G3d?OiUcgJOVC'Hf2A=.ieptG+R[,uB=UnTD
%g`mS5LnA5?$6J*S+KilN$_<1m!(emG$di/QYi"FgdQtG$j]HVi0b'sM'&ff84o`%8p(I*\Y)tJ5g#!["&Jh.;Hj5F0m!<=s9q-E&
%K'S^:k,03O)m=#7:`HlY=qYG5Ooaks';qmeU9N$IO4gFq.9H:)"EZVtYlER:XVA<X=XhR$43Ldq"$7l7TQ8b%cdBpIPV,LM@8A4!
%E5,=mc(gSeqpX80'WH):7\NkKCtQePR,ScZ6;NNDNf&&.LbpFZ2_u?X1JHlod-Kt8#9utl<W"Yi&Q<08$3_Jt3'JM4PP3p7g8$tM
%.85T^m^]J+8Jgfa^gI]%O&'7BHMfOrMVPuR*R`Hcr8I+/G\7:p*`T6f!#ORI$tpkEW]8qg6M9[/^!oj2P@,k[7nC,Le3:To#m?M$
%idW1.NM.T47L1'<-U_gg;?PsXY9`rU;4lQcGnl^/DO"U*8=SU()lN?Y_0p#re/?DAp$Omo+t&?QbV\gd`>3[K7mhU?T&)>XP#p6b
%1[>PPB0(-fX%c5\O=2-T_m:dl>Ca$Uri*+.9)dYHS"OoF?:!AQ&ef3skd=hFTMC%!Z<H<sT8;;?.Gtakojd?%*WPib=P8>Y;49^*
%J8*dPOI^&2OB3te'0q!1T%4dJ%a2@KerP%"A5s5Lodpu_;cCuKI`pUCS`W.:&]&7?BqM<2%<mo@2CjKLe>fH2dA58Rm4(%PbkUC"
%bq#W:c.'4Z4YrM6LtiZA;g'ouirSh?EgF68U]c$Z@^2FLAAd:3DJ56SjEHkS3e7@20^2;5MJO_R>X%u_ReuGsZ3"%#<@bpHF9Tr1
%A]8VQ0N10$`6)mnPlGQHOgA-6X?9r9RkiWf6-j;Mc26<)-Y<aDrhi(6oS.?2`9:'rh855ua'lL0@%,Sk7sYV7(^6;B3CUE_pfq_C
%W+Sd6LH9rERNJ90/geQfogqJhc_S*9(6dB>-aU="@Gf%X;,WRG*II8FoY#.#qh:hAo08MV<us]sKZZ:M$!SG.>#cA7>'!:PcKI9(
%'n/b]O+;pe&\,l++%:J$D:M1#Uo4\^K1;YLH,[9D3o9jC\i;p&=2^+M;e.rUq^?n^HY>m^U%13ZISU[raTAeEm?KB!*G4_a`CR"L
%7pG]J/2!'e\-QV+)GL<F-BVf9\u-ih>:dm6T,;g99tK(tT`YE;+A_6d<K0"/X]jdhEPL-f-*KL1ZP$>GL6$AqDUW--pFMr9L45p"
%83fZ@C@BG/Bth%`FJ;7W1rIDDBX>Wj<D=uW,:0T\`+I<KY7]#DVCja3\/.ZOOm*h"Rt4XsqO5%#^2&&0r$<<N'Z@qV_o[?Dl<?YJ
%<XI)IWI%Fnh:c9]FOn[UI3ImRA0Hf"[@_YS#Rb`%9A&#42B=jo4K9.3?Lr07LZS&o9\O><!.QK#jM+c)Z<'iVbCMsMBN6PWCn!lP
%U*qr:qg36Ufm0gB[E<]ji'Z$[#gB=.cFp[%eC`FM]>0Xh^!n<q6+$.1An?2^P'b]D?bItRn0lW`gU`bIRJZ@J#:Ds[N)bh.3R5'8
%\+[UHo9AIbrIaRt;]o[%9IP&rE4\P3I8iRM[YSVA!d<3Q;\@3P`kOOE=bmus"5F-cH3J@`o.'lKCioG6Ma4'Tm$VX7])jbZQnkeT
%2[5%oKY6EL.Q+%C;tlbECJc0Mm'<.%<f-?<;h.IZ7D,>6f5f=`/Z90%F`7:/*L[M^+J=DdQBmEKgEoS^3OE9s1si3c=e,!9H31*[
%nql5\<Db3TGEo<_PHp1[@pS?V/Dg,I1ViY',8G33[1qV*?i1[1$[6=k:Dna`0i,dFV_Z@;q"Cr]2+UFI==AGY$/ZL7!?cBg$VE^K
%+UVMS=@PHVVi"LiapYl_.T\)?h6jVr'9sNQ'3Y^@IeXN17SB/2:(,DYb;W2tl4'C<q%VH:A#_-"pA39Hn;&k<Q*&j5,P0PtFiAuF
%iGC$LMB69W0rq=iUL@qa[7p*jS0oh[fD/C<PCT[7I-/d0[VuFMhb,Lg]F50ARCqbT$HE*k![NiOlg%;1FTrmDA%hUNL+rn5[i\5_
%=kD7MCWFH9c#Q'O-3'W8X7d?"W^&pR5U=[ZWeKFQc#[%NG)u$q)l!8*Y4/M60.(%;]*G2],)kW]-1$HCg56jJp0#ZZ]Z/t[_=EjH
%(Crk%<DeC?;@3ZhA7">%?%<^kIXoV?Ill!XIWLoQ+[l\#NOR;D*5r-1>iZB9#On/1$$-c,1-fjQE2h-l%Al4mRp'AQ4a&-)j^8As
%%*csfi)saEqW?=\X!(l_Jf?%47oc873(E&9hYA6U7V'>fba$],`$:*KI]E,MWMbV4"@pohrlh7+Ls&5&H/I^dosEI'nK*!u?=fu_
%BWJgNZ'B^XEKZ[(5&Qj([[P8C5,(o8-lo`*)YW/[p#L;,NK9n`Xa+2\O^ji*QC?apM4`hq`A:[T-Z%!iAM>iT_\^3f$126@H*Dt_
%Uc?W)$Zu1`D^R!tr0Oe#11X)-^YUefMG^lq$W?JNjNd)A#];tR\$@=HC1kB[+m7ZW&0AC_''\chT0R-)&S[n+g0)?YqtEC$\/Xdp
%a=!@2B1g]'D/aLY7n.UMm#+"<SGOOc?j*reW8b;'aoo%i<eB/pJ<]ncRoMI2Vl5<;;K'=nAAS/P)%?8*/cg1A=9Cs0:9E,eN8r3H
%N.EB2H]^7Z][q9)"[g)jaiA5g6f)XuG&6F?I>$&o^mVHE3XZB_Be$]H&aQq$A,#g,R+VSfo#*Yj?n">"3k$67`.VI*FLZYRX+$2A
%:2-;cXeSi$_6#t;F:U7gJ]E,\9[Jd;.O8!q_of%W&d.Van'BEj@ZP@Ga-sd3[VqIDk3,+).[!uZQ#T9!s6cj6Fu<8Pe!6<i;<jiN
%W>tS:I$ZpsCM?jT)$Lhkjt,cZ?4_#&^G?-HD,-Zn>A:j,:aA:W>B-o6Oo+'%.nX&"0gSiWXm@kq3RrHhWi5e!LfH4bB/?Qf6;,>%
%Q5>+;&+pYr%Q2t-H4*#-XM#B;V4=L!'1hk@`lm/\[`qXCPojEf3tJM=$P3m@^.PTpMb*QFPQPj]r]6JZd^hp@#erlU6bjS\H2pUZ
%Eu[=H9[i-;H8I-5HQT5/`"^Ud')H_coQ9d@/!P9EP)5^<>p]#=rN3\&:l(Dc&u[*%ia14dD;7oB40]$SP.1(TRQe4Z\=>>PE6=`%
%Z.F4.m:\-1-5n0ZmdK`m%9c@^!C'"ZGblnf&]%;O>up2V+XH,T*&.Q?)3O`M49UnN3k*&G33mOO'H?=7dpLjKB(Sp^FPeU6/-JW!
%5-ZKS7J]n'rbr!.,DuQ>;39R6="8pB<D?6=;pVH+SjcQM<LKl;&V')T<nL6CK#eQ:JQ;W5fg4eB,UlLE6eJNl*08mn'6cr[ZKRU9
%?62^mh1>JQBFL:@.)]=ERob_,0+@#A^NO5Pgfi7U,?h2B'c>CO`E]^^i\-$9cTO,m7(ORNjd&Z$p\A^R>\oq_2RXCMA'WTgO`.Oa
%MH5JnB;Xdmq8d]JWP.gfBRcDrEpef-cf58';8'ft/4uN%OdH3/^&!SN<`lC*3$T3Ra4Q=`4?"t2bc"s,0;e3;RLacsRBe$&CVV?(
%csj(jYsoV2?3h31,Uf`BU<sYofICMa$3UK+kBL9b65,s66_mp4RIg`/RIY%)jOmglSK/cTnZ94i/0+m<[Y[4(X.5qM?>`l$P[tq2
%E!:2]8Z'm&^.TR6>g\LE)kOu$7Y_BT)'-rE1?s[tT8kHE;'(%d(eY4K7BoCsMH..k5@HG4af83.F`b^VXEP4t'M7X@3E_6C:>PD=
%l?0"LM-A!#`c./oiiZf6(Ps1j:s>$d(#8KaCdoT]jK,6"!]od_GsT%PDdB.Ods+j;:c$0'$\^kjCFAJp-V+.sC[TUZ#i2Y)Wu)%h
%US]*P89?Ug.4*GH&PoZSkm6dIhj(#OcjYJBs&Jo0@egLL]iOi'olC^Dj*V77*Dsb'b?=)50NG!/Dlp`U(7\a4)Qg#?1CC<f/!"3&
%#\e(T`Xfb1%#qZ&<bCm';S_mIR75"iGJR/'7eDRBG8D?ObGA9HKPF#BIlZiTqE^_*bI@[A,q\(B9oS<P[ZYAL2Vack<7SdKaV'nD
%!YIo1?s15jHXD42JoKKd<_Rdb$s\mgO:1!oQ0L(C,]40o&Of/!ZF`*=mZTmo6NuqY)t1!K76'88#:V'!gdb,l7SS5RQQjPMP!lNf
%N!!qI>Ul0&c>($*W)b3rN98uli%^2i'=Sd(W9bV@j<D]E=;'[W;Lb@Fq)qB-XS+Z[+a9fm00tA.33>i5UWIS+/mKTTAf67iE@D76
%PK&Bar1n2X;U;:a1/u5h@#'3g!Gn#&-CRk/SqW`iNsM1EEk7$qL;&o0XK*65H#-g2RI,G$<,PPnp^gP%4/CC)Y0AMp!I*Dp??Ad\
%_t"Fi0DO8VBMIc(Hf+%":ZL4H$%bZn(!9,lqFlF.R3GNmAYt3W[&6qZ&;oeU:OtpSD"ok65`CO8i[i&/n8]qk&>P_lYlhP!NH,dQ
%Rko88#<_9Cg,055HDtXAI,?+W9;RYqm,^qNm/6-9`-Ytnpri5ekdL5gEdsI#:^,G8^'q5/m\oXi?euIr?9sG'$uH.RBDFk]W\CE?
%@iOuDT6]ie__*-(roTDDTgKR;k`)PtjT^'I6P:)K.iY,V?G>/&J&0Eg^R+Q)hE&`J<Ohc+=Z\b;ojm5-WQm.5QjZ^;m#D@+!m=\m
%OU<R+nn98,Gl!\C)%k^cWH^qTCRc^L8a/p&]dCOVRKq/.@9L0W_LOpe#\9d#>O$HtfOB>`[)XbRYKV)f-NPgZ8a3^2s%rV5fh"T:
%"JQd[<OO%cAiRnu.?Q5[Y+uo0,_DjJ&ellsa]XcNmV'>kQl7DijJBk%_0n(8'KD'rH#4N"6pQ=6;5jEH!1<L7.)<b4E;M\rlhKSN
%EXMj7mr1\klYn>\r)TJB;U"kBSu!uJ9-0sX.q'C3T+9la+VUI"I.mgKaVhI6d0aQeCsDJ:CY;Y]K,^0*>/7V-(3)]&AG0KCH4$ul
%=p>?*`H`o6qijsjV_6MPD]5`%5J+efJj4#nFaX)0^\R7=^AXP9qO;YUqtT"AJ,8!9r:W),rqV'DofrEImJH@$o@(JQp>>ftT;fSQ
%ID5ZXTDn-upm0NUr(k*-l)2;nm;IHoVu?5=hgbKlhu;c9s&t!RjU]-'rP-&KYAa;f0XS^)mQ^a6Fj9dgs7UqirJ//aS+0kb_f(%r
%\%hpoT76h/s8=J;(]X$WJ,duIqYdVti?*RGr@`Zjp](0Ws5U"q^]*V=J+n_*s5Bl*HMsa[J,fD<rqZ695J=5`GQ0$&%XK5d(Otrs
%ro_nXq7cp=&:*:~>
%AI9_PrivateDataEnd
